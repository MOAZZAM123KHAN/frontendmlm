{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moazz\\\\Downloads\\\\Ecommerce-MLM-Chain-main\\\\Ecommerce-MLM-Chain-main\\\\frontend\\\\frontend\\\\src\\\\components\\\\dashboard\\\\Wallet.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useCallback } from 'react';\n// // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n// //   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\n\n// //   // Withdrawal form state\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\n// //     bankName: '',\n// //     accountNumber: '',\n// //     ifscCode: '',\n// //     mobileNumber: '',\n// //     amount: ''\n// //   });\n\n// //   // Form validation state\n// //   const [formErrors, setFormErrors] = useState({\n// //     bankName: '',\n// //     accountNumber: '',\n// //     ifscCode: '',\n// //     mobileNumber: '',\n// //     amount: ''\n// //   });\n\n// //   // helper: parse JWT to extract userId if token contains it\n// //   const parseJwt = (token) => {\n// //     if (!token) return null;\n// //     try {\n// //       const payload = JSON.parse(atob(token.split('.')[1]));\n// //       return payload.userId || payload.sub || null;\n// //     } catch (e) {\n// //       return null;\n// //     }\n// //   };\n\n// //   // Resolve token and userId (prop -> localStorage.authData -> token)\n// //   const resolvedToken = propUserToken\n// //     || localStorage.getItem('token')\n// //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n// //     || '';\n\n// //   const resolvedUserId = propUserId\n// //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n// //     || parseJwt(resolvedToken)\n// //     || null;\n\n// //   const userAuthHeaders = () => {\n// //     const token = resolvedToken;\n// //     return {\n// //       'Content-Type': 'application/json',\n// //       Authorization: token ? `Bearer ${token}` : '',\n// //     };\n// //   };\n\n// //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// //   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\n// //   const fetchWalletData = useCallback(async () => {\n// //     if (!resolvedUserId) return;\n// //     try {\n// //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// //       const data = await res.json();\n// //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n// //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n// //     } catch (err) {\n// //       setError('Failed to fetch wallet data');\n// //     }\n// //   }, [resolvedUserId, resolvedToken]);\n\n// //   const fetchWithdrawalHistory = useCallback(async () => {\n// //     if (!resolvedUserId) return;\n// //     try {\n// //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// //       const data = await res.json();\n// //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n// //       setWithdrawalRequests(data.withdrawalRequests || []);\n// //     } catch (err) {\n// //       setError('Failed to fetch withdrawal history');\n// //     }\n// //   }, [resolvedUserId, resolvedToken]);\n\n// //   // Fetch data with error handling: skip requests if no userId/token\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       if (!resolvedUserId) {\n// //         setError('User not authenticated. Please login.');\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //         return;\n// //       }\n// //       if (!resolvedToken) {\n// //         setError('Missing auth token. Please login again.');\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //         return;\n// //       }\n\n// //       try {\n// //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n// //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// //       } catch (err) {\n// //         setError('Failed to load wallet data. Please try again.');\n// //       } finally {\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\n\n// //   const validateForm = () => {\n// //     const errors = {};\n// //     let isValid = true;\n\n// //     if (!withdrawalForm.bankName.trim()) {\n// //       errors.bankName = 'Bank name is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// //       errors.ifscCode = 'Valid IFSC code is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// //       errors.mobileNumber = 'Valid Indian mobile number is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n// //       isValid = false;\n// //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// //       errors.amount = 'Insufficient balance';\n// //       isValid = false;\n// //     }\n\n// //     setFormErrors(errors);\n// //     return isValid;\n// //   };\n\n// //   const handleWithdrawalSubmit = async () => {\n// //     if (!validateForm()) return;\n\n// //     setLoading(prev => ({ ...prev, submit: true }));\n// //     setError('');\n// //     setSuccess('');\n\n// //     try {\n// //       const body = {\n// //         userId: userId,\n// //         amount: parseFloat(withdrawalForm.amount),\n// //         bankName: withdrawalForm.bankName,\n// //         accountNumber: withdrawalForm.accountNumber,\n// //         ifscCode: withdrawalForm.ifscCode,\n// //         mobileNumber: withdrawalForm.mobileNumber,\n// //       };\n\n// //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n// //         method: 'POST',\n// //         headers: userAuthHeaders(),\n// //         body: JSON.stringify(body),\n// //       });\n// //       const data = await res.json();\n// //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n// //       // refresh UI\n// //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// //       setSuccess('Withdrawal request submitted successfully!');\n// //       setShowWithdrawForm(false);\n// //       setLoading(prev => ({ ...prev, submit: false }));\n// //     } catch (err) {\n// //       setError('Failed to submit withdrawal request. Please try again.');\n// //     } finally {\n// //       setLoading(prev => ({ ...prev, submit: false }));\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setWithdrawalForm(prev => ({\n// //       ...prev,\n// //       [name]: value\n// //     }));\n\n// //     // Clear error when user starts typing\n// //     if (formErrors[name]) {\n// //       setFormErrors(prev => ({\n// //         ...prev,\n// //         [name]: ''\n// //       }));\n// //     }\n// //   };\n\n// //   const getStatusIcon = (status) => {\n// //     switch (status) {\n// //       case 'Pending':\n// //         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// //       case 'Completed':\n// //         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// //       case 'Rejected':\n// //         return <X className=\"h-5 w-5 text-red-500\" />;\n// //       default:\n// //         return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// //     }\n// //   };\n\n// //   const getStatusColor = (status) => {\n// //     switch (status) {\n// //       case 'Pending':\n// //         return 'text-yellow-600 bg-yellow-50';\n// //       case 'Completed':\n// //         return 'text-green-600 bg-green-50';\n// //       case 'Rejected':\n// //         return 'text-red-600 bg-red-50';\n// //       default:\n// //         return 'text-gray-600 bg-gray-50';\n// //     }\n// //   };\n\n// //   const formatDate = (dateString) => {\n// //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n// //     return new Date(dateString).toLocaleDateString('en-IN', options);\n// //   };\n\n// //   return (\n// //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// //       <div className=\"mb-6\">\n// //         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\n// //         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\n// //       </div>\n\n// //       {/* Notifications */}\n// //       {error && (\n// //         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\n// //           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n// //           <p className=\"text-red-600\">{error}</p>\n// //         </div>\n// //       )}\n\n// //       {success && (\n// //         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\n// //           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n// //           <p className=\"text-green-600\">{success}</p>\n// //         </div>\n// //       )}\n\n// //       {/* Balance Card */}\n// //       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\n// //         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n// //           <div>\n// //             <p className=\"text-blue-100 text-sm\">Available Balance</p>\n// //             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\n// //             <p className=\"text-blue-100 text-sm mt-2\">\n// //               {wallet.balance >= 1000 ? (\n// //                 'Eligible for withdrawal'\n// //               ) : (\n// //                 <>\n// //                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\n// //                 </>\n// //               )}\n// //             </p>\n// //           </div>\n// //           <div className=\"flex gap-3 w-full md:w-auto\">\n// //             <button\n// //               onClick={() => setShowWithdrawForm(true)}\n// //               disabled={wallet.balance < 1000}\n// //               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\n// //                 wallet.balance >= 1000\n// //                   ? 'bg-white text-blue-600 hover:bg-blue-50'\n// //                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n// //               }`}\n// //             >\n// //               <ArrowUp className=\"h-5 w-5\" />\n// //               <span>Withdraw</span>\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Tabs */}\n// //       <div className=\"flex border-b border-gray-200 mb-6\">\n// //         <button\n// //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// //             activeTab === 'transactions'\n// //               ? 'border-blue-500 text-blue-600'\n// //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// //           }`}\n// //           onClick={() => setActiveTab('transactions')}\n// //         >\n// //           Transactions\n// //         </button>\n// //         <button\n// //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// //             activeTab === 'withdrawals'\n// //               ? 'border-blue-500 text-blue-600'\n// //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// //           }`}\n// //           onClick={() => setActiveTab('withdrawals')}\n// //         >\n// //           Withdrawals\n// //         </button>\n// //       </div>\n\n// //       {/* Content based on active tab */}\n// //       {activeTab === 'transactions' ? (\n// //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// //             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\n// //             <div className=\"text-sm text-gray-500\">\n// //               {wallet.transactions.length} records\n// //             </div>\n// //           </div>\n// //           <div className=\"max-h-[500px] overflow-y-auto\">\n// //             {loading.wallet ? (\n// //               <div className=\"p-8 text-center\">\n// //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// //                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\n// //               </div>\n// //             ) : wallet.transactions.length === 0 ? (\n// //               <div className=\"p-8 text-center text-gray-500\">\n// //                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// //                 <p>No transactions yet</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"divide-y divide-gray-200\">\n// //                 {wallet.transactions.map((txn) => (\n// //                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// //                     <div className=\"flex justify-between items-center\">\n// //                       <div className=\"flex items-center gap-4\">\n// //                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n// //                           {txn.amount > 0 ? (\n// //                             <Plus className=\"h-5 w-5 text-green-600\" />\n// //                           ) : (\n// //                             <Minus className=\"h-5 w-5 text-red-600\" />\n// //                           )}\n// //                         </div>\n// //                         <div>\n// //                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\n// //                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\n// //                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\n// //                         </div>\n// //                       </div>\n// //                       <div className=\"text-right\">\n// //                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n// //                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\n// //                         </p>\n// //                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\n// //                           {txn.status}\n// //                         </span>\n// //                       </div>\n// //                     </div>\n// //                   </div>\n// //                 ))}\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       ) : (\n// //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// //             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\n// //             <div className=\"text-sm text-gray-500\">\n// //               {withdrawalRequests.length} requests\n// //             </div>\n// //           </div>\n// //           <div className=\"max-h-[500px] overflow-y-auto\">\n// //             {loading.withdrawals ? (\n// //               <div className=\"p-8 text-center\">\n// //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// //                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\n// //               </div>\n// //             ) : withdrawalRequests.length === 0 ? (\n// //               <div className=\"p-8 text-center text-gray-500\">\n// //                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// //                 <p>No withdrawal requests yet</p>\n// //                 <button\n// //                   onClick={() => setShowWithdrawForm(true)}\n// //                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n// //                 >\n// //                   Make your first withdrawal\n// //                 </button>\n// //               </div>\n// //             ) : (\n// //               <div className=\"divide-y divide-gray-200\">\n// //                 {withdrawalRequests.map((request) => (\n// //                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// //                     <div className=\"flex justify-between items-start\">\n// //                       <div className=\"flex items-start gap-3\">\n// //                         {getStatusIcon(request.status)}\n// //                         <div>\n// //                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\n// //                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\n// //                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\n// //                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\n// //                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\n// //                         </div>\n// //                       </div>\n// //                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\n// //                         {request.status}\n// //                       </span>\n// //                     </div>\n// //                   </div>\n// //                 ))}\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* Withdrawal Form Modal */}\n// //       {showWithdrawForm && (\n// //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n// //           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n// //             <div className=\"p-6\">\n// //               <div className=\"flex justify-between items-center mb-4\">\n// //                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\n// //                 <button\n// //                   onClick={() => setShowWithdrawForm(false)}\n// //                   className=\"text-gray-400 hover:text-gray-600\"\n// //                   disabled={loading.submit}\n// //                 >\n// //                   <X className=\"h-6 w-6\" />\n// //                 </button>\n// //               </div>\n\n// //               <div className=\"space-y-4\">\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Bank Name <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"bankName\"\n// //                     value={withdrawalForm.bankName}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter bank name\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.bankName && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Account Number <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"accountNumber\"\n// //                     value={withdrawalForm.accountNumber}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter account number\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.accountNumber && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     IFSC Code <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"ifscCode\"\n// //                     value={withdrawalForm.ifscCode}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter IFSC code\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.ifscCode && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Mobile Number <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"tel\"\n// //                     name=\"mobileNumber\"\n// //                     value={withdrawalForm.mobileNumber}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter mobile number\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.mobileNumber && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"number\"\n// //                     name=\"amount\"\n// //                     value={withdrawalForm.amount}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     min=\"1000\"\n// //                     max={wallet.balance}\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Minimum â‚¹1000\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.amount && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\n// //                   )}\n// //                   <p className=\"text-xs text-gray-500 mt-1\">\n// //                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\n// //                   </p>\n// //                 </div>\n\n// //                 <div className=\"flex gap-3 pt-4\">\n// //                   <button\n// //                     type=\"button\"\n// //                     onClick={() => setShowWithdrawForm(false)}\n// //                     disabled={loading.submit}\n// //                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\n// //                   >\n// //                     Cancel\n// //                   </button>\n// //                   <button\n// //                     type=\"button\"\n// //                     onClick={handleWithdrawalSubmit}\n// //                     disabled={loading.submit}\n// //                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n// //                   >\n// //                     {loading.submit ? (\n// //                       <>\n// //                         <Loader className=\"h-4 w-4 animate-spin\" />\n// //                         Processing...\n// //                       </>\n// //                     ) : (\n// //                       'Submit Request'\n// //                     )}\n// //                   </button>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EnhancedWallet;\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions');\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch {\n//       return null;\n//     }\n//   };\n\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: resolvedUserId, // âœ… fixed here\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//     } catch {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n//       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed': return 'text-green-600 bg-green-50';\n//       case 'Rejected': return 'text-red-600 bg-red-50';\n//       default: return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       {/* UI code remains same â€” I kept all your JSX untouched */}\n//       {/* ... */}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions');\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch {\n//       return null;\n//     }\n//   };\n\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: resolvedUserId, // âœ… fixed here\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//     } catch {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n//       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed': return 'text-green-600 bg-green-50';\n//       case 'Rejected': return 'text-red-600 bg-red-50';\n//       default: return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       {/* Balance Card */}\n//       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\n//         <div>\n//           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\n//           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\n//         </div>\n//         <button\n//           onClick={() => setShowWithdrawForm(true)}\n//           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\n//         >\n//           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex space-x-4 border-b mb-4\">\n//         <button\n//           onClick={() => setActiveTab('transactions')}\n//           className={`pb-2 ${activeTab === 'transactions' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           onClick={() => setActiveTab('withdrawals')}\n//           className={`pb-2 ${activeTab === 'withdrawals' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {/* Error / Success Messages */}\n//       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\n//       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\n\n//       {/* Transactions Tab */}\n//       {activeTab === 'transactions' && (\n//         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n//           {wallet.transactions.length > 0 ? (\n//             <ul>\n//               {wallet.transactions.map((txn, index) => (\n//                 <li key={index} className=\"flex justify-between p-4 border-b\">\n//                   <div className=\"flex items-center\">\n//                     {txn.type === 'credit' ? (\n//                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\n//                     ) : (\n//                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\n//                     )}\n//                     <span>{txn.description || txn.type}</span>\n//                   </div>\n//                   <div className=\"text-right\">\n//                     <p className={txn.type === 'credit' ? 'text-green-600' : 'text-red-600'}>\n//                       â‚¹{txn.amount}\n//                     </p>\n//                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p className=\"p-4 text-gray-500\">No transactions found.</p>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Withdrawals Tab */}\n//       {activeTab === 'withdrawals' && (\n//         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n//           {withdrawalRequests.length > 0 ? (\n//             <ul>\n//               {withdrawalRequests.map((req, index) => (\n//                 <li key={index} className=\"flex justify-between p-4 border-b\">\n//                   <div className=\"flex items-center\">\n//                     {getStatusIcon(req.status)}\n//                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\n//                   </div>\n//                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\n//                     {req.status}\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Withdraw Form Modal */}\n//       {showWithdrawForm && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\n//             {Object.keys(withdrawalForm).map((field) => (\n//               <div key={field} className=\"mb-3\">\n//                 <input\n//                   type={field === 'amount' ? 'number' : 'text'}\n//                   name={field}\n//                   value={withdrawalForm[field]}\n//                   onChange={handleInputChange}\n//                   placeholder={field.replace(/([A-Z])/g, ' $1')}\n//                   className=\"w-full border rounded p-2\"\n//                 />\n//                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\n//               </div>\n//             ))}\n//             <div className=\"flex justify-end space-x-2\">\n//               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\n//               <button\n//                 onClick={handleWithdrawalSubmit}\n//                 disabled={loading.submit}\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n//               >\n//                 {loading.submit ? 'Submitting...' : 'Submit'}\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\nimport React, { useState, useEffect } from \"react\";\nimport { walletAPI } from \"../../services/api\";\nconst {\n  getUserWallet,\n  getUserWithdrawalRequests,\n  requestWithdrawal\n} = walletAPI;\nimport { ArrowUp, Clock, CheckCircle, X, Plus, Minus } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnhancedWallet = () => {\n  _s();\n  const [wallet, setWallet] = useState({\n    balance: 0,\n    transactions: []\n  });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({\n    wallet: false,\n    withdrawals: false,\n    submit: false\n  });\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"transactions\");\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: \"\",\n    accountNumber: \"\",\n    ifscCode: \"\",\n    mobileNumber: \"\",\n    amount: \"\"\n  });\n  const [formErrors, setFormErrors] = useState({});\n  const userId = localStorage.getItem(\"userId\");\n  const loadWallet = async () => {\n    if (!userId) return;\n    try {\n      setLoading(prev => ({\n        ...prev,\n        wallet: true\n      }));\n      const res = await getUserWallet(userId);\n      setWallet({\n        balance: res.data.balance || 0,\n        transactions: res.data.transactions || []\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to fetch wallet\");\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        wallet: false\n      }));\n    }\n  };\n  const loadRequests = async () => {\n    if (!userId) return;\n    try {\n      setLoading(prev => ({\n        ...prev,\n        withdrawals: true\n      }));\n      const res = await getUserWithdrawalRequests(userId);\n      setWithdrawalRequests(res.data || []);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Failed to fetch withdrawals\");\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        withdrawals: false\n      }));\n    }\n  };\n  useEffect(() => {\n    if (userId) {\n      loadWallet();\n      loadRequests();\n    }\n  }, [userId]);\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = \"Bank name is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n      isValid = false;\n    }\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = \"Valid IFSC code is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n      errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n      isValid = false;\n    } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n      errors.amount = \"Insufficient balance\";\n      isValid = false;\n    }\n    setFormErrors(errors);\n    return isValid;\n  };\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(prev => ({\n      ...prev,\n      submit: true\n    }));\n    setError(\"\");\n    setSuccess(\"\");\n    try {\n      await requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\n      setSuccess(\"Withdrawal request submitted successfully!\");\n      setShowWithdrawForm(false);\n      await Promise.all([loadWallet(), loadRequests()]);\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || \"Withdrawal failed\");\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        submit: false\n      }));\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWithdrawalForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: \"\"\n      }));\n    }\n  };\n  const getStatusIcon = status => {\n    switch (status) {\n      case \"Pending\":\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-5 w-5 text-yellow-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1292,\n          columnNumber: 30\n        }, this);\n      case \"Completed\":\n        return /*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"h-5 w-5 text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1293,\n          columnNumber: 32\n        }, this);\n      case \"Rejected\":\n        return /*#__PURE__*/_jsxDEV(X, {\n          className: \"h-5 w-5 text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1294,\n          columnNumber: 31\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-5 w-5 text-gray-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 23\n        }, this);\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case \"Pending\":\n        return \"text-yellow-600 bg-yellow-50\";\n      case \"Completed\":\n        return \"text-green-600 bg-green-50\";\n      case \"Rejected\":\n        return \"text-red-600 bg-red-50\";\n      default:\n        return \"text-gray-600 bg-gray-50\";\n    }\n  };\n  const formatDate = dateString => {\n    const options = {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\"\n    };\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 md:p-6 max-w-6xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-700\",\n          children: \"Wallet Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-gray-900\",\n          children: [\"\\u20B9\", wallet.balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowWithdrawForm(true),\n        className: \"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(ArrowUp, {\n          className: \"h-5 w-5 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1325,\n          columnNumber: 11\n        }, this), \" Withdraw\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex space-x-4 border-b mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"transactions\"),\n        className: `pb-2 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"withdrawals\"),\n        className: `pb-2 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Withdrawals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1330,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 bg-red-100 text-red-700 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1346,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 p-3 bg-green-100 text-green-700 rounded\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1347,\n      columnNumber: 19\n    }, this), activeTab === \"transactions\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow overflow-hidden\",\n      children: wallet.transactions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wallet.transactions.map((txn, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"flex justify-between p-4 border-b\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [txn.type === \"credit\" ? /*#__PURE__*/_jsxDEV(Plus, {\n              className: \"h-5 w-5 text-green-500 mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1358,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(Minus, {\n              className: \"h-5 w-5 text-red-500 mr-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1360,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: txn.description || txn.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1362,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1356,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-right\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: txn.type === \"credit\" ? \"text-green-600\" : \"text-red-600\",\n              children: [\"\\u20B9\", txn.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1365,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"text-gray-500\",\n              children: formatDate(txn.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1368,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1364,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1355,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"p-4 text-gray-500\",\n        children: \"No transactions found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1374,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1351,\n      columnNumber: 9\n    }, this), activeTab === \"withdrawals\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow overflow-hidden\",\n      children: withdrawalRequests.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: withdrawalRequests.map((req, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"flex justify-between p-4 border-b\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [getStatusIcon(req.status), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ml-2\",\n              children: [req.bankName, \" - \\u20B9\", req.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1388,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1386,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`,\n            children: req.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1390,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1385,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"p-4 text-gray-500\",\n        children: \"No withdrawal requests found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1397,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1381,\n      columnNumber: 9\n    }, this), showWithdrawForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 w-full max-w-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-4\",\n          children: \"Withdraw Funds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1406,\n          columnNumber: 13\n        }, this), Object.keys(withdrawalForm).map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === \"amount\" ? \"number\" : \"text\",\n            name: field,\n            value: withdrawalForm[field],\n            onChange: handleInputChange,\n            placeholder: field.replace(/([A-Z])/g, \" $1\"),\n            className: \"w-full border rounded p-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1409,\n            columnNumber: 17\n          }, this), formErrors[field] && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm\",\n            children: formErrors[field]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1417,\n            columnNumber: 39\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1408,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowWithdrawForm(false),\n            className: \"px-4 py-2 bg-gray-300 rounded\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1421,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleWithdrawalSubmit,\n            disabled: loading.submit,\n            className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n            children: loading.submit ? \"Submitting...\" : \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1420,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1405,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1404,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1314,\n    columnNumber: 5\n  }, this);\n};\n_s(EnhancedWallet, \"XgvS7MNDuHi6Wi+k/YUQn4bbBKQ=\");\n_c = EnhancedWallet;\nexport default EnhancedWallet;\nvar _c;\n$RefreshReg$(_c, \"EnhancedWallet\");","map":{"version":3,"names":["React","useState","useEffect","walletAPI","getUserWallet","getUserWithdrawalRequests","requestWithdrawal","ArrowUp","Clock","CheckCircle","X","Plus","Minus","jsxDEV","_jsxDEV","EnhancedWallet","_s","wallet","setWallet","balance","transactions","withdrawalRequests","setWithdrawalRequests","showWithdrawForm","setShowWithdrawForm","loading","setLoading","withdrawals","submit","error","setError","success","setSuccess","activeTab","setActiveTab","withdrawalForm","setWithdrawalForm","bankName","accountNumber","ifscCode","mobileNumber","amount","formErrors","setFormErrors","userId","localStorage","getItem","loadWallet","prev","res","data","err","_err$response","_err$response$data","response","message","loadRequests","_err$response2","_err$response2$data","validateForm","errors","isValid","trim","test","parseFloat","handleWithdrawalSubmit","Promise","all","_err$response3","_err$response3$data","handleInputChange","e","name","value","target","getStatusIcon","status","className","fileName","_jsxFileName","lineNumber","columnNumber","getStatusColor","formatDate","dateString","options","day","month","year","Date","toLocaleDateString","children","onClick","length","map","txn","index","type","description","date","req","Object","keys","field","onChange","placeholder","replace","disabled","_c","$RefreshReg$"],"sources":["C:/Users/moazz/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/components/dashboard/Wallet.jsx"],"sourcesContent":["// // import React, { useState, useEffect, useCallback } from 'react';\n// // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// //   const [error, setError] = useState('');\n// //   const [success, setSuccess] = useState('');\n// //   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\n\n// //   // Withdrawal form state\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\n// //     bankName: '',\n// //     accountNumber: '',\n// //     ifscCode: '',\n// //     mobileNumber: '',\n// //     amount: ''\n// //   });\n\n// //   // Form validation state\n// //   const [formErrors, setFormErrors] = useState({\n// //     bankName: '',\n// //     accountNumber: '',\n// //     ifscCode: '',\n// //     mobileNumber: '',\n// //     amount: ''\n// //   });\n\n// //   // helper: parse JWT to extract userId if token contains it\n// //   const parseJwt = (token) => {\n// //     if (!token) return null;\n// //     try {\n// //       const payload = JSON.parse(atob(token.split('.')[1]));\n// //       return payload.userId || payload.sub || null;\n// //     } catch (e) {\n// //       return null;\n// //     }\n// //   };\n\n// //   // Resolve token and userId (prop -> localStorage.authData -> token)\n// //   const resolvedToken = propUserToken\n// //     || localStorage.getItem('token')\n// //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n// //     || '';\n\n// //   const resolvedUserId = propUserId\n// //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n// //     || parseJwt(resolvedToken)\n// //     || null;\n\n// //   const userAuthHeaders = () => {\n// //     const token = resolvedToken;\n// //     return {\n// //       'Content-Type': 'application/json',\n// //       Authorization: token ? `Bearer ${token}` : '',\n// //     };\n// //   };\n\n// //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// //   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\n// //   const fetchWalletData = useCallback(async () => {\n// //     if (!resolvedUserId) return;\n// //     try {\n// //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// //       const data = await res.json();\n// //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n// //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n// //     } catch (err) {\n// //       setError('Failed to fetch wallet data');\n// //     }\n// //   }, [resolvedUserId, resolvedToken]);\n\n// //   const fetchWithdrawalHistory = useCallback(async () => {\n// //     if (!resolvedUserId) return;\n// //     try {\n// //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// //       const data = await res.json();\n// //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n// //       setWithdrawalRequests(data.withdrawalRequests || []);\n// //     } catch (err) {\n// //       setError('Failed to fetch withdrawal history');\n// //     }\n// //   }, [resolvedUserId, resolvedToken]);\n\n// //   // Fetch data with error handling: skip requests if no userId/token\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       if (!resolvedUserId) {\n// //         setError('User not authenticated. Please login.');\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //         return;\n// //       }\n// //       if (!resolvedToken) {\n// //         setError('Missing auth token. Please login again.');\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //         return;\n// //       }\n\n// //       try {\n// //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n// //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// //       } catch (err) {\n// //         setError('Failed to load wallet data. Please try again.');\n// //       } finally {\n// //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// //       }\n// //     };\n\n// //     fetchData();\n// //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\n\n// //   const validateForm = () => {\n// //     const errors = {};\n// //     let isValid = true;\n\n// //     if (!withdrawalForm.bankName.trim()) {\n// //       errors.bankName = 'Bank name is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// //       errors.ifscCode = 'Valid IFSC code is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// //       errors.mobileNumber = 'Valid Indian mobile number is required';\n// //       isValid = false;\n// //     }\n\n// //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n// //       isValid = false;\n// //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// //       errors.amount = 'Insufficient balance';\n// //       isValid = false;\n// //     }\n\n// //     setFormErrors(errors);\n// //     return isValid;\n// //   };\n\n// //   const handleWithdrawalSubmit = async () => {\n// //     if (!validateForm()) return;\n\n// //     setLoading(prev => ({ ...prev, submit: true }));\n// //     setError('');\n// //     setSuccess('');\n\n// //     try {\n// //       const body = {\n// //         userId: userId,\n// //         amount: parseFloat(withdrawalForm.amount),\n// //         bankName: withdrawalForm.bankName,\n// //         accountNumber: withdrawalForm.accountNumber,\n// //         ifscCode: withdrawalForm.ifscCode,\n// //         mobileNumber: withdrawalForm.mobileNumber,\n// //       };\n\n// //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n// //         method: 'POST',\n// //         headers: userAuthHeaders(),\n// //         body: JSON.stringify(body),\n// //       });\n// //       const data = await res.json();\n// //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n// //       // refresh UI\n// //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// //       setSuccess('Withdrawal request submitted successfully!');\n// //       setShowWithdrawForm(false);\n// //       setLoading(prev => ({ ...prev, submit: false }));\n// //     } catch (err) {\n// //       setError('Failed to submit withdrawal request. Please try again.');\n// //     } finally {\n// //       setLoading(prev => ({ ...prev, submit: false }));\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setWithdrawalForm(prev => ({\n// //       ...prev,\n// //       [name]: value\n// //     }));\n    \n// //     // Clear error when user starts typing\n// //     if (formErrors[name]) {\n// //       setFormErrors(prev => ({\n// //         ...prev,\n// //         [name]: ''\n// //       }));\n// //     }\n// //   };\n\n// //   const getStatusIcon = (status) => {\n// //     switch (status) {\n// //       case 'Pending':\n// //         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// //       case 'Completed':\n// //         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// //       case 'Rejected':\n// //         return <X className=\"h-5 w-5 text-red-500\" />;\n// //       default:\n// //         return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// //     }\n// //   };\n\n// //   const getStatusColor = (status) => {\n// //     switch (status) {\n// //       case 'Pending':\n// //         return 'text-yellow-600 bg-yellow-50';\n// //       case 'Completed':\n// //         return 'text-green-600 bg-green-50';\n// //       case 'Rejected':\n// //         return 'text-red-600 bg-red-50';\n// //       default:\n// //         return 'text-gray-600 bg-gray-50';\n// //     }\n// //   };\n\n// //   const formatDate = (dateString) => {\n// //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n// //     return new Date(dateString).toLocaleDateString('en-IN', options);\n// //   };\n\n// //   return (\n// //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// //       <div className=\"mb-6\">\n// //         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\n// //         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\n// //       </div>\n\n// //       {/* Notifications */}\n// //       {error && (\n// //         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\n// //           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n// //           <p className=\"text-red-600\">{error}</p>\n// //         </div>\n// //       )}\n\n// //       {success && (\n// //         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\n// //           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n// //           <p className=\"text-green-600\">{success}</p>\n// //         </div>\n// //       )}\n\n// //       {/* Balance Card */}\n// //       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\n// //         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n// //           <div>\n// //             <p className=\"text-blue-100 text-sm\">Available Balance</p>\n// //             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\n// //             <p className=\"text-blue-100 text-sm mt-2\">\n// //               {wallet.balance >= 1000 ? (\n// //                 'Eligible for withdrawal'\n// //               ) : (\n// //                 <>\n// //                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\n// //                 </>\n// //               )}\n// //             </p>\n// //           </div>\n// //           <div className=\"flex gap-3 w-full md:w-auto\">\n// //             <button\n// //               onClick={() => setShowWithdrawForm(true)}\n// //               disabled={wallet.balance < 1000}\n// //               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\n// //                 wallet.balance >= 1000\n// //                   ? 'bg-white text-blue-600 hover:bg-blue-50'\n// //                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n// //               }`}\n// //             >\n// //               <ArrowUp className=\"h-5 w-5\" />\n// //               <span>Withdraw</span>\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </div>\n\n// //       {/* Tabs */}\n// //       <div className=\"flex border-b border-gray-200 mb-6\">\n// //         <button\n// //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// //             activeTab === 'transactions'\n// //               ? 'border-blue-500 text-blue-600'\n// //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// //           }`}\n// //           onClick={() => setActiveTab('transactions')}\n// //         >\n// //           Transactions\n// //         </button>\n// //         <button\n// //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// //             activeTab === 'withdrawals'\n// //               ? 'border-blue-500 text-blue-600'\n// //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// //           }`}\n// //           onClick={() => setActiveTab('withdrawals')}\n// //         >\n// //           Withdrawals\n// //         </button>\n// //       </div>\n\n// //       {/* Content based on active tab */}\n// //       {activeTab === 'transactions' ? (\n// //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// //             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\n// //             <div className=\"text-sm text-gray-500\">\n// //               {wallet.transactions.length} records\n// //             </div>\n// //           </div>\n// //           <div className=\"max-h-[500px] overflow-y-auto\">\n// //             {loading.wallet ? (\n// //               <div className=\"p-8 text-center\">\n// //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// //                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\n// //               </div>\n// //             ) : wallet.transactions.length === 0 ? (\n// //               <div className=\"p-8 text-center text-gray-500\">\n// //                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// //                 <p>No transactions yet</p>\n// //               </div>\n// //             ) : (\n// //               <div className=\"divide-y divide-gray-200\">\n// //                 {wallet.transactions.map((txn) => (\n// //                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// //                     <div className=\"flex justify-between items-center\">\n// //                       <div className=\"flex items-center gap-4\">\n// //                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n// //                           {txn.amount > 0 ? (\n// //                             <Plus className=\"h-5 w-5 text-green-600\" />\n// //                           ) : (\n// //                             <Minus className=\"h-5 w-5 text-red-600\" />\n// //                           )}\n// //                         </div>\n// //                         <div>\n// //                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\n// //                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\n// //                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\n// //                         </div>\n// //                       </div>\n// //                       <div className=\"text-right\">\n// //                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n// //                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\n// //                         </p>\n// //                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\n// //                           {txn.status}\n// //                         </span>\n// //                       </div>\n// //                     </div>\n// //                   </div>\n// //                 ))}\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       ) : (\n// //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// //             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\n// //             <div className=\"text-sm text-gray-500\">\n// //               {withdrawalRequests.length} requests\n// //             </div>\n// //           </div>\n// //           <div className=\"max-h-[500px] overflow-y-auto\">\n// //             {loading.withdrawals ? (\n// //               <div className=\"p-8 text-center\">\n// //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// //                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\n// //               </div>\n// //             ) : withdrawalRequests.length === 0 ? (\n// //               <div className=\"p-8 text-center text-gray-500\">\n// //                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// //                 <p>No withdrawal requests yet</p>\n// //                 <button\n// //                   onClick={() => setShowWithdrawForm(true)}\n// //                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n// //                 >\n// //                   Make your first withdrawal\n// //                 </button>\n// //               </div>\n// //             ) : (\n// //               <div className=\"divide-y divide-gray-200\">\n// //                 {withdrawalRequests.map((request) => (\n// //                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// //                     <div className=\"flex justify-between items-start\">\n// //                       <div className=\"flex items-start gap-3\">\n// //                         {getStatusIcon(request.status)}\n// //                         <div>\n// //                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\n// //                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\n// //                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\n// //                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\n// //                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\n// //                         </div>\n// //                       </div>\n// //                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\n// //                         {request.status}\n// //                       </span>\n// //                     </div>\n// //                   </div>\n// //                 ))}\n// //               </div>\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n\n// //       {/* Withdrawal Form Modal */}\n// //       {showWithdrawForm && (\n// //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n// //           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n// //             <div className=\"p-6\">\n// //               <div className=\"flex justify-between items-center mb-4\">\n// //                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\n// //                 <button\n// //                   onClick={() => setShowWithdrawForm(false)}\n// //                   className=\"text-gray-400 hover:text-gray-600\"\n// //                   disabled={loading.submit}\n// //                 >\n// //                   <X className=\"h-6 w-6\" />\n// //                 </button>\n// //               </div>\n\n// //               <div className=\"space-y-4\">\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Bank Name <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"bankName\"\n// //                     value={withdrawalForm.bankName}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter bank name\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.bankName && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Account Number <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"accountNumber\"\n// //                     value={withdrawalForm.accountNumber}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter account number\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.accountNumber && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     IFSC Code <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"text\"\n// //                     name=\"ifscCode\"\n// //                     value={withdrawalForm.ifscCode}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter IFSC code\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.ifscCode && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Mobile Number <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"tel\"\n// //                     name=\"mobileNumber\"\n// //                     value={withdrawalForm.mobileNumber}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Enter mobile number\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.mobileNumber && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\n// //                   )}\n// //                 </div>\n\n// //                 <div>\n// //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// //                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\n// //                   </label>\n// //                   <input\n// //                     type=\"number\"\n// //                     name=\"amount\"\n// //                     value={withdrawalForm.amount}\n// //                     onChange={handleInputChange}\n// //                     required\n// //                     min=\"1000\"\n// //                     max={wallet.balance}\n// //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// //                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\n// //                     }`}\n// //                     placeholder=\"Minimum â‚¹1000\"\n// //                     disabled={loading.submit}\n// //                   />\n// //                   {formErrors.amount && (\n// //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\n// //                   )}\n// //                   <p className=\"text-xs text-gray-500 mt-1\">\n// //                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\n// //                   </p>\n// //                 </div>\n\n// //                 <div className=\"flex gap-3 pt-4\">\n// //                   <button\n// //                     type=\"button\"\n// //                     onClick={() => setShowWithdrawForm(false)}\n// //                     disabled={loading.submit}\n// //                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\n// //                   >\n// //                     Cancel\n// //                   </button>\n// //                   <button\n// //                     type=\"button\"\n// //                     onClick={handleWithdrawalSubmit}\n// //                     disabled={loading.submit}\n// //                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n// //                   >\n// //                     {loading.submit ? (\n// //                       <>\n// //                         <Loader className=\"h-4 w-4 animate-spin\" />\n// //                         Processing...\n// //                       </>\n// //                     ) : (\n// //                       'Submit Request'\n// //                     )}\n// //                   </button>\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EnhancedWallet;\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions');\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch {\n//       return null;\n//     }\n//   };\n\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: resolvedUserId, // âœ… fixed here\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//     } catch {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n//       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed': return 'text-green-600 bg-green-50';\n//       case 'Rejected': return 'text-red-600 bg-red-50';\n//       default: return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       {/* UI code remains same â€” I kept all your JSX untouched */}\n//       {/* ... */}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions');\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch {\n//       return null;\n//     }\n//   };\n\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: resolvedUserId, // âœ… fixed here\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//     } catch {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n//       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed': return 'text-green-600 bg-green-50';\n//       case 'Rejected': return 'text-red-600 bg-red-50';\n//       default: return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       {/* Balance Card */}\n//       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\n//         <div>\n//           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\n//           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\n//         </div>\n//         <button\n//           onClick={() => setShowWithdrawForm(true)}\n//           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\n//         >\n//           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\n//         </button>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex space-x-4 border-b mb-4\">\n//         <button\n//           onClick={() => setActiveTab('transactions')}\n//           className={`pb-2 ${activeTab === 'transactions' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           onClick={() => setActiveTab('withdrawals')}\n//           className={`pb-2 ${activeTab === 'withdrawals' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {/* Error / Success Messages */}\n//       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\n//       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\n\n//       {/* Transactions Tab */}\n//       {activeTab === 'transactions' && (\n//         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n//           {wallet.transactions.length > 0 ? (\n//             <ul>\n//               {wallet.transactions.map((txn, index) => (\n//                 <li key={index} className=\"flex justify-between p-4 border-b\">\n//                   <div className=\"flex items-center\">\n//                     {txn.type === 'credit' ? (\n//                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\n//                     ) : (\n//                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\n//                     )}\n//                     <span>{txn.description || txn.type}</span>\n//                   </div>\n//                   <div className=\"text-right\">\n//                     <p className={txn.type === 'credit' ? 'text-green-600' : 'text-red-600'}>\n//                       â‚¹{txn.amount}\n//                     </p>\n//                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p className=\"p-4 text-gray-500\">No transactions found.</p>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Withdrawals Tab */}\n//       {activeTab === 'withdrawals' && (\n//         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n//           {withdrawalRequests.length > 0 ? (\n//             <ul>\n//               {withdrawalRequests.map((req, index) => (\n//                 <li key={index} className=\"flex justify-between p-4 border-b\">\n//                   <div className=\"flex items-center\">\n//                     {getStatusIcon(req.status)}\n//                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\n//                   </div>\n//                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\n//                     {req.status}\n//                   </div>\n//                 </li>\n//               ))}\n//             </ul>\n//           ) : (\n//             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\n//           )}\n//         </div>\n//       )}\n\n//       {/* Withdraw Form Modal */}\n//       {showWithdrawForm && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n//           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n//             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\n//             {Object.keys(withdrawalForm).map((field) => (\n//               <div key={field} className=\"mb-3\">\n//                 <input\n//                   type={field === 'amount' ? 'number' : 'text'}\n//                   name={field}\n//                   value={withdrawalForm[field]}\n//                   onChange={handleInputChange}\n//                   placeholder={field.replace(/([A-Z])/g, ' $1')}\n//                   className=\"w-full border rounded p-2\"\n//                 />\n//                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\n//               </div>\n//             ))}\n//             <div className=\"flex justify-end space-x-2\">\n//               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\n//               <button\n//                 onClick={handleWithdrawalSubmit}\n//                 disabled={loading.submit}\n//                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n//               >\n//                 {loading.submit ? 'Submitting...' : 'Submit'}\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\n\n\nimport { walletAPI } from \"../../services/api\";\n\nconst { getUserWallet, getUserWithdrawalRequests, requestWithdrawal } = walletAPI;\n\nimport {\n  ArrowUp,\n  Clock,\n  CheckCircle,\n  X,\n  Plus,\n  Minus,\n} from \"lucide-react\";\n\nconst EnhancedWallet = () => {\n  const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"transactions\");\n\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: \"\",\n    accountNumber: \"\",\n    ifscCode: \"\",\n    mobileNumber: \"\",\n    amount: \"\",\n  });\n\n  const [formErrors, setFormErrors] = useState({});\n\n  const userId = localStorage.getItem(\"userId\");\n\n  const loadWallet = async () => {\n    if (!userId) return;\n    try {\n      setLoading((prev) => ({ ...prev, wallet: true }));\n      const res = await getUserWallet(userId);\n      setWallet({\n        balance: res.data.balance || 0,\n        transactions: res.data.transactions || [],\n      });\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to fetch wallet\");\n    } finally {\n      setLoading((prev) => ({ ...prev, wallet: false }));\n    }\n  };\n\n  const loadRequests = async () => {\n    if (!userId) return;\n    try {\n      setLoading((prev) => ({ ...prev, withdrawals: true }));\n      const res = await getUserWithdrawalRequests(userId);\n      setWithdrawalRequests(res.data || []);\n    } catch (err) {\n      setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\n    } finally {\n      setLoading((prev) => ({ ...prev, withdrawals: false }));\n    }\n  };\n\n  useEffect(() => {\n    if (userId) {\n      loadWallet();\n      loadRequests();\n    }\n  }, [userId]);\n\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = \"Bank name is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n      isValid = false;\n    }\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = \"Valid IFSC code is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n      errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n      isValid = false;\n    } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n      errors.amount = \"Insufficient balance\";\n      isValid = false;\n    }\n\n    setFormErrors(errors);\n    return isValid;\n  };\n\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n\n    setLoading((prev) => ({ ...prev, submit: true }));\n    setError(\"\");\n    setSuccess(\"\");\n\n    try {\n      await requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\n      setSuccess(\"Withdrawal request submitted successfully!\");\n      setShowWithdrawForm(false);\n      await Promise.all([loadWallet(), loadRequests()]);\n    } catch (err) {\n      setError(err.response?.data?.message || \"Withdrawal failed\");\n    } finally {\n      setLoading((prev) => ({ ...prev, submit: false }));\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n    if (formErrors[name]) {\n      setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case \"Pending\": return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case \"Completed\": return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case \"Rejected\": return <X className=\"h-5 w-5 text-red-500\" />;\n      default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"Pending\": return \"text-yellow-600 bg-yellow-50\";\n      case \"Completed\": return \"text-green-600 bg-green-50\";\n      case \"Rejected\": return \"text-red-600 bg-red-50\";\n      default: return \"text-gray-600 bg-gray-50\";\n    }\n  };\n\n  const formatDate = (dateString) => {\n    const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n      {/* Balance Card */}\n      <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\n          <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\n        </div>\n        <button\n          onClick={() => setShowWithdrawForm(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\n        >\n          <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\n        </button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex space-x-4 border-b mb-4\">\n        <button\n          onClick={() => setActiveTab(\"transactions\")}\n          className={`pb-2 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\n        >\n          Transactions\n        </button>\n        <button\n          onClick={() => setActiveTab(\"withdrawals\")}\n          className={`pb-2 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\n        >\n          Withdrawals\n        </button>\n      </div>\n\n      {/* Error / Success Messages */}\n      {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\n      {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\n\n      {/* Transactions Tab */}\n      {activeTab === \"transactions\" && (\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          {wallet.transactions.length > 0 ? (\n            <ul>\n              {wallet.transactions.map((txn, index) => (\n                <li key={index} className=\"flex justify-between p-4 border-b\">\n                  <div className=\"flex items-center\">\n                    {txn.type === \"credit\" ? (\n                      <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\n                    ) : (\n                      <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\n                    )}\n                    <span>{txn.description || txn.type}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={txn.type === \"credit\" ? \"text-green-600\" : \"text-red-600\"}>\n                      â‚¹{txn.amount}\n                    </p>\n                    <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"p-4 text-gray-500\">No transactions found.</p>\n          )}\n        </div>\n      )}\n\n      {/* Withdrawals Tab */}\n      {activeTab === \"withdrawals\" && (\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          {withdrawalRequests.length > 0 ? (\n            <ul>\n              {withdrawalRequests.map((req, index) => (\n                <li key={index} className=\"flex justify-between p-4 border-b\">\n                  <div className=\"flex items-center\">\n                    {getStatusIcon(req.status)}\n                    <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\n                  </div>\n                  <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\n                    {req.status}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\n          )}\n        </div>\n      )}\n\n      {/* Withdraw Form Modal */}\n      {showWithdrawForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\n            {Object.keys(withdrawalForm).map((field) => (\n              <div key={field} className=\"mb-3\">\n                <input\n                  type={field === \"amount\" ? \"number\" : \"text\"}\n                  name={field}\n                  value={withdrawalForm[field]}\n                  onChange={handleInputChange}\n                  placeholder={field.replace(/([A-Z])/g, \" $1\")}\n                  className=\"w-full border rounded p-2\"\n                />\n                {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\n              </div>\n            ))}\n            <div className=\"flex justify-end space-x-2\">\n              <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\n              <button\n                onClick={handleWithdrawalSubmit}\n                disabled={loading.submit}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n              >\n                {loading.submit ? \"Submitting...\" : \"Submit\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnhancedWallet;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}