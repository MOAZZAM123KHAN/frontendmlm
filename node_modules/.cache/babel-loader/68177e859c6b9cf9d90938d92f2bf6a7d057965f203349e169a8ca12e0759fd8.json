{"ast":null,"code":"// import axios from 'axios';\n// import { API_URL } from '../config';\n\n// const API_BASE_URL = API_URL;\n\n// // Create axios instance with default config\n// const api = axios.create({\n//   baseURL: API_BASE_URL,\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n// });\n\n// // Request interceptor\n// api.interceptors.request.use(\n//   (config) => {\n//     // Add auth token if available\n//     const token = localStorage.getItem('authToken');\n//     if (token) {\n//       config.headers['Authorization'] = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Response interceptor\n// api.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   (error) => {\n//     // Handle common errors\n//     if (error.response?.status === 404) {\n//       console.error('Resource not found');\n//     } else if (error.response?.status === 500) {\n//       console.error('Server error');\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Auth API functions\n// export const authAPI = {\n//   // Login with mobile number, password, and id\n//   login: async (data) => {\n//     try {\n//       const response = await api.post('/auth/login', data);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Login failed' };\n//     }\n//   },\n\n//   // Signup with name, mobile number, password, confirmPassword, and optional email\n//   signup: async (data) => {\n//     try {\n//       const response = await api.post('/auth/signup', data);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Signup failed' };\n//     }\n//   },\n\n//   // Get user data by mobile number\n\n//   getDashboard: async (parentMobile) => {\n//     try {\n//       const response = await api.get(`/auth/dashboard/${parentMobile}`);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get user data' };\n//     }\n//   },\n// };\n\n// // Health check\n// export const systemAPI = {\n//   healthCheck: async () => {\n//     try {\n//       const response = await api.get('/health');\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Health check failed' };\n//     }\n//   }\n// };\n\n// // Product APIs\n// export const productAPI = {\n//   createProduct: async (data) => {\n//     try {\n//       const response = await api.post('/product', data);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to create product' };\n//     }\n//   },\n\n//   assignProduct: async (id, assignedTo) => {\n//     try {\n//       const response = await api.patch(`/product/${id}/assign`, { assignedTo });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to assign product' };\n//     }\n//   },\n\n//   getProducts: async (userId) => {\n//     try {\n//       const response = await api.get('/product', { params: userId ? { userId } : {} });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get products' };\n//     }\n//   }\n// };\n\n// // Order APIs\n// export const orderAPI = {\n//   createOrder: async (data) => {\n//     try {\n//       const response = await api.post('/order', data);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to create order' };\n//     }\n//   },\n\n//   updateOrderStatus: async (id, statusData) => {\n//     try {\n//       const response = await api.patch(`/order/${id}/status`, statusData);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to update order status' };\n//     }\n//   },\n\n//   updatePaymentStatus: async (id, paymentStatus) => {\n//     try {\n//       const response = await api.patch(`/order/${id}/payment-status`, { paymentStatus });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to update payment status' };\n//     }\n//   },\n\n//   getOrders: async (userId) => {\n//     try {\n//       const response = await api.get('/order', { params: userId ? { userId } : {} });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get orders' };\n//     }\n//   },\n\n//   getOrderById: async (orderId) => {\n//     try {\n//       const response = await api.get(`/order/${orderId}`);\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get order details' };\n//     }\n//   }\n// };\n\n// // Wallet APIs\n// export const walletAPI = {\n//   addBonus: async (userId, amount, reason) => {\n//     try {\n//       const response = await api.post('/wallet/bonus', { userId, amount, reason });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to add bonus' };\n//     }\n//   },\n\n//   deductWallet: async (userId, amount, reason) => {\n//     try {\n//       const response = await api.post('/wallet/deduct', { userId, amount, reason });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to deduct from wallet' };\n//     }\n//   },\n\n//   markWithdrawal: async (userId, amount, status) => {\n//     try {\n//       const response = await api.post('/wallet/withdraw', { userId, amount, status });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to mark withdrawal' };\n//     }\n//   },\n\n//   getWallet: async (userId) => {\n//     try {\n//       const response = await api.get('/wallet', { params: { userId } });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get wallet' };\n//     }\n//   }\n// };\n\n// // Downline APIs\n// export const downlineAPI = {\n//   assignDownline: async (userId, parentId, level) => {\n//     try {\n//       const response = await api.post('/downline/assign', { userId, parentId, level });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to assign downline' };\n//     }\n//   },\n\n//   getDownline: async (userId) => {\n//     try {\n//       const response = await api.get('/downline', { params: { userId } });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { success: false, message: 'Failed to get downline' };\n//     }\n//   }\n// };\n\n// export default api;\n\nimport axios from 'axios';\nimport { API_URL } from '../config';\nconst API_BASE_URL = API_URL;\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add auth token if available\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  // Handle common errors\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.error('Unauthorized - redirect to login');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    console.error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n    console.error('Server error');\n  }\n  return Promise.reject(error);\n});\n\n// Auth API functions\nexport const authAPI = {\n  // Login with mobile number, password, and id\n  login: async data => {\n    try {\n      const response = await api.post('/auth/login', data);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        success: false,\n        message: 'Login failed'\n      };\n    }\n  },\n  // Signup with name, mobile number, password, confirmPassword, and optional email\n  signup: async data => {\n    try {\n      const response = await api.post('/auth/signup', data);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        success: false,\n        message: 'Signup failed'\n      };\n    }\n  },\n  // Generate user ID after OTP verification\n  generateUserId: async mobileNumber => {\n    try {\n      const response = await api.post('/auth/generate-user-id', {\n        mobileNumber\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        success: false,\n        message: 'Failed to generate user ID'\n      };\n    }\n  },\n  // Complete signup after OTP verification\n  completeSignup: async userData => {\n    try {\n      const response = await api.post('/auth/complete-signup', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n        success: false,\n        message: 'Failed to complete signup'\n      };\n    }\n  },\n  // Get all user IDs for a mobile number\n  getDashboard: async parentMobile => {\n    try {\n      const response = await api.get(`/auth/dashboard/${parentMobile}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n        success: false,\n        message: 'Failed to get user data'\n      };\n    }\n  },\n  // Verify OTP (if using backend OTP verification)\n  verifyOtp: async (mobileNumber, otp) => {\n    try {\n      const response = await api.post('/auth/verify-otp', {\n        mobileNumber,\n        otp\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || {\n        success: false,\n        message: 'OTP verification failed'\n      };\n    }\n  },\n  // Resend OTP\n  resendOtp: async mobileNumber => {\n    try {\n      const response = await api.post('/auth/resend-otp', {\n        mobileNumber\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response0;\n      throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || {\n        success: false,\n        message: 'Failed to resend OTP'\n      };\n    }\n  }\n};\n\n// Health check\nexport const systemAPI = {\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      var _error$response1;\n      throw ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || {\n        success: false,\n        message: 'Health check failed'\n      };\n    }\n  }\n};\n\n// Product APIs\nexport const productAPI = {\n  createProduct: async data => {\n    try {\n      const response = await api.post('/product', data);\n      return response.data;\n    } catch (error) {\n      var _error$response10;\n      throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || {\n        success: false,\n        message: 'Failed to create product'\n      };\n    }\n  },\n  assignProduct: async (id, assignedTo) => {\n    try {\n      const response = await api.patch(`/product/${id}/assign`, {\n        assignedTo\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response11;\n      throw ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || {\n        success: false,\n        message: 'Failed to assign product'\n      };\n    }\n  },\n  getProducts: async userId => {\n    try {\n      const response = await api.get('/product', {\n        params: userId ? {\n          userId\n        } : {}\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response12;\n      throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || {\n        success: false,\n        message: 'Failed to get products'\n      };\n    }\n  }\n};\n\n// Order APIs\nexport const orderAPI = {\n  createOrder: async data => {\n    try {\n      const response = await api.post('/order', data);\n      return response.data;\n    } catch (error) {\n      var _error$response13;\n      throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || {\n        success: false,\n        message: 'Failed to create order'\n      };\n    }\n  },\n  updateOrderStatus: async (id, statusData) => {\n    try {\n      const response = await api.patch(`/order/${id}/status`, statusData);\n      return response.data;\n    } catch (error) {\n      var _error$response14;\n      throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || {\n        success: false,\n        message: 'Failed to update order status'\n      };\n    }\n  },\n  updatePaymentStatus: async (id, paymentStatus) => {\n    try {\n      const response = await api.patch(`/order/${id}/payment-status`, {\n        paymentStatus\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response15;\n      throw ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : _error$response15.data) || {\n        success: false,\n        message: 'Failed to update payment status'\n      };\n    }\n  },\n  getOrders: async userId => {\n    try {\n      const response = await api.get('/order', {\n        params: userId ? {\n          userId\n        } : {}\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response16;\n      throw ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : _error$response16.data) || {\n        success: false,\n        message: 'Failed to get orders'\n      };\n    }\n  },\n  getOrderById: async orderId => {\n    try {\n      const response = await api.get(`/order/${orderId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response17;\n      throw ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : _error$response17.data) || {\n        success: false,\n        message: 'Failed to get order details'\n      };\n    }\n  }\n};\n\n// Wallet APIs\n// export const walletAPI = {\n//   addBonus: async (userId, amount, reason) => {\n//     try {\n//       const response = await api.post('/wallet/bonus', { \n//         userId, \n//         amount, \n//         reason \n//       });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { \n//         success: false, \n//         message: 'Failed to add bonus' \n//       };\n//     }\n//   },\n\n//   deductWallet: async (userId, amount, reason) => {\n//     try {\n//       const response = await api.post('/wallet/deduct', { \n//         userId, \n//         amount, \n//         reason \n//       });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { \n//         success: false, \n//         message: 'Failed to deduct from wallet' \n//       };\n//     }\n//   },\n\n//   markWithdrawal: async (userId, amount, status) => {\n//     try {\n//       const response = await api.post('/wallet/withdraw', { \n//         userId, \n//         amount, \n//         status \n//       });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { \n//         success: false, \n//         message: 'Failed to mark withdrawal' \n//       };\n//     }\n//   },\n\n//   getWallet: async (userId) => {\n//     try {\n//       const response = await api.get('/wallet', { \n//         params: { userId } \n//       });\n//       return response.data;\n//     } catch (error) {\n//       throw error.response?.data || { \n//         success: false, \n//         message: 'Failed to get wallet' \n//       };\n//     }\n//   }\n// };\n\nexport const walletAPI = {\n  // Get user wallet (matches GET /api/wallet/user/:userId)\n  getWallet: async userId => {\n    try {\n      const response = await api.get(`/wallet/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response18;\n      throw ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : _error$response18.data) || {\n        success: false,\n        message: 'Failed to fetch wallet'\n      };\n    }\n  },\n  // Submit withdrawal request (matches POST /api/wallet/withdraw)\n  requestWithdrawal: async data => {\n    try {\n      const response = await api.post('/wallet/withdraw', data);\n      return response.data;\n    } catch (error) {\n      var _error$response19;\n      throw ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : _error$response19.data) || {\n        success: false,\n        message: 'Withdrawal request failed'\n      };\n    }\n  },\n  // Get withdrawal history (matches GET /api/wallet/withdrawals/:userId)\n  getWithdrawals: async userId => {\n    try {\n      const response = await api.get(`/wallet/withdrawals/${userId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response20;\n      throw ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : _error$response20.data) || {\n        success: false,\n        message: 'Failed to fetch withdrawals'\n      };\n    }\n  },\n  // Get single transaction (matches GET /api/wallet/transaction/:transactionId)\n  getTransaction: async transactionId => {\n    try {\n      const response = await api.get(`/wallet/transaction/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      var _error$response21;\n      throw ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : _error$response21.data) || {\n        success: false,\n        message: 'Failed to fetch transaction'\n      };\n    }\n  }\n};\n\n// Downline APIs\nexport const downlineAPI = {\n  assignDownline: async (userId, parentId, level) => {\n    try {\n      const response = await api.post('/downline/assign', {\n        userId,\n        parentId,\n        level\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response22;\n      throw ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : _error$response22.data) || {\n        success: false,\n        message: 'Failed to assign downline'\n      };\n    }\n  },\n  getDownline: async userId => {\n    try {\n      const response = await api.get('/downline', {\n        params: {\n          userId\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response23;\n      throw ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : _error$response23.data) || {\n        success: false,\n        message: 'Failed to get downline'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","_error$response2","_error$response3","status","console","authAPI","login","data","post","_error$response4","success","message","signup","_error$response5","generateUserId","mobileNumber","_error$response6","completeSignup","userData","_error$response7","getDashboard","parentMobile","get","_error$response8","verifyOtp","otp","_error$response9","resendOtp","_error$response0","systemAPI","healthCheck","_error$response1","productAPI","createProduct","_error$response10","assignProduct","id","assignedTo","patch","_error$response11","getProducts","userId","params","_error$response12","orderAPI","createOrder","_error$response13","updateOrderStatus","statusData","_error$response14","updatePaymentStatus","paymentStatus","_error$response15","getOrders","_error$response16","getOrderById","orderId","_error$response17","walletAPI","getWallet","_error$response18","requestWithdrawal","_error$response19","getWithdrawals","_error$response20","getTransaction","transactionId","_error$response21","downlineAPI","assignDownline","parentId","level","_error$response22","getDownline","_error$response23"],"sources":["C:/Users/HP/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/services/api.js"],"sourcesContent":["// import axios from 'axios';\r\n// import { API_URL } from '../config';\r\n\r\n// const API_BASE_URL = API_URL;\r\n\r\n// // Create axios instance with default config\r\n// const api = axios.create({\r\n//   baseURL: API_BASE_URL,\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//   },\r\n// });\r\n\r\n// // Request interceptor\r\n// api.interceptors.request.use(\r\n//   (config) => {\r\n//     // Add auth token if available\r\n//     const token = localStorage.getItem('authToken');\r\n//     if (token) {\r\n//       config.headers['Authorization'] = `Bearer ${token}`;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Response interceptor\r\n// api.interceptors.response.use(\r\n//   (response) => {\r\n//     return response;\r\n//   },\r\n//   (error) => {\r\n//     // Handle common errors\r\n//     if (error.response?.status === 404) {\r\n//       console.error('Resource not found');\r\n//     } else if (error.response?.status === 500) {\r\n//       console.error('Server error');\r\n//     }\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n// // Auth API functions\r\n// export const authAPI = {\r\n//   // Login with mobile number, password, and id\r\n//   login: async (data) => {\r\n//     try {\r\n//       const response = await api.post('/auth/login', data);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Login failed' };\r\n//     }\r\n//   },\r\n\r\n//   // Signup with name, mobile number, password, confirmPassword, and optional email\r\n//   signup: async (data) => {\r\n//     try {\r\n//       const response = await api.post('/auth/signup', data);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Signup failed' };\r\n//     }\r\n//   },\r\n\r\n//   // Get user data by mobile number\r\n  \r\n//   getDashboard: async (parentMobile) => {\r\n//     try {\r\n//       const response = await api.get(`/auth/dashboard/${parentMobile}`);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get user data' };\r\n//     }\r\n//   },\r\n// };\r\n\r\n// // Health check\r\n// export const systemAPI = {\r\n//   healthCheck: async () => {\r\n//     try {\r\n//       const response = await api.get('/health');\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Health check failed' };\r\n//     }\r\n//   }\r\n// };\r\n\r\n// // Product APIs\r\n// export const productAPI = {\r\n//   createProduct: async (data) => {\r\n//     try {\r\n//       const response = await api.post('/product', data);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to create product' };\r\n//     }\r\n//   },\r\n  \r\n//   assignProduct: async (id, assignedTo) => {\r\n//     try {\r\n//       const response = await api.patch(`/product/${id}/assign`, { assignedTo });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to assign product' };\r\n//     }\r\n//   },\r\n  \r\n//   getProducts: async (userId) => {\r\n//     try {\r\n//       const response = await api.get('/product', { params: userId ? { userId } : {} });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get products' };\r\n//     }\r\n//   }\r\n// };\r\n\r\n// // Order APIs\r\n// export const orderAPI = {\r\n//   createOrder: async (data) => {\r\n//     try {\r\n//       const response = await api.post('/order', data);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to create order' };\r\n//     }\r\n//   },\r\n  \r\n//   updateOrderStatus: async (id, statusData) => {\r\n//     try {\r\n//       const response = await api.patch(`/order/${id}/status`, statusData);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to update order status' };\r\n//     }\r\n//   },\r\n  \r\n//   updatePaymentStatus: async (id, paymentStatus) => {\r\n//     try {\r\n//       const response = await api.patch(`/order/${id}/payment-status`, { paymentStatus });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to update payment status' };\r\n//     }\r\n//   },\r\n  \r\n//   getOrders: async (userId) => {\r\n//     try {\r\n//       const response = await api.get('/order', { params: userId ? { userId } : {} });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get orders' };\r\n//     }\r\n//   },\r\n  \r\n//   getOrderById: async (orderId) => {\r\n//     try {\r\n//       const response = await api.get(`/order/${orderId}`);\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get order details' };\r\n//     }\r\n//   }\r\n// };\r\n\r\n// // Wallet APIs\r\n// export const walletAPI = {\r\n//   addBonus: async (userId, amount, reason) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/bonus', { userId, amount, reason });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to add bonus' };\r\n//     }\r\n//   },\r\n  \r\n//   deductWallet: async (userId, amount, reason) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/deduct', { userId, amount, reason });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to deduct from wallet' };\r\n//     }\r\n//   },\r\n  \r\n//   markWithdrawal: async (userId, amount, status) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/withdraw', { userId, amount, status });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to mark withdrawal' };\r\n//     }\r\n//   },\r\n  \r\n//   getWallet: async (userId) => {\r\n//     try {\r\n//       const response = await api.get('/wallet', { params: { userId } });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get wallet' };\r\n//     }\r\n//   }\r\n// };\r\n\r\n// // Downline APIs\r\n// export const downlineAPI = {\r\n//   assignDownline: async (userId, parentId, level) => {\r\n//     try {\r\n//       const response = await api.post('/downline/assign', { userId, parentId, level });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to assign downline' };\r\n//     }\r\n//   },\r\n  \r\n//   getDownline: async (userId) => {\r\n//     try {\r\n//       const response = await api.get('/downline', { params: { userId } });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { success: false, message: 'Failed to get downline' };\r\n//     }\r\n//   }\r\n// };\r\n\r\n// export default api;\r\n\r\n\r\nimport axios from 'axios';\r\nimport { API_URL } from '../config';\r\n\r\nconst API_BASE_URL = API_URL;\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Add auth token if available\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Handle common errors\r\n    if (error.response?.status === 401) {\r\n      console.error('Unauthorized - redirect to login');\r\n    } else if (error.response?.status === 404) {\r\n      console.error('Resource not found');\r\n    } else if (error.response?.status === 500) {\r\n      console.error('Server error');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API functions\r\nexport const authAPI = {\r\n  // Login with mobile number, password, and id\r\n  login: async (data) => {\r\n    try {\r\n      const response = await api.post('/auth/login', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { success: false, message: 'Login failed' };\r\n    }\r\n  },\r\n\r\n  // Signup with name, mobile number, password, confirmPassword, and optional email\r\n  signup: async (data) => {\r\n    try {\r\n      const response = await api.post('/auth/signup', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { success: false, message: 'Signup failed' };\r\n    }\r\n  },\r\n\r\n  // Generate user ID after OTP verification\r\n  generateUserId: async (mobileNumber) => {\r\n    try {\r\n      const response = await api.post('/auth/generate-user-id', { mobileNumber });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to generate user ID' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Complete signup after OTP verification\r\n  completeSignup: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/complete-signup', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to complete signup' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Get all user IDs for a mobile number\r\n  getDashboard: async (parentMobile) => {\r\n    try {\r\n      const response = await api.get(`/auth/dashboard/${parentMobile}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to get user data' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Verify OTP (if using backend OTP verification)\r\n  verifyOtp: async (mobileNumber, otp) => {\r\n    try {\r\n      const response = await api.post('/auth/verify-otp', { \r\n        mobileNumber, \r\n        otp \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'OTP verification failed' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Resend OTP\r\n  resendOtp: async (mobileNumber) => {\r\n    try {\r\n      const response = await api.post('/auth/resend-otp', { mobileNumber });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to resend OTP' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Health check\r\nexport const systemAPI = {\r\n  healthCheck: async () => {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Health check failed' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Product APIs\r\nexport const productAPI = {\r\n  createProduct: async (data) => {\r\n    try {\r\n      const response = await api.post('/product', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to create product' \r\n      };\r\n    }\r\n  },\r\n  \r\n  assignProduct: async (id, assignedTo) => {\r\n    try {\r\n      const response = await api.patch(`/product/${id}/assign`, { assignedTo });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to assign product' \r\n      };\r\n    }\r\n  },\r\n  \r\n  getProducts: async (userId) => {\r\n    try {\r\n      const response = await api.get('/product', { \r\n        params: userId ? { userId } : {} \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to get products' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Order APIs\r\nexport const orderAPI = {\r\n  createOrder: async (data) => {\r\n    try {\r\n      const response = await api.post('/order', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to create order' \r\n      };\r\n    }\r\n  },\r\n  \r\n  updateOrderStatus: async (id, statusData) => {\r\n    try {\r\n      const response = await api.patch(`/order/${id}/status`, statusData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to update order status' \r\n      };\r\n    }\r\n  },\r\n  \r\n  updatePaymentStatus: async (id, paymentStatus) => {\r\n    try {\r\n      const response = await api.patch(`/order/${id}/payment-status`, { \r\n        paymentStatus \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to update payment status' \r\n      };\r\n    }\r\n  },\r\n  \r\n  getOrders: async (userId) => {\r\n    try {\r\n      const response = await api.get('/order', { \r\n        params: userId ? { userId } : {} \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to get orders' \r\n      };\r\n    }\r\n  },\r\n  \r\n  getOrderById: async (orderId) => {\r\n    try {\r\n      const response = await api.get(`/order/${orderId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to get order details' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n// Wallet APIs\r\n// export const walletAPI = {\r\n//   addBonus: async (userId, amount, reason) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/bonus', { \r\n//         userId, \r\n//         amount, \r\n//         reason \r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { \r\n//         success: false, \r\n//         message: 'Failed to add bonus' \r\n//       };\r\n//     }\r\n//   },\r\n  \r\n//   deductWallet: async (userId, amount, reason) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/deduct', { \r\n//         userId, \r\n//         amount, \r\n//         reason \r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { \r\n//         success: false, \r\n//         message: 'Failed to deduct from wallet' \r\n//       };\r\n//     }\r\n//   },\r\n  \r\n//   markWithdrawal: async (userId, amount, status) => {\r\n//     try {\r\n//       const response = await api.post('/wallet/withdraw', { \r\n//         userId, \r\n//         amount, \r\n//         status \r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { \r\n//         success: false, \r\n//         message: 'Failed to mark withdrawal' \r\n//       };\r\n//     }\r\n//   },\r\n  \r\n//   getWallet: async (userId) => {\r\n//     try {\r\n//       const response = await api.get('/wallet', { \r\n//         params: { userId } \r\n//       });\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       throw error.response?.data || { \r\n//         success: false, \r\n//         message: 'Failed to get wallet' \r\n//       };\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const walletAPI = {\r\n  // Get user wallet (matches GET /api/wallet/user/:userId)\r\n  getWallet: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/wallet/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to fetch wallet' \r\n      };\r\n    }\r\n  },\r\n\r\n  // Submit withdrawal request (matches POST /api/wallet/withdraw)\r\n  requestWithdrawal: async (data) => {\r\n    try {\r\n      const response = await api.post('/wallet/withdraw', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || {\r\n        success: false,\r\n        message: 'Withdrawal request failed'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get withdrawal history (matches GET /api/wallet/withdrawals/:userId)\r\n  getWithdrawals: async (userId) => {\r\n    try {\r\n      const response = await api.get(`/wallet/withdrawals/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || {\r\n        success: false,\r\n        message: 'Failed to fetch withdrawals'\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get single transaction (matches GET /api/wallet/transaction/:transactionId)\r\n  getTransaction: async (transactionId) => {\r\n    try {\r\n      const response = await api.get(`/wallet/transaction/${transactionId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || {\r\n        success: false,\r\n        message: 'Failed to fetch transaction'\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// Downline APIs\r\nexport const downlineAPI = {\r\n  assignDownline: async (userId, parentId, level) => {\r\n    try {\r\n      const response = await api.post('/downline/assign', { \r\n        userId, \r\n        parentId, \r\n        level \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to assign downline' \r\n      };\r\n    }\r\n  },\r\n  \r\n  getDownline: async (userId) => {\r\n    try {\r\n      const response = await api.get('/downline', { \r\n        params: { userId } \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { \r\n        success: false, \r\n        message: 'Failed to get downline' \r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,WAAW;AAEnC,MAAMC,YAAY,GAAGD,OAAO;;AAE5B;AACA,MAAME,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,GAAG,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACT;EACA,IAAI,EAAAF,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;IAClCC,OAAO,CAACR,KAAK,CAAC,kCAAkC,CAAC;EACnD,CAAC,MAAM,IAAI,EAAAK,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBE,MAAM,MAAK,GAAG,EAAE;IACzCC,OAAO,CAACR,KAAK,CAAC,oBAAoB,CAAC;EACrC,CAAC,MAAM,IAAI,EAAAM,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IACzCC,OAAO,CAACR,KAAK,CAAC,cAAc,CAAC;EAC/B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrB;EACAC,KAAK,EAAE,MAAOC,IAAI,IAAK;IACrB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,aAAa,EAAED,IAAI,CAAC;MACpD,OAAOR,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAa,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAb,KAAK,CAACG,QAAQ,cAAAU,gBAAA,uBAAdA,gBAAA,CAAgBF,IAAI,KAAI;QAAEG,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IAC3E;EACF,CAAC;EAED;EACAC,MAAM,EAAE,MAAOL,IAAI,IAAK;IACtB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,cAAc,EAAED,IAAI,CAAC;MACrD,OAAOR,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAiB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAjB,KAAK,CAACG,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBN,IAAI,KAAI;QAAEG,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgB,CAAC;IAC5E;EACF,CAAC;EAED;EACAG,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtC,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,wBAAwB,EAAE;QAAEO;MAAa,CAAC,CAAC;MAC3E,OAAOhB,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAoB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAApB,KAAK,CAACG,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAM,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,uBAAuB,EAAEU,QAAQ,CAAC;MAClE,OAAOnB,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAuB,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAvB,KAAK,CAACG,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBZ,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAS,YAAY,EAAE,MAAOC,YAAY,IAAK;IACpC,IAAI;MACF,MAAMtB,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,mBAAmBD,YAAY,EAAE,CAAC;MACjE,OAAOtB,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA2B,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAA3B,KAAK,CAACG,QAAQ,cAAAwB,gBAAA,uBAAdA,gBAAA,CAAgBhB,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAa,SAAS,EAAE,MAAAA,CAAOT,YAAY,EAAEU,GAAG,KAAK;IACtC,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,kBAAkB,EAAE;QAClDO,YAAY;QACZU;MACF,CAAC,CAAC;MACF,OAAO1B,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA8B,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAA9B,KAAK,CAACG,QAAQ,cAAA2B,gBAAA,uBAAdA,gBAAA,CAAgBnB,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAgB,SAAS,EAAE,MAAOZ,YAAY,IAAK;IACjC,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,kBAAkB,EAAE;QAAEO;MAAa,CAAC,CAAC;MACrE,OAAOhB,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAgC,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAhC,KAAK,CAACG,QAAQ,cAAA6B,gBAAA,uBAAdA,gBAAA,CAAgBrB,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,SAAS,GAAG;EACvBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOvB,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAmC,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAnC,KAAK,CAACG,QAAQ,cAAAgC,gBAAA,uBAAdA,gBAAA,CAAgBxB,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,UAAU,GAAG;EACxBC,aAAa,EAAE,MAAO1B,IAAI,IAAK;IAC7B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,UAAU,EAAED,IAAI,CAAC;MACjD,OAAOR,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAsC,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAtC,KAAK,CAACG,QAAQ,cAAAmC,iBAAA,uBAAdA,iBAAA,CAAgB3B,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAEDwB,aAAa,EAAE,MAAAA,CAAOC,EAAE,EAAEC,UAAU,KAAK;IACvC,IAAI;MACF,MAAMtC,QAAQ,GAAG,MAAMd,GAAG,CAACqD,KAAK,CAAC,YAAYF,EAAE,SAAS,EAAE;QAAEC;MAAW,CAAC,CAAC;MACzE,OAAOtC,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA2C,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA3C,KAAK,CAACG,QAAQ,cAAAwC,iBAAA,uBAAdA,iBAAA,CAAgBhC,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED6B,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7B,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,UAAU,EAAE;QACzCoB,MAAM,EAAED,MAAM,GAAG;UAAEA;QAAO,CAAC,GAAG,CAAC;MACjC,CAAC,CAAC;MACF,OAAO1C,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA+C,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA/C,KAAK,CAACG,QAAQ,cAAA4C,iBAAA,uBAAdA,iBAAA,CAAgBpC,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMiC,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAOtC,IAAI,IAAK;IAC3B,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,QAAQ,EAAED,IAAI,CAAC;MAC/C,OAAOR,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAkD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAlD,KAAK,CAACG,QAAQ,cAAA+C,iBAAA,uBAAdA,iBAAA,CAAgBvC,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAEDoC,iBAAiB,EAAE,MAAAA,CAAOX,EAAE,EAAEY,UAAU,KAAK;IAC3C,IAAI;MACF,MAAMjD,QAAQ,GAAG,MAAMd,GAAG,CAACqD,KAAK,CAAC,UAAUF,EAAE,SAAS,EAAEY,UAAU,CAAC;MACnE,OAAOjD,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAqD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAArD,KAAK,CAACG,QAAQ,cAAAkD,iBAAA,uBAAdA,iBAAA,CAAgB1C,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAEDuC,mBAAmB,EAAE,MAAAA,CAAOd,EAAE,EAAEe,aAAa,KAAK;IAChD,IAAI;MACF,MAAMpD,QAAQ,GAAG,MAAMd,GAAG,CAACqD,KAAK,CAAC,UAAUF,EAAE,iBAAiB,EAAE;QAC9De;MACF,CAAC,CAAC;MACF,OAAOpD,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAwD,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAxD,KAAK,CAACG,QAAQ,cAAAqD,iBAAA,uBAAdA,iBAAA,CAAgB7C,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED0C,SAAS,EAAE,MAAOZ,MAAM,IAAK;IAC3B,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,QAAQ,EAAE;QACvCoB,MAAM,EAAED,MAAM,GAAG;UAAEA;QAAO,CAAC,GAAG,CAAC;MACjC,CAAC,CAAC;MACF,OAAO1C,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA0D,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA1D,KAAK,CAACG,QAAQ,cAAAuD,iBAAA,uBAAdA,iBAAA,CAAgB/C,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED4C,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,IAAI;MACF,MAAMzD,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,UAAUkC,OAAO,EAAE,CAAC;MACnD,OAAOzD,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA6D,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA7D,KAAK,CAACG,QAAQ,cAAA0D,iBAAA,uBAAdA,iBAAA,CAAgBlD,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM+C,SAAS,GAAG;EACvB;EACAC,SAAS,EAAE,MAAOlB,MAAM,IAAK;IAC3B,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,gBAAgBmB,MAAM,EAAE,CAAC;MACxD,OAAO1C,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAgE,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAhE,KAAK,CAACG,QAAQ,cAAA6D,iBAAA,uBAAdA,iBAAA,CAAgBrD,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAkD,iBAAiB,EAAE,MAAOtD,IAAI,IAAK;IACjC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,kBAAkB,EAAED,IAAI,CAAC;MACzD,OAAOR,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAkE,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAlE,KAAK,CAACG,QAAQ,cAAA+D,iBAAA,uBAAdA,iBAAA,CAAgBvD,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAoD,cAAc,EAAE,MAAOtB,MAAM,IAAK;IAChC,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,uBAAuBmB,MAAM,EAAE,CAAC;MAC/D,OAAO1C,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAoE,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAApE,KAAK,CAACG,QAAQ,cAAAiE,iBAAA,uBAAdA,iBAAA,CAAgBzD,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED;EACAsD,cAAc,EAAE,MAAOC,aAAa,IAAK;IACvC,IAAI;MACF,MAAMnE,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,uBAAuB4C,aAAa,EAAE,CAAC;MACtE,OAAOnE,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAuE,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAAvE,KAAK,CAACG,QAAQ,cAAAoE,iBAAA,uBAAdA,iBAAA,CAAgB5D,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;;AAGD;AACA,OAAO,MAAMyD,WAAW,GAAG;EACzBC,cAAc,EAAE,MAAAA,CAAO5B,MAAM,EAAE6B,QAAQ,EAAEC,KAAK,KAAK;IACjD,IAAI;MACF,MAAMxE,QAAQ,GAAG,MAAMd,GAAG,CAACuB,IAAI,CAAC,kBAAkB,EAAE;QAClDiC,MAAM;QACN6B,QAAQ;QACRC;MACF,CAAC,CAAC;MACF,OAAOxE,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA4E,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA5E,KAAK,CAACG,QAAQ,cAAAyE,iBAAA,uBAAdA,iBAAA,CAAgBjE,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF,CAAC;EAED8D,WAAW,EAAE,MAAOhC,MAAM,IAAK;IAC7B,IAAI;MACF,MAAM1C,QAAQ,GAAG,MAAMd,GAAG,CAACqC,GAAG,CAAC,WAAW,EAAE;QAC1CoB,MAAM,EAAE;UAAED;QAAO;MACnB,CAAC,CAAC;MACF,OAAO1C,QAAQ,CAACQ,IAAI;IACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAA8E,iBAAA;MACd,MAAM,EAAAA,iBAAA,GAAA9E,KAAK,CAACG,QAAQ,cAAA2E,iBAAA,uBAAdA,iBAAA,CAAgBnE,IAAI,KAAI;QAC5BG,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;EACF;AACF,CAAC;AAED,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}