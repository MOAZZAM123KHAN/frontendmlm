{"ast":null,"code":"// // // src/services/userWalletApi.js\n// // import axios from \"axios\";\n\n// // const API_URL = \"http://localhost:5001/api/wallet\";\n// // const TOKEN_KEY = \"userToken\";\n\n// // const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// // userWalletAPI.interceptors.request.use((config) => {\n// //   const token = localStorage.getItem(TOKEN_KEY);\n// //   if (token) config.headers.Authorization = `Bearer ${token}`;\n// //   return config;\n// // });\n\n// // export default {\n// //   getWallet: async (userId) => {\n// //     const res = await userWalletAPI.get(`/user/${userId}`);\n// //     return res.data;\n// //   },\n// //   getWithdrawals: async (userId) => {\n// //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n// //     return res.data;\n// //   },\n// //   requestWithdrawal: async (userId, amount, bankDetails) => {\n// //     const res = await userWalletAPI.post(`/withdraw`, {\n// //       userId,\n// //       amount,\n// //       ...bankDetails,\n// //     });\n// //     return res.data;\n// //   },\n// // };\n\n// // src/services/userWalletApi.js\n// import axios from \"axios\";\n\n// const API_URL = \"http://localhost:5001/api/wallet\";\n// const TOKEN_KEY = \"authToken\";\n\n// // axios instance\n// const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// // har request ke header me token inject karega\n// userWalletAPI.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(TOKEN_KEY);\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\n//   return config;\n// });\n\n// export default {\n//   // GET wallet data\n//   getWallet: async () => {\n//     const userId =\n//       localStorage.getItem(\"selectedUserId\") ||\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n//     const res = await userWalletAPI.get(`/user/${userId}`);\n//     return res.data;\n//   },\n\n//   // GET withdrawals\n//   getWithdrawals: async () => {\n//     const userId =\n//       localStorage.getItem(\"selectedUserId\") ||\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n//     return res.data;\n//   },\n\n//   // POST withdrawal request\n//   requestWithdrawal: async (amount, bankDetails) => {\n//     const userId =\n//       localStorage.getItem(\"selectedUserId\") ||\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n//     const res = await userWalletAPI.post(`/withdraw`, {\n//       userId,\n//       amount,\n//       ...bankDetails,\n//     });\n//     return res.data;\n//   },\n// };\n\n// src/services/userWalletApi.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5001/api/wallet\";\n\n// axios instance\nconst userWalletAPI = axios.create({\n  baseURL: API_URL\n});\n\n// helper to get token from multiple possible keys\nconst getToken = () => {\n  const keys = [\"authToken\", \"token\", \"userToken\"];\n  for (let key of keys) {\n    const val = localStorage.getItem(key);\n    if (val) return val;\n  }\n  return null;\n};\n\n// har request ke header me token inject karega\nuserWalletAPI.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n\n// helper to get current userId (selected or active)\nconst getUserId = () => {\n  return localStorage.getItem(\"selectedUserId\") || JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n};\nexport default {\n  // GET wallet data\n  getWallet: async () => {\n    const userId = getUserId();\n    const res = await userWalletAPI.get(`/user/${userId}`);\n    return res.data;\n  },\n  // GET withdrawals\n  getWithdrawals: async () => {\n    const userId = getUserId();\n    const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n    return res.data;\n  },\n  // POST withdrawal request\n  requestWithdrawal: async (amount, bankDetails) => {\n    const userId = getUserId();\n    const res = await userWalletAPI.post(`/withdraw`, {\n      userId,\n      amount,\n      ...bankDetails\n    });\n    return res.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","userWalletAPI","create","baseURL","getToken","keys","key","val","localStorage","getItem","interceptors","request","use","config","token","headers","Authorization","getUserId","JSON","parse","userId","getWallet","res","get","data","getWithdrawals","requestWithdrawal","amount","bankDetails","post"],"sources":["C:/Users/moazz/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/services/userWalletApi.js"],"sourcesContent":["// // // src/services/userWalletApi.js\r\n// // import axios from \"axios\";\r\n\r\n// // const API_URL = \"http://localhost:5001/api/wallet\";\r\n// // const TOKEN_KEY = \"userToken\";\r\n\r\n// // const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// // userWalletAPI.interceptors.request.use((config) => {\r\n// //   const token = localStorage.getItem(TOKEN_KEY);\r\n// //   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n// //   return config;\r\n// // });\r\n\r\n// // export default {\r\n// //   getWallet: async (userId) => {\r\n// //     const res = await userWalletAPI.get(`/user/${userId}`);\r\n// //     return res.data;\r\n// //   },\r\n// //   getWithdrawals: async (userId) => {\r\n// //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n// //     return res.data;\r\n// //   },\r\n// //   requestWithdrawal: async (userId, amount, bankDetails) => {\r\n// //     const res = await userWalletAPI.post(`/withdraw`, {\r\n// //       userId,\r\n// //       amount,\r\n// //       ...bankDetails,\r\n// //     });\r\n// //     return res.data;\r\n// //   },\r\n// // };\r\n\r\n\r\n\r\n// // src/services/userWalletApi.js\r\n// import axios from \"axios\";\r\n\r\n// const API_URL = \"http://localhost:5001/api/wallet\";\r\n// const TOKEN_KEY = \"authToken\";\r\n\r\n// // axios instance\r\n// const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// // har request ke header me token inject karega\r\n// userWalletAPI.interceptors.request.use((config) => {\r\n//   const token = localStorage.getItem(TOKEN_KEY);\r\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n//   return config;\r\n// });\r\n\r\n// export default {\r\n//   // GET wallet data\r\n//   getWallet: async () => {\r\n//     const userId =\r\n//       localStorage.getItem(\"selectedUserId\") ||\r\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n//     const res = await userWalletAPI.get(`/user/${userId}`);\r\n//     return res.data;\r\n//   },\r\n\r\n//   // GET withdrawals\r\n//   getWithdrawals: async () => {\r\n//     const userId =\r\n//       localStorage.getItem(\"selectedUserId\") ||\r\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n//     return res.data;\r\n//   },\r\n\r\n//   // POST withdrawal request\r\n//   requestWithdrawal: async (amount, bankDetails) => {\r\n//     const userId =\r\n//       localStorage.getItem(\"selectedUserId\") ||\r\n//       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n//     const res = await userWalletAPI.post(`/withdraw`, {\r\n//       userId,\r\n//       amount,\r\n//       ...bankDetails,\r\n//     });\r\n//     return res.data;\r\n//   },\r\n// };\r\n\r\n\r\n\r\n// src/services/userWalletApi.js\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5001/api/wallet\";\r\n\r\n// axios instance\r\nconst userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// helper to get token from multiple possible keys\r\nconst getToken = () => {\r\n  const keys = [\"authToken\", \"token\", \"userToken\"];\r\n  for (let key of keys) {\r\n    const val = localStorage.getItem(key);\r\n    if (val) return val;\r\n  }\r\n  return null;\r\n};\r\n\r\n// har request ke header me token inject karega\r\nuserWalletAPI.interceptors.request.use((config) => {\r\n  const token = getToken();\r\n  if (token) config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n});\r\n\r\n// helper to get current userId (selected or active)\r\nconst getUserId = () => {\r\n  return (\r\n    localStorage.getItem(\"selectedUserId\") ||\r\n    JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId\r\n  );\r\n};\r\n\r\nexport default {\r\n  // GET wallet data\r\n  getWallet: async () => {\r\n    const userId = getUserId();\r\n    const res = await userWalletAPI.get(`/user/${userId}`);\r\n    return res.data;\r\n  },\r\n\r\n  // GET withdrawals\r\n  getWithdrawals: async () => {\r\n    const userId = getUserId();\r\n    const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n    return res.data;\r\n  },\r\n\r\n  // POST withdrawal request\r\n  requestWithdrawal: async (amount, bankDetails) => {\r\n    const userId = getUserId();\r\n    const res = await userWalletAPI.post(`/withdraw`, {\r\n      userId,\r\n      amount,\r\n      ...bankDetails,\r\n    });\r\n    return res.data;\r\n  },\r\n};\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kCAAkC;;AAElD;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAAEC,OAAO,EAAEH;AAAQ,CAAC,CAAC;;AAExD;AACA,MAAMI,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAMC,IAAI,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,WAAW,CAAC;EAChD,KAAK,IAAIC,GAAG,IAAID,IAAI,EAAE;IACpB,MAAME,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACH,GAAG,CAAC;IACrC,IAAIC,GAAG,EAAE,OAAOA,GAAG;EACrB;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACAN,aAAa,CAACS,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAIU,KAAK,EAAED,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAC3D,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACA,MAAMI,SAAS,GAAGA,CAAA,KAAM;EACtB,OACET,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IACtCS,IAAI,CAACC,KAAK,CAACX,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAACW,MAAM;AAEjE,CAAC;AAED,eAAe;EACb;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAMD,MAAM,GAAGH,SAAS,CAAC,CAAC;IAC1B,MAAMK,GAAG,GAAG,MAAMrB,aAAa,CAACsB,GAAG,CAAC,SAASH,MAAM,EAAE,CAAC;IACtD,OAAOE,GAAG,CAACE,IAAI;EACjB,CAAC;EAED;EACAC,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAML,MAAM,GAAGH,SAAS,CAAC,CAAC;IAC1B,MAAMK,GAAG,GAAG,MAAMrB,aAAa,CAACsB,GAAG,CAAC,gBAAgBH,MAAM,EAAE,CAAC;IAC7D,OAAOE,GAAG,CAACE,IAAI;EACjB,CAAC;EAED;EACAE,iBAAiB,EAAE,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IAChD,MAAMR,MAAM,GAAGH,SAAS,CAAC,CAAC;IAC1B,MAAMK,GAAG,GAAG,MAAMrB,aAAa,CAAC4B,IAAI,CAAC,WAAW,EAAE;MAChDT,MAAM;MACNO,MAAM;MACN,GAAGC;IACL,CAAC,CAAC;IACF,OAAON,GAAG,CAACE,IAAI;EACjB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}