{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moazz\\\\Desktop\\\\frontend\\\\src\\\\components\\\\dashboard\\\\Wallet.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import {\n// //   Clock,\n// //   CheckCircle,\n// //   X,\n// //   Wallet as WalletIcon,\n// //   IndianRupee,\n// // } from \"lucide-react\";\n// // import userWalletAPI from \"../../services/userWalletApi\";\n\n// // const EnhancedWallet = () => {\n// //   const { userId } = useParams();\n\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// //   const [loading, setLoading] = useState({\n// //     wallet: false,\n// //     withdrawals: false,\n// //     submit: false,\n// //   });\n// //   const [error, setError] = useState(\"\");\n// //   const [success, setSuccess] = useState(\"\");\n// //   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\n// //     bankName: \"\",\n// //     accountNumber: \"\",\n// //     ifscCode: \"\",\n// //     mobileNumber: \"\",\n// //     amount: \"\",\n// //   });\n// //   const [formErrors, setFormErrors] = useState({});\n\n// //   // ---------- helpers ----------\n// //   const formatDate = (dateString) => {\n// //     if (!dateString) return \"-\";\n// //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n// //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n// //   };\n\n// //   const getStatusIcon = (status) => {\n// //     switch (status) {\n// //       case \"Pending\":\n// //         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n// //       case \"Approved\":\n// //       case \"Completed\":\n// //         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n// //       case \"Rejected\":\n// //         return <X className=\"h-4 w-4 text-red-500\" />;\n// //       default:\n// //         return <Clock className=\"h-4 w-4 text-gray-500\" />;\n// //     }\n// //   };\n\n// //   const getStatusColor = (status) => {\n// //     switch (status) {\n// //       case \"Pending\":\n// //         return \"bg-yellow-100 text-yellow-700\";\n// //       case \"Approved\":\n// //       case \"Completed\":\n// //         return \"bg-green-100 text-green-700\";\n// //       case \"Rejected\":\n// //         return \"bg-red-100 text-red-700\";\n// //       default:\n// //         return \"bg-gray-100 text-gray-700\";\n// //     }\n// //   };\n\n// //   const prettyType = (t) => {\n// //     // backend types: 'bonus', 'deduct', 'withdrawal', 'refund'\n// //     const map = { bonus: \"Bonus\", deduct: \"Deduction\", withdrawal: \"Withdrawal\", refund: \"Refund\" };\n// //     return map[t] || t || \"Transaction\";\n// //   };\n\n// //   const amountClass = (amt) =>\n// //     Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\n\n// //   const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\n\n// //   // ---------- API calls ----------\n// //   const loadWallet = async () => {\n// //     if (!userId) return;\n// //     try {\n// //       setLoading((p) => ({ ...p, wallet: true }));\n// //       setError(\"\");\n// //       const res = await userWalletAPI.getWallet(userId);\n// //       // expect: { success, wallet: { balance, transactions } }\n// //       const w = res?.data?.wallet || res?.data || {}; // tolerate shapes\n// //       setWallet({\n// //         balance: Number(w.balance) || 0,\n// //         transactions: Array.isArray(w.transactions) ? w.transactions : [],\n// //       });\n// //     } catch (err) {\n// //       setError(\n// //         err?.response?.data?.message ||\n// //           err?.message ||\n// //           \"Failed to fetch wallet\"\n// //       );\n// //     } finally {\n// //       setLoading((p) => ({ ...p, wallet: false }));\n// //     }\n// //   };\n\n// //   const loadRequests = async () => {\n// //     if (!userId) return;\n// //     try {\n// //       setLoading((p) => ({ ...p, withdrawals: true }));\n// //       setError(\"\");\n// //       const res = await userWalletAPI.getWithdrawals(userId);\n// //       // expect: { success, withdrawalRequests: [...] }\n// //       const list =\n// //         res?.data?.withdrawalRequests ||\n// //         res?.data ||\n// //         [];\n// //       setWithdrawalRequests(Array.isArray(list) ? list : []);\n// //     } catch (err) {\n// //       setError(\n// //         err?.response?.data?.message ||\n// //           err?.message ||\n// //           \"Failed to fetch withdrawals\"\n// //       );\n// //     } finally {\n// //       setLoading((p) => ({ ...p, withdrawals: false }));\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (userId) {\n// //       loadWallet();\n// //       loadRequests();\n// //     }\n// //     // eslint-disable-next-line react-hooks/exhaustive-deps\n// //   }, [userId]);\n\n// //   // ---------- validations ----------\n// //   const validateForm = () => {\n// //     const errors = {};\n// //     let isValid = true;\n\n// //     if (!withdrawalForm.bankName.trim()) {\n// //       errors.bankName = \"Bank name is required\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.accountNumber.trim() ||\n// //       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\n// //     ) {\n// //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.ifscCode.trim() ||\n// //       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\n// //     ) {\n// //       errors.ifscCode = \"Valid IFSC code is required\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.mobileNumber.trim() ||\n// //       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\n// //     ) {\n// //       errors.mobileNumber = \"Valid Indian mobile number is required\";\n// //       isValid = false;\n// //     }\n// //     const amt = parseFloat(withdrawalForm.amount);\n// //     if (!amt || amt < 1000) {\n// //       errors.amount = \"Minimum withdrawal amount is ₹1000\";\n// //       isValid = false;\n// //     } else if (amt > (Number(wallet.balance) || 0)) {\n// //       errors.amount = \"Insufficient balance\";\n// //       isValid = false;\n// //     }\n\n// //     setFormErrors(errors);\n// //     return isValid;\n// //   };\n\n// //   // ---------- submit ----------\n// //   const handleWithdrawalSubmit = async () => {\n// //     if (!validateForm()) return;\n\n// //     setLoading((p) => ({ ...p, submit: true }));\n// //     setError(\"\");\n// //     setSuccess(\"\");\n\n// //     try {\n// //       // backend expects POST /api/wallet/withdraw  with body { userId, amount, ... }\n// //       await userWalletAPI.requestWithdrawal({\n// //         userId,\n// //         ...withdrawalForm,\n// //         amount: Number(withdrawalForm.amount),\n// //       });\n\n// //       setSuccess(\"Withdrawal request submitted successfully!\");\n// //       setShowWithdrawForm(false);\n// //       setWithdrawalForm({\n// //         bankName: \"\",\n// //         accountNumber: \"\",\n// //         ifscCode: \"\",\n// //         mobileNumber: \"\",\n// //         amount: \"\",\n// //       });\n\n// //       await Promise.all([loadWallet(), loadRequests()]);\n// //     } catch (err) {\n// //       setError(\n// //         err?.response?.data?.message ||\n// //           err?.message ||\n// //           \"Withdrawal failed\"\n// //       );\n// //     } finally {\n// //       setLoading((p) => ({ ...p, submit: false }));\n// //     }\n// //   };\n\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n// //     if (formErrors[name]) {\n// //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n// //     }\n// //   };\n\n// //   // ---------- UI ----------\n// //   return (\n// //     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\n// //       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\n// //         <div>\n// //           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\n// //           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\n// //             <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\n// //           </p>\n// //         </div>\n// //         <WalletIcon size={50} className=\"opacity-70\" />\n// //       </div>\n\n// //       <div className=\"mt-6 flex gap-4 border-b\">\n// //         <button\n// //           onClick={() => setActiveTab(\"transactions\")}\n// //           className={`pb-2 px-4 ${\n// //             activeTab === \"transactions\"\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n// //               : \"text-gray-600\"\n// //           }`}\n// //         >\n// //           Transactions\n// //         </button>\n// //         <button\n// //           onClick={() => setActiveTab(\"withdrawals\")}\n// //           className={`pb-2 px-4 ${\n// //             activeTab === \"withdrawals\"\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n// //               : \"text-gray-600\"\n// //           }`}\n// //         >\n// //           Withdrawals\n// //         </button>\n// //       </div>\n\n// //       {error && (\n// //         <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>\n// //       )}\n// //       {success && (\n// //         <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>\n// //       )}\n\n// //       {activeTab === \"transactions\" && (\n// //         <div className=\"mt-6 space-y-3\">\n// //           {loading.wallet ? (\n// //             <p className=\"text-gray-500 text-center\">Loading wallet…</p>\n// //           ) : wallet.transactions.length === 0 ? (\n// //             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\n// //           ) : (\n// //             wallet.transactions.map((t, i) => (\n// //               <div\n// //                 key={t._id || i}\n// //                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n// //               >\n// //                 <div>\n// //                   <p className=\"font-medium\">{prettyType(t.type)}</p>\n// //                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\n// //                 </div>\n// //                 <p className={`font-semibold ${amountClass(t.amount)}`}>\n// //                   {sign(t.amount)} ₹{Math.abs(Number(t.amount) || 0)}\n// //                 </p>\n// //               </div>\n// //             ))\n// //           )}\n// //         </div>\n// //       )}\n\n// //       {activeTab === \"withdrawals\" && (\n// //         <div className=\"mt-6 space-y-3\">\n// //           <button\n// //             onClick={() => setShowWithdrawForm((s) => !s)}\n// //             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\n// //           >\n// //             {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\n// //           </button>\n\n// //           {showWithdrawForm && (\n// //             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\n// //               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map(\n// //                 (field) => (\n// //                   <div key={field}>\n// //                     <input\n// //                       type={field === \"amount\" ? \"number\" : \"text\"}\n// //                       name={field}\n// //                       placeholder={\n// //                         field === \"bankName\"\n// //                           ? \"Bank Name\"\n// //                           : field === \"accountNumber\"\n// //                           ? \"Account Number\"\n// //                           : field === \"ifscCode\"\n// //                           ? \"IFSC Code\"\n// //                           : field === \"mobileNumber\"\n// //                           ? \"Mobile Number\"\n// //                           : \"Amount\"\n// //                       }\n// //                       value={withdrawalForm[field]}\n// //                       onChange={handleInputChange}\n// //                       className={`w-full border rounded-lg px-3 py-2 ${\n// //                         formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\n// //                       }`}\n// //                     />\n// //                     {formErrors[field] && (\n// //                       <p className=\"text-red-500 text-sm mt-1\">\n// //                         {formErrors[field]}\n// //                       </p>\n// //                     )}\n// //                   </div>\n// //                 )\n// //               )}\n// //               <button\n// //                 onClick={handleWithdrawalSubmit}\n// //                 disabled={loading.submit}\n// //                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n// //               >\n// //                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\n// //               </button>\n// //             </div>\n// //           )}\n\n// //           <div className=\"space-y-3\">\n// //             {loading.withdrawals ? (\n// //               <p className=\"text-gray-500 text-center\">Loading withdrawals…</p>\n// //             ) : withdrawalRequests.length === 0 ? (\n// //               <p className=\"text-gray-500 text-center\">\n// //                 No withdrawal requests yet.\n// //               </p>\n// //             ) : (\n// //               withdrawalRequests.map((req, i) => (\n// //                 <div\n// //                   key={req.id || i}\n// //                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n// //                 >\n// //                   <div>\n// //                     <p className=\"font-medium\">₹{req.amount}</p>\n// //                     <p className=\"text-sm text-gray-500\">\n// //                       {formatDate(req.requestDate)}\n// //                     </p>\n// //                   </div>\n// //                   <span\n// //                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\n// //                       req.status\n// //                     )}`}\n// //                   >\n// //                     {getStatusIcon(req.status)}\n// //                     {req.status}\n// //                   </span>\n// //                 </div>\n// //               ))\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EnhancedWallet;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   Clock,\n//   CheckCircle,\n//   X,\n//   Wallet as WalletIcon,\n//   IndianRupee,\n// } from \"lucide-react\";\n// import userWalletAPI from \"../../services/userWalletApi\";\n\n// const EnhancedWallet = () => {\n//   const { userId } = useParams();\n\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({\n//     wallet: false,\n//     withdrawals: false,\n//     submit: false,\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n//   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: \"\",\n//     accountNumber: \"\",\n//     ifscCode: \"\",\n//     mobileNumber: \"\",\n//     amount: \"\",\n//   });\n//   const [formErrors, setFormErrors] = useState({});\n\n//   // ---------- helpers ----------\n//   const formatDate = (dateString) => {\n//     if (!dateString) return \"-\";\n//     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n//     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case \"Pending\":\n//         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n//       case \"Approved\":\n//       case \"Completed\":\n//         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n//       case \"Rejected\":\n//         return <X className=\"h-4 w-4 text-red-500\" />;\n//       default:\n//         return <Clock className=\"h-4 w-4 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case \"Pending\":\n//         return \"bg-yellow-100 text-yellow-700\";\n//       case \"Approved\":\n//       case \"Completed\":\n//         return \"bg-green-100 text-green-700\";\n//       case \"Rejected\":\n//         return \"bg-red-100 text-red-700\";\n//       default:\n//         return \"bg-gray-100 text-gray-700\";\n//     }\n//   };\n\n//   const prettyType = (t) => {\n//     const map = { bonus: \"Bonus\", deduct: \"Deduction\", withdrawal: \"Withdrawal\", refund: \"Refund\" };\n//     return map[t] || t || \"Transaction\";\n//   };\n\n//   const amountClass = (amt) =>\n//     Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\n\n//   const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\n\n//   // ---------- API calls ----------\n//   const loadWallet = async () => {\n//     if (!userId) return;\n//     try {\n//       setLoading((p) => ({ ...p, wallet: true }));\n//       setError(\"\");\n//       const res = await userWalletAPI.getWallet(userId);\n//       const w = res?.data?.wallet || res?.data || {};\n//       setWallet({\n//         balance: Number(w.balance) || 0,\n//         transactions: Array.isArray(w.transactions) ? w.transactions : [],\n//       });\n//     } catch (err) {\n//       setError(err?.response?.data?.message || err?.message || \"Failed to fetch wallet\");\n//     } finally {\n//       setLoading((p) => ({ ...p, wallet: false }));\n//     }\n//   };\n\n//   const loadRequests = async () => {\n//     if (!userId) return;\n//     try {\n//       setLoading((p) => ({ ...p, withdrawals: true }));\n//       setError(\"\");\n//       const res = await userWalletAPI.getWithdrawals(userId);\n//       const list = res?.data?.withdrawalRequests || res?.data || [];\n//       setWithdrawalRequests(Array.isArray(list) ? list : []);\n//     } catch (err) {\n//       setError(err?.response?.data?.message || err?.message || \"Failed to fetch withdrawals\");\n//     } finally {\n//       setLoading((p) => ({ ...p, withdrawals: false }));\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (userId) {\n//       loadWallet();\n//       loadRequests();\n//     }\n//   }, [userId]);\n\n//   // ---------- validations ----------\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = \"Bank name is required\";\n//       isValid = false;\n//     }\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n//       isValid = false;\n//     }\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = \"Valid IFSC code is required\";\n//       isValid = false;\n//     }\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = \"Valid Indian mobile number is required\";\n//       isValid = false;\n//     }\n//     const amt = parseFloat(withdrawalForm.amount);\n//     if (!amt || amt < 1000) {\n//       errors.amount = \"Minimum withdrawal amount is ₹1000\";\n//       isValid = false;\n//     } else if (amt > (Number(wallet.balance) || 0)) {\n//       errors.amount = \"Insufficient balance\";\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   // ---------- submit ----------\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading((p) => ({ ...p, submit: true }));\n//     setError(\"\");\n//     setSuccess(\"\");\n\n//     // sanitize & structure payload to match backend\n//     const payload = {\n//       userId: userId.trim(),\n//       bankName: withdrawalForm.bankName.trim(),\n//       accountNumber: withdrawalForm.accountNumber.trim(),\n//       ifscCode: withdrawalForm.ifscCode.trim().toUpperCase(),\n//       mobileNumber: withdrawalForm.mobileNumber.trim(),\n//       amount: Number(withdrawalForm.amount),\n//     };\n\n//     console.log(\"Sending withdrawal request:\", payload);\n\n//     try {\n//       const res = await userWalletAPI.requestWithdrawal(payload);\n//       setSuccess(\"Withdrawal request submitted successfully!\");\n//       setShowWithdrawForm(false);\n//       setWithdrawalForm({\n//         bankName: \"\",\n//         accountNumber: \"\",\n//         ifscCode: \"\",\n//         mobileNumber: \"\",\n//         amount: \"\",\n//       });\n\n//       await Promise.all([loadWallet(), loadRequests()]);\n//     } catch (err) {\n//       console.error(\"❌ requestWithdrawal error:\", err.response?.data || err.message);\n//       if (err.response?.data?.errors) {\n//         setFormErrors(err.response.data.errors.reduce((acc, e) => ({ ...acc, [e.field]: e.message }), {}));\n//       }\n//       setError(err?.response?.data?.message || err?.message || \"Withdrawal failed\");\n//     } finally {\n//       setLoading((p) => ({ ...p, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n//     if (formErrors[name]) {\n//       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n//     }\n//   };\n\n//   // ---------- UI ----------\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\n//       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\n//         <div>\n//           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\n//           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\n//             <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\n//           </p>\n//         </div>\n//         <WalletIcon size={50} className=\"opacity-70\" />\n//       </div>\n\n//       <div className=\"mt-6 flex gap-4 border-b\">\n//         <button\n//           onClick={() => setActiveTab(\"transactions\")}\n//           className={`pb-2 px-4 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           onClick={() => setActiveTab(\"withdrawals\")}\n//           className={`pb-2 px-4 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\n//       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\n\n//       {activeTab === \"transactions\" && (\n//         <div className=\"mt-6 space-y-3\">\n//           {loading.wallet ? (\n//             <p className=\"text-gray-500 text-center\">Loading wallet…</p>\n//           ) : wallet.transactions.length === 0 ? (\n//             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\n//           ) : (\n//             wallet.transactions.map((t, i) => (\n//               <div key={t._id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\n//                 <div>\n//                   <p className=\"font-medium\">{prettyType(t.type)}</p>\n//                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\n//                 </div>\n//                 <p className={`font-semibold ${amountClass(t.amount)}`}>\n//                   {sign(t.amount)} ₹{Math.abs(Number(t.amount) || 0)}\n//                 </p>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       )}\n\n//       {activeTab === \"withdrawals\" && (\n//         <div className=\"mt-6 space-y-3\">\n//           <button\n//             onClick={() => setShowWithdrawForm((s) => !s)}\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\n//           >\n//             {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\n//           </button>\n\n//           {showWithdrawForm && (\n//             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\n//               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\n//                 <div key={field}>\n//                   <input\n//                     type={field === \"amount\" ? \"number\" : \"text\"}\n//                     name={field}\n//                     placeholder={field === \"bankName\" ? \"Bank Name\" : field === \"accountNumber\" ? \"Account Number\" : field === \"ifscCode\" ? \"IFSC Code\" : field === \"mobileNumber\" ? \"Mobile Number\" : \"Amount\"}\n//                     value={withdrawalForm[field]}\n//                     onChange={handleInputChange}\n//                     className={`w-full border rounded-lg px-3 py-2 ${formErrors[field] ? \"border-red-500\" : \"border-gray-300\"}`}\n//                   />\n//                   {formErrors[field] && <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>}\n//                 </div>\n//               ))}\n//               <button\n//                 onClick={handleWithdrawalSubmit}\n//                 disabled={loading.submit}\n//                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n//               >\n//                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\n//               </button>\n//             </div>\n//           )}\n\n//           <div className=\"space-y-3\">\n//             {loading.withdrawals ? (\n//               <p className=\"text-gray-500 text-center\">Loading withdrawals…</p>\n//             ) : withdrawalRequests.length === 0 ? (\n//               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\n//             ) : (\n//               withdrawalRequests.map((req, i) => (\n//                 <div key={req.id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\n//                   <div>\n//                     <p className=\"font-medium\">₹{req.amount}</p>\n//                     <p className=\"text-sm text-gray-500\">{formatDate(req.requestDate)}</p>\n//                   </div>\n//                   <span className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(req.status)}`}>\n//                     {getStatusIcon(req.status)}\n//                     {req.status}\n//                   </span>\n//                 </div>\n//               ))\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Clock, CheckCircle, X, Wallet as WalletIcon, IndianRupee } from \"lucide-react\";\nimport userWalletAPI from \"../../services/userWalletApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnhancedWallet = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [wallet, setWallet] = useState({\n    balance: 0,\n    transactions: []\n  });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({\n    wallet: false,\n    withdrawals: false,\n    submit: false\n  });\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"transactions\");\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: \"\",\n    accountNumber: \"\",\n    ifscCode: \"\",\n    mobileNumber: \"\",\n    amount: \"\"\n  });\n  const [formErrors, setFormErrors] = useState({});\n\n  // ---------- helpers ----------\n  const formatDate = dateString => {\n    if (!dateString) return \"-\";\n    const options = {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\"\n    };\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n  };\n  const getStatusIcon = status => {\n    switch (status) {\n      case \"Pending\":\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-4 w-4 text-yellow-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 16\n        }, this);\n      case \"Approved\":\n      case \"Completed\":\n        return /*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"h-4 w-4 text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 16\n        }, this);\n      case \"Rejected\":\n        return /*#__PURE__*/_jsxDEV(X, {\n          className: \"h-4 w-4 text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-4 w-4 text-gray-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case \"Pending\":\n        return \"bg-yellow-100 text-yellow-700\";\n      case \"Approved\":\n      case \"Completed\":\n        return \"bg-green-100 text-green-700\";\n      case \"Rejected\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n  const prettyType = type => {\n    const map = {\n      bonus: \"Bonus\",\n      deduct: \"Deduction\",\n      withdrawal: \"Withdrawal\",\n      refund: \"Refund\"\n    };\n    return map[type] || type || \"Transaction\";\n  };\n  const amountClass = amt => Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\n  const sign = amt => Number(amt) >= 0 ? \"+\" : \"-\";\n\n  // ---------- API calls ----------\n  const loadWallet = async () => {\n    if (!userId) return;\n    try {\n      var _res$data;\n      setLoading(p => ({\n        ...p,\n        wallet: true\n      }));\n      setError(\"\");\n      const res = await userWalletAPI.getWallet(userId);\n      const w = (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.wallet) || (res === null || res === void 0 ? void 0 : res.data) || {};\n      setWallet({\n        balance: Number(w.balance) || 0,\n        transactions: Array.isArray(w.transactions) ? w.transactions : []\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch wallet\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        wallet: false\n      }));\n    }\n  };\n  const loadRequests = async () => {\n    if (!userId) return;\n    try {\n      var _res$data2;\n      setLoading(p => ({\n        ...p,\n        withdrawals: true\n      }));\n      setError(\"\");\n      const res = await userWalletAPI.getWithdrawals(userId);\n      const list = (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.withdrawalRequests) || (res === null || res === void 0 ? void 0 : res.data) || [];\n      setWithdrawalRequests(Array.isArray(list) ? list : []);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError((err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch withdrawals\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        withdrawals: false\n      }));\n    }\n  };\n  useEffect(() => {\n    if (userId) {\n      loadWallet();\n      loadRequests();\n    }\n  }, [userId]);\n\n  // ---------- validations ----------\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = \"Bank name is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n      isValid = false;\n    }\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = \"Valid IFSC code is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\n      isValid = false;\n    }\n    const amt = parseFloat(withdrawalForm.amount);\n    if (!amt || amt < 1000) {\n      errors.amount = \"Minimum withdrawal amount is ₹1000\";\n      isValid = false;\n    } else if (amt > (Number(wallet.balance) || 0)) {\n      errors.amount = \"Insufficient balance\";\n      isValid = false;\n    }\n    setFormErrors(errors);\n    return isValid;\n  };\n\n  // ---------- submit ----------\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(p => ({\n      ...p,\n      submit: true\n    }));\n    setError(\"\");\n    setSuccess(\"\");\n    const payload = {\n      userId: userId,\n      // must match backend\n      bankName: withdrawalForm.bankName.trim(),\n      accountNumber: withdrawalForm.accountNumber.trim(),\n      ifscCode: withdrawalForm.ifscCode.trim().toUpperCase(),\n      mobileNumber: withdrawalForm.mobileNumber.trim(),\n      amount: Number(withdrawalForm.amount)\n    };\n    try {\n      var _res$data3;\n      const res = await userWalletAPI.requestWithdrawal(payload);\n      setSuccess((res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.message) || \"Withdrawal request submitted successfully!\");\n      setShowWithdrawForm(false);\n      setWithdrawalForm({\n        bankName: \"\",\n        accountNumber: \"\",\n        ifscCode: \"\",\n        mobileNumber: \"\",\n        amount: \"\"\n      });\n      await Promise.all([loadWallet(), loadRequests()]);\n    } catch (err) {\n      var _err$response3, _err$response3$data, _err$response4, _err$response4$data;\n      if ((_err$response3 = err.response) !== null && _err$response3 !== void 0 && (_err$response3$data = _err$response3.data) !== null && _err$response3$data !== void 0 && _err$response3$data.errors) {\n        const backendErrors = {};\n        err.response.data.errors.forEach(e => {\n          backendErrors[e.field] = e.message;\n        });\n        setFormErrors(backendErrors);\n      }\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || err.message || \"Withdrawal failed\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        submit: false\n      }));\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWithdrawalForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) setFormErrors(prev => ({\n      ...prev,\n      [name]: \"\"\n    }));\n  };\n\n  // ---------- UI ----------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 md:p-6 max-w-5xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold\",\n          children: \"Wallet Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 919,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold flex items-center gap-2 mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(IndianRupee, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 13\n          }, this), \" \", (Number(wallet.balance) || 0).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletIcon, {\n        size: 50,\n        className: \"opacity-70\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 924,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 flex gap-4 border-b\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"transactions\"),\n        className: `pb-2 px-4 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"withdrawals\"),\n        className: `pb-2 px-4 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Withdrawals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-red-600 bg-red-50 p-2 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-green-600 bg-green-50 p-2 rounded\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 19\n    }, this), activeTab === \"transactions\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 space-y-3\",\n      children: loading.wallet ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"Loading wallet\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 13\n      }, this) : wallet.transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"No transactions yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 13\n      }, this) : wallet.transactions.map((t, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium\",\n            children: prettyType(t.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500\",\n            children: formatDate(t.date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 956,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 954,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `font-semibold ${amountClass(t.amount)}`,\n          children: [sign(t.amount), \" \\u20B9\", Math.abs(Number(t.amount) || 0)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 17\n        }, this)]\n      }, t._id || i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 9\n    }, this), activeTab === \"withdrawals\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowWithdrawForm(s => !s),\n        className: \"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\",\n        children: showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 11\n      }, this), showWithdrawForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 bg-white shadow rounded-xl p-4 space-y-4\",\n        children: [[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === \"amount\" ? \"number\" : \"text\",\n            name: field,\n            placeholder: field === \"bankName\" ? \"Bank Name\" : field === \"accountNumber\" ? \"Account Number\" : field === \"ifscCode\" ? \"IFSC Code\" : field === \"mobileNumber\" ? \"Mobile Number\" : \"Amount\",\n            value: withdrawalForm[field],\n            onChange: handleInputChange,\n            className: `w-full border rounded-lg px-3 py-2 ${formErrors[field] ? \"border-red-500\" : \"border-gray-300\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 19\n          }, this), formErrors[field] && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors[field]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 998,\n            columnNumber: 41\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleWithdrawalSubmit,\n          disabled: loading.submit,\n          className: \"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\",\n          children: loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: loading.withdrawals ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center\",\n          children: \"Loading withdrawals\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 15\n        }, this) : withdrawalRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center\",\n          children: \"No withdrawal requests yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1015,\n          columnNumber: 15\n        }, this) : withdrawalRequests.map((req, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium\",\n              children: [\"\\u20B9\", req.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-500\",\n              children: formatDate(req.requestDate)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1021,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(req.status)}`,\n            children: [getStatusIcon(req.status), req.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1023,\n            columnNumber: 19\n          }, this)]\n        }, req.id || i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1011,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 916,\n    columnNumber: 5\n  }, this);\n};\n_s(EnhancedWallet, \"aA5HnanZ9fYVMLqaGVRp9ijZJGc=\", false, function () {\n  return [useParams];\n});\n_c = EnhancedWallet;\nexport default EnhancedWallet;\nvar _c;\n$RefreshReg$(_c, \"EnhancedWallet\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Clock","CheckCircle","X","Wallet","WalletIcon","IndianRupee","userWalletAPI","jsxDEV","_jsxDEV","EnhancedWallet","_s","userId","wallet","setWallet","balance","transactions","withdrawalRequests","setWithdrawalRequests","showWithdrawForm","setShowWithdrawForm","loading","setLoading","withdrawals","submit","error","setError","success","setSuccess","activeTab","setActiveTab","withdrawalForm","setWithdrawalForm","bankName","accountNumber","ifscCode","mobileNumber","amount","formErrors","setFormErrors","formatDate","dateString","options","day","month","year","Date","toLocaleDateString","getStatusIcon","status","className","fileName","_jsxFileName","lineNumber","columnNumber","getStatusColor","prettyType","type","map","bonus","deduct","withdrawal","refund","amountClass","amt","Number","sign","loadWallet","_res$data","p","res","getWallet","w","data","Array","isArray","err","_err$response","_err$response$data","response","message","loadRequests","_res$data2","getWithdrawals","list","_err$response2","_err$response2$data","validateForm","errors","isValid","trim","test","parseFloat","handleWithdrawalSubmit","payload","toUpperCase","_res$data3","requestWithdrawal","Promise","all","_err$response3","_err$response3$data","_err$response4","_err$response4$data","backendErrors","forEach","e","field","handleInputChange","name","value","target","prev","children","size","toFixed","onClick","length","t","i","date","Math","abs","_id","s","placeholder","onChange","disabled","req","requestDate","id","_c","$RefreshReg$"],"sources":["C:/Users/moazz/Desktop/frontend/src/components/dashboard/Wallet.jsx"],"sourcesContent":["// // import React, { useState, useEffect } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n// // import {\r\n// //   Clock,\r\n// //   CheckCircle,\r\n// //   X,\r\n// //   Wallet as WalletIcon,\r\n// //   IndianRupee,\r\n// // } from \"lucide-react\";\r\n// // import userWalletAPI from \"../../services/userWalletApi\";\r\n\r\n// // const EnhancedWallet = () => {\r\n// //   const { userId } = useParams();\r\n\r\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// //   const [loading, setLoading] = useState({\r\n// //     wallet: false,\r\n// //     withdrawals: false,\r\n// //     submit: false,\r\n// //   });\r\n// //   const [error, setError] = useState(\"\");\r\n// //   const [success, setSuccess] = useState(\"\");\r\n// //   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// //     bankName: \"\",\r\n// //     accountNumber: \"\",\r\n// //     ifscCode: \"\",\r\n// //     mobileNumber: \"\",\r\n// //     amount: \"\",\r\n// //   });\r\n// //   const [formErrors, setFormErrors] = useState({});\r\n\r\n// //   // ---------- helpers ----------\r\n// //   const formatDate = (dateString) => {\r\n// //     if (!dateString) return \"-\";\r\n// //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n// //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n// //   };\r\n\r\n// //   const getStatusIcon = (status) => {\r\n// //     switch (status) {\r\n// //       case \"Pending\":\r\n// //         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n// //       case \"Approved\":\r\n// //       case \"Completed\":\r\n// //         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n// //       case \"Rejected\":\r\n// //         return <X className=\"h-4 w-4 text-red-500\" />;\r\n// //       default:\r\n// //         return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n// //     }\r\n// //   };\r\n\r\n// //   const getStatusColor = (status) => {\r\n// //     switch (status) {\r\n// //       case \"Pending\":\r\n// //         return \"bg-yellow-100 text-yellow-700\";\r\n// //       case \"Approved\":\r\n// //       case \"Completed\":\r\n// //         return \"bg-green-100 text-green-700\";\r\n// //       case \"Rejected\":\r\n// //         return \"bg-red-100 text-red-700\";\r\n// //       default:\r\n// //         return \"bg-gray-100 text-gray-700\";\r\n// //     }\r\n// //   };\r\n\r\n// //   const prettyType = (t) => {\r\n// //     // backend types: 'bonus', 'deduct', 'withdrawal', 'refund'\r\n// //     const map = { bonus: \"Bonus\", deduct: \"Deduction\", withdrawal: \"Withdrawal\", refund: \"Refund\" };\r\n// //     return map[t] || t || \"Transaction\";\r\n// //   };\r\n\r\n// //   const amountClass = (amt) =>\r\n// //     Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\r\n\r\n// //   const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\r\n\r\n// //   // ---------- API calls ----------\r\n// //   const loadWallet = async () => {\r\n// //     if (!userId) return;\r\n// //     try {\r\n// //       setLoading((p) => ({ ...p, wallet: true }));\r\n// //       setError(\"\");\r\n// //       const res = await userWalletAPI.getWallet(userId);\r\n// //       // expect: { success, wallet: { balance, transactions } }\r\n// //       const w = res?.data?.wallet || res?.data || {}; // tolerate shapes\r\n// //       setWallet({\r\n// //         balance: Number(w.balance) || 0,\r\n// //         transactions: Array.isArray(w.transactions) ? w.transactions : [],\r\n// //       });\r\n// //     } catch (err) {\r\n// //       setError(\r\n// //         err?.response?.data?.message ||\r\n// //           err?.message ||\r\n// //           \"Failed to fetch wallet\"\r\n// //       );\r\n// //     } finally {\r\n// //       setLoading((p) => ({ ...p, wallet: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   const loadRequests = async () => {\r\n// //     if (!userId) return;\r\n// //     try {\r\n// //       setLoading((p) => ({ ...p, withdrawals: true }));\r\n// //       setError(\"\");\r\n// //       const res = await userWalletAPI.getWithdrawals(userId);\r\n// //       // expect: { success, withdrawalRequests: [...] }\r\n// //       const list =\r\n// //         res?.data?.withdrawalRequests ||\r\n// //         res?.data ||\r\n// //         [];\r\n// //       setWithdrawalRequests(Array.isArray(list) ? list : []);\r\n// //     } catch (err) {\r\n// //       setError(\r\n// //         err?.response?.data?.message ||\r\n// //           err?.message ||\r\n// //           \"Failed to fetch withdrawals\"\r\n// //       );\r\n// //     } finally {\r\n// //       setLoading((p) => ({ ...p, withdrawals: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (userId) {\r\n// //       loadWallet();\r\n// //       loadRequests();\r\n// //     }\r\n// //     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n// //   }, [userId]);\r\n\r\n// //   // ---------- validations ----------\r\n// //   const validateForm = () => {\r\n// //     const errors = {};\r\n// //     let isValid = true;\r\n\r\n// //     if (!withdrawalForm.bankName.trim()) {\r\n// //       errors.bankName = \"Bank name is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.accountNumber.trim() ||\r\n// //       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\r\n// //     ) {\r\n// //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.ifscCode.trim() ||\r\n// //       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\r\n// //     ) {\r\n// //       errors.ifscCode = \"Valid IFSC code is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.mobileNumber.trim() ||\r\n// //       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\r\n// //     ) {\r\n// //       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     const amt = parseFloat(withdrawalForm.amount);\r\n// //     if (!amt || amt < 1000) {\r\n// //       errors.amount = \"Minimum withdrawal amount is ₹1000\";\r\n// //       isValid = false;\r\n// //     } else if (amt > (Number(wallet.balance) || 0)) {\r\n// //       errors.amount = \"Insufficient balance\";\r\n// //       isValid = false;\r\n// //     }\r\n\r\n// //     setFormErrors(errors);\r\n// //     return isValid;\r\n// //   };\r\n\r\n// //   // ---------- submit ----------\r\n// //   const handleWithdrawalSubmit = async () => {\r\n// //     if (!validateForm()) return;\r\n\r\n// //     setLoading((p) => ({ ...p, submit: true }));\r\n// //     setError(\"\");\r\n// //     setSuccess(\"\");\r\n\r\n// //     try {\r\n// //       // backend expects POST /api/wallet/withdraw  with body { userId, amount, ... }\r\n// //       await userWalletAPI.requestWithdrawal({\r\n// //         userId,\r\n// //         ...withdrawalForm,\r\n// //         amount: Number(withdrawalForm.amount),\r\n// //       });\r\n\r\n// //       setSuccess(\"Withdrawal request submitted successfully!\");\r\n// //       setShowWithdrawForm(false);\r\n// //       setWithdrawalForm({\r\n// //         bankName: \"\",\r\n// //         accountNumber: \"\",\r\n// //         ifscCode: \"\",\r\n// //         mobileNumber: \"\",\r\n// //         amount: \"\",\r\n// //       });\r\n\r\n// //       await Promise.all([loadWallet(), loadRequests()]);\r\n// //     } catch (err) {\r\n// //       setError(\r\n// //         err?.response?.data?.message ||\r\n// //           err?.message ||\r\n// //           \"Withdrawal failed\"\r\n// //       );\r\n// //     } finally {\r\n// //       setLoading((p) => ({ ...p, submit: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleInputChange = (e) => {\r\n// //     const { name, value } = e.target;\r\n// //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n// //     if (formErrors[name]) {\r\n// //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n// //     }\r\n// //   };\r\n\r\n// //   // ---------- UI ----------\r\n// //   return (\r\n// //     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n// //       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n// //         <div>\r\n// //           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n// //           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n// //             <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\r\n// //           </p>\r\n// //         </div>\r\n// //         <WalletIcon size={50} className=\"opacity-70\" />\r\n// //       </div>\r\n\r\n// //       <div className=\"mt-6 flex gap-4 border-b\">\r\n// //         <button\r\n// //           onClick={() => setActiveTab(\"transactions\")}\r\n// //           className={`pb-2 px-4 ${\r\n// //             activeTab === \"transactions\"\r\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n// //               : \"text-gray-600\"\r\n// //           }`}\r\n// //         >\r\n// //           Transactions\r\n// //         </button>\r\n// //         <button\r\n// //           onClick={() => setActiveTab(\"withdrawals\")}\r\n// //           className={`pb-2 px-4 ${\r\n// //             activeTab === \"withdrawals\"\r\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n// //               : \"text-gray-600\"\r\n// //           }`}\r\n// //         >\r\n// //           Withdrawals\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {error && (\r\n// //         <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>\r\n// //       )}\r\n// //       {success && (\r\n// //         <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>\r\n// //       )}\r\n\r\n// //       {activeTab === \"transactions\" && (\r\n// //         <div className=\"mt-6 space-y-3\">\r\n// //           {loading.wallet ? (\r\n// //             <p className=\"text-gray-500 text-center\">Loading wallet…</p>\r\n// //           ) : wallet.transactions.length === 0 ? (\r\n// //             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n// //           ) : (\r\n// //             wallet.transactions.map((t, i) => (\r\n// //               <div\r\n// //                 key={t._id || i}\r\n// //                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n// //               >\r\n// //                 <div>\r\n// //                   <p className=\"font-medium\">{prettyType(t.type)}</p>\r\n// //                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n// //                 </div>\r\n// //                 <p className={`font-semibold ${amountClass(t.amount)}`}>\r\n// //                   {sign(t.amount)} ₹{Math.abs(Number(t.amount) || 0)}\r\n// //                 </p>\r\n// //               </div>\r\n// //             ))\r\n// //           )}\r\n// //         </div>\r\n// //       )}\r\n\r\n// //       {activeTab === \"withdrawals\" && (\r\n// //         <div className=\"mt-6 space-y-3\">\r\n// //           <button\r\n// //             onClick={() => setShowWithdrawForm((s) => !s)}\r\n// //             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n// //           >\r\n// //             {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\r\n// //           </button>\r\n\r\n// //           {showWithdrawForm && (\r\n// //             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n// //               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map(\r\n// //                 (field) => (\r\n// //                   <div key={field}>\r\n// //                     <input\r\n// //                       type={field === \"amount\" ? \"number\" : \"text\"}\r\n// //                       name={field}\r\n// //                       placeholder={\r\n// //                         field === \"bankName\"\r\n// //                           ? \"Bank Name\"\r\n// //                           : field === \"accountNumber\"\r\n// //                           ? \"Account Number\"\r\n// //                           : field === \"ifscCode\"\r\n// //                           ? \"IFSC Code\"\r\n// //                           : field === \"mobileNumber\"\r\n// //                           ? \"Mobile Number\"\r\n// //                           : \"Amount\"\r\n// //                       }\r\n// //                       value={withdrawalForm[field]}\r\n// //                       onChange={handleInputChange}\r\n// //                       className={`w-full border rounded-lg px-3 py-2 ${\r\n// //                         formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\r\n// //                       }`}\r\n// //                     />\r\n// //                     {formErrors[field] && (\r\n// //                       <p className=\"text-red-500 text-sm mt-1\">\r\n// //                         {formErrors[field]}\r\n// //                       </p>\r\n// //                     )}\r\n// //                   </div>\r\n// //                 )\r\n// //               )}\r\n// //               <button\r\n// //                 onClick={handleWithdrawalSubmit}\r\n// //                 disabled={loading.submit}\r\n// //                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n// //               >\r\n// //                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n// //               </button>\r\n// //             </div>\r\n// //           )}\r\n\r\n// //           <div className=\"space-y-3\">\r\n// //             {loading.withdrawals ? (\r\n// //               <p className=\"text-gray-500 text-center\">Loading withdrawals…</p>\r\n// //             ) : withdrawalRequests.length === 0 ? (\r\n// //               <p className=\"text-gray-500 text-center\">\r\n// //                 No withdrawal requests yet.\r\n// //               </p>\r\n// //             ) : (\r\n// //               withdrawalRequests.map((req, i) => (\r\n// //                 <div\r\n// //                   key={req.id || i}\r\n// //                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n// //                 >\r\n// //                   <div>\r\n// //                     <p className=\"font-medium\">₹{req.amount}</p>\r\n// //                     <p className=\"text-sm text-gray-500\">\r\n// //                       {formatDate(req.requestDate)}\r\n// //                     </p>\r\n// //                   </div>\r\n// //                   <span\r\n// //                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\r\n// //                       req.status\r\n// //                     )}`}\r\n// //                   >\r\n// //                     {getStatusIcon(req.status)}\r\n// //                     {req.status}\r\n// //                   </span>\r\n// //                 </div>\r\n// //               ))\r\n// //             )}\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EnhancedWallet;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import {\r\n//   Clock,\r\n//   CheckCircle,\r\n//   X,\r\n//   Wallet as WalletIcon,\r\n//   IndianRupee,\r\n// } from \"lucide-react\";\r\n// import userWalletAPI from \"../../services/userWalletApi\";\r\n\r\n// const EnhancedWallet = () => {\r\n//   const { userId } = useParams();\r\n\r\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n//   const [loading, setLoading] = useState({\r\n//     wallet: false,\r\n//     withdrawals: false,\r\n//     submit: false,\r\n//   });\r\n//   const [error, setError] = useState(\"\");\r\n//   const [success, setSuccess] = useState(\"\");\r\n//   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n//   const [withdrawalForm, setWithdrawalForm] = useState({\r\n//     bankName: \"\",\r\n//     accountNumber: \"\",\r\n//     ifscCode: \"\",\r\n//     mobileNumber: \"\",\r\n//     amount: \"\",\r\n//   });\r\n//   const [formErrors, setFormErrors] = useState({});\r\n\r\n//   // ---------- helpers ----------\r\n//   const formatDate = (dateString) => {\r\n//     if (!dateString) return \"-\";\r\n//     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n//     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n//   };\r\n\r\n//   const getStatusIcon = (status) => {\r\n//     switch (status) {\r\n//       case \"Pending\":\r\n//         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n//       case \"Approved\":\r\n//       case \"Completed\":\r\n//         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n//       case \"Rejected\":\r\n//         return <X className=\"h-4 w-4 text-red-500\" />;\r\n//       default:\r\n//         return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n//     }\r\n//   };\r\n\r\n//   const getStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case \"Pending\":\r\n//         return \"bg-yellow-100 text-yellow-700\";\r\n//       case \"Approved\":\r\n//       case \"Completed\":\r\n//         return \"bg-green-100 text-green-700\";\r\n//       case \"Rejected\":\r\n//         return \"bg-red-100 text-red-700\";\r\n//       default:\r\n//         return \"bg-gray-100 text-gray-700\";\r\n//     }\r\n//   };\r\n\r\n//   const prettyType = (t) => {\r\n//     const map = { bonus: \"Bonus\", deduct: \"Deduction\", withdrawal: \"Withdrawal\", refund: \"Refund\" };\r\n//     return map[t] || t || \"Transaction\";\r\n//   };\r\n\r\n//   const amountClass = (amt) =>\r\n//     Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\r\n\r\n//   const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\r\n\r\n//   // ---------- API calls ----------\r\n//   const loadWallet = async () => {\r\n//     if (!userId) return;\r\n//     try {\r\n//       setLoading((p) => ({ ...p, wallet: true }));\r\n//       setError(\"\");\r\n//       const res = await userWalletAPI.getWallet(userId);\r\n//       const w = res?.data?.wallet || res?.data || {};\r\n//       setWallet({\r\n//         balance: Number(w.balance) || 0,\r\n//         transactions: Array.isArray(w.transactions) ? w.transactions : [],\r\n//       });\r\n//     } catch (err) {\r\n//       setError(err?.response?.data?.message || err?.message || \"Failed to fetch wallet\");\r\n//     } finally {\r\n//       setLoading((p) => ({ ...p, wallet: false }));\r\n//     }\r\n//   };\r\n\r\n//   const loadRequests = async () => {\r\n//     if (!userId) return;\r\n//     try {\r\n//       setLoading((p) => ({ ...p, withdrawals: true }));\r\n//       setError(\"\");\r\n//       const res = await userWalletAPI.getWithdrawals(userId);\r\n//       const list = res?.data?.withdrawalRequests || res?.data || [];\r\n//       setWithdrawalRequests(Array.isArray(list) ? list : []);\r\n//     } catch (err) {\r\n//       setError(err?.response?.data?.message || err?.message || \"Failed to fetch withdrawals\");\r\n//     } finally {\r\n//       setLoading((p) => ({ ...p, withdrawals: false }));\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (userId) {\r\n//       loadWallet();\r\n//       loadRequests();\r\n//     }\r\n//   }, [userId]);\r\n\r\n//   // ---------- validations ----------\r\n//   const validateForm = () => {\r\n//     const errors = {};\r\n//     let isValid = true;\r\n\r\n//     if (!withdrawalForm.bankName.trim()) {\r\n//       errors.bankName = \"Bank name is required\";\r\n//       isValid = false;\r\n//     }\r\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n//       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n//       isValid = false;\r\n//     }\r\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n//       errors.ifscCode = \"Valid IFSC code is required\";\r\n//       isValid = false;\r\n//     }\r\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n//       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n//       isValid = false;\r\n//     }\r\n//     const amt = parseFloat(withdrawalForm.amount);\r\n//     if (!amt || amt < 1000) {\r\n//       errors.amount = \"Minimum withdrawal amount is ₹1000\";\r\n//       isValid = false;\r\n//     } else if (amt > (Number(wallet.balance) || 0)) {\r\n//       errors.amount = \"Insufficient balance\";\r\n//       isValid = false;\r\n//     }\r\n\r\n//     setFormErrors(errors);\r\n//     return isValid;\r\n//   };\r\n\r\n//   // ---------- submit ----------\r\n//   const handleWithdrawalSubmit = async () => {\r\n//     if (!validateForm()) return;\r\n\r\n//     setLoading((p) => ({ ...p, submit: true }));\r\n//     setError(\"\");\r\n//     setSuccess(\"\");\r\n\r\n//     // sanitize & structure payload to match backend\r\n//     const payload = {\r\n//       userId: userId.trim(),\r\n//       bankName: withdrawalForm.bankName.trim(),\r\n//       accountNumber: withdrawalForm.accountNumber.trim(),\r\n//       ifscCode: withdrawalForm.ifscCode.trim().toUpperCase(),\r\n//       mobileNumber: withdrawalForm.mobileNumber.trim(),\r\n//       amount: Number(withdrawalForm.amount),\r\n//     };\r\n\r\n//     console.log(\"Sending withdrawal request:\", payload);\r\n\r\n//     try {\r\n//       const res = await userWalletAPI.requestWithdrawal(payload);\r\n//       setSuccess(\"Withdrawal request submitted successfully!\");\r\n//       setShowWithdrawForm(false);\r\n//       setWithdrawalForm({\r\n//         bankName: \"\",\r\n//         accountNumber: \"\",\r\n//         ifscCode: \"\",\r\n//         mobileNumber: \"\",\r\n//         amount: \"\",\r\n//       });\r\n\r\n//       await Promise.all([loadWallet(), loadRequests()]);\r\n//     } catch (err) {\r\n//       console.error(\"❌ requestWithdrawal error:\", err.response?.data || err.message);\r\n//       if (err.response?.data?.errors) {\r\n//         setFormErrors(err.response.data.errors.reduce((acc, e) => ({ ...acc, [e.field]: e.message }), {}));\r\n//       }\r\n//       setError(err?.response?.data?.message || err?.message || \"Withdrawal failed\");\r\n//     } finally {\r\n//       setLoading((p) => ({ ...p, submit: false }));\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n//     if (formErrors[name]) {\r\n//       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n//     }\r\n//   };\r\n\r\n//   // ---------- UI ----------\r\n//   return (\r\n//     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n//       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n//         <div>\r\n//           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n//           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n//             <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\r\n//           </p>\r\n//         </div>\r\n//         <WalletIcon size={50} className=\"opacity-70\" />\r\n//       </div>\r\n\r\n//       <div className=\"mt-6 flex gap-4 border-b\">\r\n//         <button\r\n//           onClick={() => setActiveTab(\"transactions\")}\r\n//           className={`pb-2 px-4 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\r\n//         >\r\n//           Transactions\r\n//         </button>\r\n//         <button\r\n//           onClick={() => setActiveTab(\"withdrawals\")}\r\n//           className={`pb-2 px-4 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\r\n//         >\r\n//           Withdrawals\r\n//         </button>\r\n//       </div>\r\n\r\n//       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\r\n//       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\r\n\r\n//       {activeTab === \"transactions\" && (\r\n//         <div className=\"mt-6 space-y-3\">\r\n//           {loading.wallet ? (\r\n//             <p className=\"text-gray-500 text-center\">Loading wallet…</p>\r\n//           ) : wallet.transactions.length === 0 ? (\r\n//             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n//           ) : (\r\n//             wallet.transactions.map((t, i) => (\r\n//               <div key={t._id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\r\n//                 <div>\r\n//                   <p className=\"font-medium\">{prettyType(t.type)}</p>\r\n//                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n//                 </div>\r\n//                 <p className={`font-semibold ${amountClass(t.amount)}`}>\r\n//                   {sign(t.amount)} ₹{Math.abs(Number(t.amount) || 0)}\r\n//                 </p>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === \"withdrawals\" && (\r\n//         <div className=\"mt-6 space-y-3\">\r\n//           <button\r\n//             onClick={() => setShowWithdrawForm((s) => !s)}\r\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n//           >\r\n//             {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\r\n//           </button>\r\n\r\n//           {showWithdrawForm && (\r\n//             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n//               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\r\n//                 <div key={field}>\r\n//                   <input\r\n//                     type={field === \"amount\" ? \"number\" : \"text\"}\r\n//                     name={field}\r\n//                     placeholder={field === \"bankName\" ? \"Bank Name\" : field === \"accountNumber\" ? \"Account Number\" : field === \"ifscCode\" ? \"IFSC Code\" : field === \"mobileNumber\" ? \"Mobile Number\" : \"Amount\"}\r\n//                     value={withdrawalForm[field]}\r\n//                     onChange={handleInputChange}\r\n//                     className={`w-full border rounded-lg px-3 py-2 ${formErrors[field] ? \"border-red-500\" : \"border-gray-300\"}`}\r\n//                   />\r\n//                   {formErrors[field] && <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>}\r\n//                 </div>\r\n//               ))}\r\n//               <button\r\n//                 onClick={handleWithdrawalSubmit}\r\n//                 disabled={loading.submit}\r\n//                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n//               >\r\n//                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n\r\n//           <div className=\"space-y-3\">\r\n//             {loading.withdrawals ? (\r\n//               <p className=\"text-gray-500 text-center\">Loading withdrawals…</p>\r\n//             ) : withdrawalRequests.length === 0 ? (\r\n//               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\r\n//             ) : (\r\n//               withdrawalRequests.map((req, i) => (\r\n//                 <div key={req.id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\r\n//                   <div>\r\n//                     <p className=\"font-medium\">₹{req.amount}</p>\r\n//                     <p className=\"text-sm text-gray-500\">{formatDate(req.requestDate)}</p>\r\n//                   </div>\r\n//                   <span className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(req.status)}`}>\r\n//                     {getStatusIcon(req.status)}\r\n//                     {req.status}\r\n//                   </span>\r\n//                 </div>\r\n//               ))\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EnhancedWallet;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Clock,\r\n  CheckCircle,\r\n  X,\r\n  Wallet as WalletIcon,\r\n  IndianRupee,\r\n} from \"lucide-react\";\r\nimport userWalletAPI from \"../../services/userWalletApi\";\r\n\r\nconst EnhancedWallet = () => {\r\n  const { userId } = useParams();\r\n\r\n  const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n  const [loading, setLoading] = useState({\r\n    wallet: false,\r\n    withdrawals: false,\r\n    submit: false,\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n  const [withdrawalForm, setWithdrawalForm] = useState({\r\n    bankName: \"\",\r\n    accountNumber: \"\",\r\n    ifscCode: \"\",\r\n    mobileNumber: \"\",\r\n    amount: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  // ---------- helpers ----------\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return \"-\";\r\n    const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case \"Pending\":\r\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      case \"Approved\":\r\n      case \"Completed\":\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case \"Rejected\":\r\n        return <X className=\"h-4 w-4 text-red-500\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"Pending\":\r\n        return \"bg-yellow-100 text-yellow-700\";\r\n      case \"Approved\":\r\n      case \"Completed\":\r\n        return \"bg-green-100 text-green-700\";\r\n      case \"Rejected\":\r\n        return \"bg-red-100 text-red-700\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-700\";\r\n    }\r\n  };\r\n\r\n  const prettyType = (type) => {\r\n    const map = {\r\n      bonus: \"Bonus\",\r\n      deduct: \"Deduction\",\r\n      withdrawal: \"Withdrawal\",\r\n      refund: \"Refund\",\r\n    };\r\n    return map[type] || type || \"Transaction\";\r\n  };\r\n\r\n  const amountClass = (amt) => (Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\");\r\n  const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\r\n\r\n  // ---------- API calls ----------\r\n  const loadWallet = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      setLoading((p) => ({ ...p, wallet: true }));\r\n      setError(\"\");\r\n      const res = await userWalletAPI.getWallet(userId);\r\n      const w = res?.data?.wallet || res?.data || {};\r\n      setWallet({\r\n        balance: Number(w.balance) || 0,\r\n        transactions: Array.isArray(w.transactions) ? w.transactions : [],\r\n      });\r\n    } catch (err) {\r\n      setError(err?.response?.data?.message || err?.message || \"Failed to fetch wallet\");\r\n    } finally {\r\n      setLoading((p) => ({ ...p, wallet: false }));\r\n    }\r\n  };\r\n\r\n  const loadRequests = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      setLoading((p) => ({ ...p, withdrawals: true }));\r\n      setError(\"\");\r\n      const res = await userWalletAPI.getWithdrawals(userId);\r\n      const list = res?.data?.withdrawalRequests || res?.data || [];\r\n      setWithdrawalRequests(Array.isArray(list) ? list : []);\r\n    } catch (err) {\r\n      setError(err?.response?.data?.message || err?.message || \"Failed to fetch withdrawals\");\r\n    } finally {\r\n      setLoading((p) => ({ ...p, withdrawals: false }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      loadWallet();\r\n      loadRequests();\r\n    }\r\n  }, [userId]);\r\n\r\n  // ---------- validations ----------\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    let isValid = true;\r\n\r\n    if (!withdrawalForm.bankName.trim()) {\r\n      errors.bankName = \"Bank name is required\";\r\n      isValid = false;\r\n    }\r\n\r\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n      isValid = false;\r\n    }\r\n\r\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n      errors.ifscCode = \"Valid IFSC code is required\";\r\n      isValid = false;\r\n    }\r\n\r\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n      isValid = false;\r\n    }\r\n\r\n    const amt = parseFloat(withdrawalForm.amount);\r\n    if (!amt || amt < 1000) {\r\n      errors.amount = \"Minimum withdrawal amount is ₹1000\";\r\n      isValid = false;\r\n    } else if (amt > (Number(wallet.balance) || 0)) {\r\n      errors.amount = \"Insufficient balance\";\r\n      isValid = false;\r\n    }\r\n\r\n    setFormErrors(errors);\r\n    return isValid;\r\n  };\r\n\r\n  // ---------- submit ----------\r\n  const handleWithdrawalSubmit = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading((p) => ({ ...p, submit: true }));\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    const payload = {\r\n      userId: userId, // must match backend\r\n      bankName: withdrawalForm.bankName.trim(),\r\n      accountNumber: withdrawalForm.accountNumber.trim(),\r\n      ifscCode: withdrawalForm.ifscCode.trim().toUpperCase(),\r\n      mobileNumber: withdrawalForm.mobileNumber.trim(),\r\n      amount: Number(withdrawalForm.amount),\r\n    };\r\n\r\n    try {\r\n      const res = await userWalletAPI.requestWithdrawal(payload);\r\n      setSuccess(res?.data?.message || \"Withdrawal request submitted successfully!\");\r\n      setShowWithdrawForm(false);\r\n      setWithdrawalForm({ bankName: \"\", accountNumber: \"\", ifscCode: \"\", mobileNumber: \"\", amount: \"\" });\r\n      await Promise.all([loadWallet(), loadRequests()]);\r\n    } catch (err) {\r\n      if (err.response?.data?.errors) {\r\n        const backendErrors = {};\r\n        err.response.data.errors.forEach((e) => {\r\n          backendErrors[e.field] = e.message;\r\n        });\r\n        setFormErrors(backendErrors);\r\n      }\r\n      setError(err.response?.data?.message || err.message || \"Withdrawal failed\");\r\n    } finally {\r\n      setLoading((p) => ({ ...p, submit: false }));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n    if (formErrors[name]) setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n  };\r\n\r\n  // ---------- UI ----------\r\n  return (\r\n    <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n      <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n        <div>\r\n          <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n          <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n            <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\r\n          </p>\r\n        </div>\r\n        <WalletIcon size={50} className=\"opacity-70\" />\r\n      </div>\r\n\r\n      <div className=\"mt-6 flex gap-4 border-b\">\r\n        <button\r\n          onClick={() => setActiveTab(\"transactions\")}\r\n          className={`pb-2 px-4 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\r\n        >\r\n          Transactions\r\n        </button>\r\n        <button\r\n          onClick={() => setActiveTab(\"withdrawals\")}\r\n          className={`pb-2 px-4 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`}\r\n        >\r\n          Withdrawals\r\n        </button>\r\n      </div>\r\n\r\n      {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\r\n      {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\r\n\r\n      {activeTab === \"transactions\" && (\r\n        <div className=\"mt-6 space-y-3\">\r\n          {loading.wallet ? (\r\n            <p className=\"text-gray-500 text-center\">Loading wallet…</p>\r\n          ) : wallet.transactions.length === 0 ? (\r\n            <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n          ) : (\r\n            wallet.transactions.map((t, i) => (\r\n              <div key={t._id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\r\n                <div>\r\n                  <p className=\"font-medium\">{prettyType(t.type)}</p>\r\n                  <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n                </div>\r\n                <p className={`font-semibold ${amountClass(t.amount)}`}>\r\n                  {sign(t.amount)} ₹{Math.abs(Number(t.amount) || 0)}\r\n                </p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === \"withdrawals\" && (\r\n        <div className=\"mt-6 space-y-3\">\r\n          <button\r\n            onClick={() => setShowWithdrawForm((s) => !s)}\r\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n          >\r\n            {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\r\n          </button>\r\n\r\n          {showWithdrawForm && (\r\n            <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n              {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\r\n                <div key={field}>\r\n                  <input\r\n                    type={field === \"amount\" ? \"number\" : \"text\"}\r\n                    name={field}\r\n                    placeholder={\r\n                      field === \"bankName\"\r\n                        ? \"Bank Name\"\r\n                        : field === \"accountNumber\"\r\n                        ? \"Account Number\"\r\n                        : field === \"ifscCode\"\r\n                        ? \"IFSC Code\"\r\n                        : field === \"mobileNumber\"\r\n                        ? \"Mobile Number\"\r\n                        : \"Amount\"\r\n                    }\r\n                    value={withdrawalForm[field]}\r\n                    onChange={handleInputChange}\r\n                    className={`w-full border rounded-lg px-3 py-2 ${formErrors[field] ? \"border-red-500\" : \"border-gray-300\"}`}\r\n                  />\r\n                  {formErrors[field] && <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>}\r\n                </div>\r\n              ))}\r\n              <button\r\n                onClick={handleWithdrawalSubmit}\r\n                disabled={loading.submit}\r\n                className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n              >\r\n                {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"space-y-3\">\r\n            {loading.withdrawals ? (\r\n              <p className=\"text-gray-500 text-center\">Loading withdrawals…</p>\r\n            ) : withdrawalRequests.length === 0 ? (\r\n              <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\r\n            ) : (\r\n              withdrawalRequests.map((req, i) => (\r\n                <div key={req.id || i} className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\">\r\n                  <div>\r\n                    <p className=\"font-medium\">₹{req.amount}</p>\r\n                    <p className=\"text-sm text-gray-500\">{formatDate(req.requestDate)}</p>\r\n                  </div>\r\n                  <span className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(req.status)}`}>\r\n                    {getStatusIcon(req.status)}\r\n                    {req.status}\r\n                  </span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedWallet;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}