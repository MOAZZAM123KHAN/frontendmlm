{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moazz\\\\Desktop\\\\frontend\\\\frontend\\\\frontend\\\\src\\\\components\\\\dashboard\\\\Wallet.jsx\",\n  _s = $RefreshSig$();\n// // // // // // import React, { useState, useEffect, useCallback } from 'react';\n// // // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// // // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n// // // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// // // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// // // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// // // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// // // // // //   const [error, setError] = useState('');\n// // // // // //   const [success, setSuccess] = useState('');\n// // // // // //   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\n\n// // // // // //   // Withdrawal form state\n// // // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\n// // // // // //     bankName: '',\n// // // // // //     accountNumber: '',\n// // // // // //     ifscCode: '',\n// // // // // //     mobileNumber: '',\n// // // // // //     amount: ''\n// // // // // //   });\n\n// // // // // //   // Form validation state\n// // // // // //   const [formErrors, setFormErrors] = useState({\n// // // // // //     bankName: '',\n// // // // // //     accountNumber: '',\n// // // // // //     ifscCode: '',\n// // // // // //     mobileNumber: '',\n// // // // // //     amount: ''\n// // // // // //   });\n\n// // // // // //   // helper: parse JWT to extract userId if token contains it\n// // // // // //   const parseJwt = (token) => {\n// // // // // //     if (!token) return null;\n// // // // // //     try {\n// // // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\n// // // // // //       return payload.userId || payload.sub || null;\n// // // // // //     } catch (e) {\n// // // // // //       return null;\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   // Resolve token and userId (prop -> localStorage.authData -> token)\n// // // // // //   const resolvedToken = propUserToken\n// // // // // //     || localStorage.getItem('token')\n// // // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n// // // // // //     || '';\n\n// // // // // //   const resolvedUserId = propUserId\n// // // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n// // // // // //     || parseJwt(resolvedToken)\n// // // // // //     || null;\n\n// // // // // //   const userAuthHeaders = () => {\n// // // // // //     const token = resolvedToken;\n// // // // // //     return {\n// // // // // //       'Content-Type': 'application/json',\n// // // // // //       Authorization: token ? `Bearer ${token}` : '',\n// // // // // //     };\n// // // // // //   };\n\n// // // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// // // // // //   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\n// // // // // //   const fetchWalletData = useCallback(async () => {\n// // // // // //     if (!resolvedUserId) return;\n// // // // // //     try {\n// // // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // // //       const data = await res.json();\n// // // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n// // // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n// // // // // //     } catch (err) {\n// // // // // //       setError('Failed to fetch wallet data');\n// // // // // //     }\n// // // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // // //   const fetchWithdrawalHistory = useCallback(async () => {\n// // // // // //     if (!resolvedUserId) return;\n// // // // // //     try {\n// // // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // // //       const data = await res.json();\n// // // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n// // // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\n// // // // // //     } catch (err) {\n// // // // // //       setError('Failed to fetch withdrawal history');\n// // // // // //     }\n// // // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // // //   // Fetch data with error handling: skip requests if no userId/token\n// // // // // //   useEffect(() => {\n// // // // // //     const fetchData = async () => {\n// // // // // //       if (!resolvedUserId) {\n// // // // // //         setError('User not authenticated. Please login.');\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // // //         return;\n// // // // // //       }\n// // // // // //       if (!resolvedToken) {\n// // // // // //         setError('Missing auth token. Please login again.');\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // // //         return;\n// // // // // //       }\n\n// // // // // //       try {\n// // // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n// // // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // // //       } catch (err) {\n// // // // // //         setError('Failed to load wallet data. Please try again.');\n// // // // // //       } finally {\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // // //       }\n// // // // // //     };\n\n// // // // // //     fetchData();\n// // // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\n\n// // // // // //   const validateForm = () => {\n// // // // // //     const errors = {};\n// // // // // //     let isValid = true;\n\n// // // // // //     if (!withdrawalForm.bankName.trim()) {\n// // // // // //       errors.bankName = 'Bank name is required';\n// // // // // //       isValid = false;\n// // // // // //     }\n\n// // // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// // // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n// // // // // //       isValid = false;\n// // // // // //     }\n\n// // // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// // // // // //       errors.ifscCode = 'Valid IFSC code is required';\n// // // // // //       isValid = false;\n// // // // // //     }\n\n// // // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// // // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\n// // // // // //       isValid = false;\n// // // // // //     }\n\n// // // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// // // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n// // // // // //       isValid = false;\n// // // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// // // // // //       errors.amount = 'Insufficient balance';\n// // // // // //       isValid = false;\n// // // // // //     }\n\n// // // // // //     setFormErrors(errors);\n// // // // // //     return isValid;\n// // // // // //   };\n\n// // // // // //   const handleWithdrawalSubmit = async () => {\n// // // // // //     if (!validateForm()) return;\n\n// // // // // //     setLoading(prev => ({ ...prev, submit: true }));\n// // // // // //     setError('');\n// // // // // //     setSuccess('');\n\n// // // // // //     try {\n// // // // // //       const body = {\n// // // // // //         userId: userId,\n// // // // // //         amount: parseFloat(withdrawalForm.amount),\n// // // // // //         bankName: withdrawalForm.bankName,\n// // // // // //         accountNumber: withdrawalForm.accountNumber,\n// // // // // //         ifscCode: withdrawalForm.ifscCode,\n// // // // // //         mobileNumber: withdrawalForm.mobileNumber,\n// // // // // //       };\n\n// // // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n// // // // // //         method: 'POST',\n// // // // // //         headers: userAuthHeaders(),\n// // // // // //         body: JSON.stringify(body),\n// // // // // //       });\n// // // // // //       const data = await res.json();\n// // // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n// // // // // //       // refresh UI\n// // // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // // //       setSuccess('Withdrawal request submitted successfully!');\n// // // // // //       setShowWithdrawForm(false);\n// // // // // //       setLoading(prev => ({ ...prev, submit: false }));\n// // // // // //     } catch (err) {\n// // // // // //       setError('Failed to submit withdrawal request. Please try again.');\n// // // // // //     } finally {\n// // // // // //       setLoading(prev => ({ ...prev, submit: false }));\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const handleInputChange = (e) => {\n// // // // // //     const { name, value } = e.target;\n// // // // // //     setWithdrawalForm(prev => ({\n// // // // // //       ...prev,\n// // // // // //       [name]: value\n// // // // // //     }));\n\n// // // // // //     // Clear error when user starts typing\n// // // // // //     if (formErrors[name]) {\n// // // // // //       setFormErrors(prev => ({\n// // // // // //         ...prev,\n// // // // // //         [name]: ''\n// // // // // //       }));\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const getStatusIcon = (status) => {\n// // // // // //     switch (status) {\n// // // // // //       case 'Pending':\n// // // // // //         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// // // // // //       case 'Completed':\n// // // // // //         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// // // // // //       case 'Rejected':\n// // // // // //         return <X className=\"h-5 w-5 text-red-500\" />;\n// // // // // //       default:\n// // // // // //         return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const getStatusColor = (status) => {\n// // // // // //     switch (status) {\n// // // // // //       case 'Pending':\n// // // // // //         return 'text-yellow-600 bg-yellow-50';\n// // // // // //       case 'Completed':\n// // // // // //         return 'text-green-600 bg-green-50';\n// // // // // //       case 'Rejected':\n// // // // // //         return 'text-red-600 bg-red-50';\n// // // // // //       default:\n// // // // // //         return 'text-gray-600 bg-gray-50';\n// // // // // //     }\n// // // // // //   };\n\n// // // // // //   const formatDate = (dateString) => {\n// // // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n// // // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\n// // // // // //   };\n\n// // // // // //   return (\n// // // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// // // // // //       <div className=\"mb-6\">\n// // // // // //         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\n// // // // // //         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\n// // // // // //       </div>\n\n// // // // // //       {/* Notifications */}\n// // // // // //       {error && (\n// // // // // //         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\n// // // // // //           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n// // // // // //           <p className=\"text-red-600\">{error}</p>\n// // // // // //         </div>\n// // // // // //       )}\n\n// // // // // //       {success && (\n// // // // // //         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\n// // // // // //           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n// // // // // //           <p className=\"text-green-600\">{success}</p>\n// // // // // //         </div>\n// // // // // //       )}\n\n// // // // // //       {/* Balance Card */}\n// // // // // //       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\n// // // // // //         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n// // // // // //           <div>\n// // // // // //             <p className=\"text-blue-100 text-sm\">Available Balance</p>\n// // // // // //             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\n// // // // // //             <p className=\"text-blue-100 text-sm mt-2\">\n// // // // // //               {wallet.balance >= 1000 ? (\n// // // // // //                 'Eligible for withdrawal'\n// // // // // //               ) : (\n// // // // // //                 <>\n// // // // // //                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\n// // // // // //                 </>\n// // // // // //               )}\n// // // // // //             </p>\n// // // // // //           </div>\n// // // // // //           <div className=\"flex gap-3 w-full md:w-auto\">\n// // // // // //             <button\n// // // // // //               onClick={() => setShowWithdrawForm(true)}\n// // // // // //               disabled={wallet.balance < 1000}\n// // // // // //               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\n// // // // // //                 wallet.balance >= 1000\n// // // // // //                   ? 'bg-white text-blue-600 hover:bg-blue-50'\n// // // // // //                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n// // // // // //               }`}\n// // // // // //             >\n// // // // // //               <ArrowUp className=\"h-5 w-5\" />\n// // // // // //               <span>Withdraw</span>\n// // // // // //             </button>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       </div>\n\n// // // // // //       {/* Tabs */}\n// // // // // //       <div className=\"flex border-b border-gray-200 mb-6\">\n// // // // // //         <button\n// // // // // //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// // // // // //             activeTab === 'transactions'\n// // // // // //               ? 'border-blue-500 text-blue-600'\n// // // // // //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// // // // // //           }`}\n// // // // // //           onClick={() => setActiveTab('transactions')}\n// // // // // //         >\n// // // // // //           Transactions\n// // // // // //         </button>\n// // // // // //         <button\n// // // // // //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n// // // // // //             activeTab === 'withdrawals'\n// // // // // //               ? 'border-blue-500 text-blue-600'\n// // // // // //               : 'border-transparent text-gray-500 hover:text-gray-700'\n// // // // // //           }`}\n// // // // // //           onClick={() => setActiveTab('withdrawals')}\n// // // // // //         >\n// // // // // //           Withdrawals\n// // // // // //         </button>\n// // // // // //       </div>\n\n// // // // // //       {/* Content based on active tab */}\n// // // // // //       {activeTab === 'transactions' ? (\n// // // // // //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// // // // // //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// // // // // //             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\n// // // // // //             <div className=\"text-sm text-gray-500\">\n// // // // // //               {wallet.transactions.length} records\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //           <div className=\"max-h-[500px] overflow-y-auto\">\n// // // // // //             {loading.wallet ? (\n// // // // // //               <div className=\"p-8 text-center\">\n// // // // // //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// // // // // //                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\n// // // // // //               </div>\n// // // // // //             ) : wallet.transactions.length === 0 ? (\n// // // // // //               <div className=\"p-8 text-center text-gray-500\">\n// // // // // //                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// // // // // //                 <p>No transactions yet</p>\n// // // // // //               </div>\n// // // // // //             ) : (\n// // // // // //               <div className=\"divide-y divide-gray-200\">\n// // // // // //                 {wallet.transactions.map((txn) => (\n// // // // // //                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// // // // // //                     <div className=\"flex justify-between items-center\">\n// // // // // //                       <div className=\"flex items-center gap-4\">\n// // // // // //                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n// // // // // //                           {txn.amount > 0 ? (\n// // // // // //                             <Plus className=\"h-5 w-5 text-green-600\" />\n// // // // // //                           ) : (\n// // // // // //                             <Minus className=\"h-5 w-5 text-red-600\" />\n// // // // // //                           )}\n// // // // // //                         </div>\n// // // // // //                         <div>\n// // // // // //                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\n// // // // // //                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\n// // // // // //                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\n// // // // // //                         </div>\n// // // // // //                       </div>\n// // // // // //                       <div className=\"text-right\">\n// // // // // //                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n// // // // // //                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\n// // // // // //                         </p>\n// // // // // //                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\n// // // // // //                           {txn.status}\n// // // // // //                         </span>\n// // // // // //                       </div>\n// // // // // //                     </div>\n// // // // // //                   </div>\n// // // // // //                 ))}\n// // // // // //               </div>\n// // // // // //             )}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       ) : (\n// // // // // //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n// // // // // //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n// // // // // //             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\n// // // // // //             <div className=\"text-sm text-gray-500\">\n// // // // // //               {withdrawalRequests.length} requests\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //           <div className=\"max-h-[500px] overflow-y-auto\">\n// // // // // //             {loading.withdrawals ? (\n// // // // // //               <div className=\"p-8 text-center\">\n// // // // // //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n// // // // // //                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\n// // // // // //               </div>\n// // // // // //             ) : withdrawalRequests.length === 0 ? (\n// // // // // //               <div className=\"p-8 text-center text-gray-500\">\n// // // // // //                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n// // // // // //                 <p>No withdrawal requests yet</p>\n// // // // // //                 <button\n// // // // // //                   onClick={() => setShowWithdrawForm(true)}\n// // // // // //                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n// // // // // //                 >\n// // // // // //                   Make your first withdrawal\n// // // // // //                 </button>\n// // // // // //               </div>\n// // // // // //             ) : (\n// // // // // //               <div className=\"divide-y divide-gray-200\">\n// // // // // //                 {withdrawalRequests.map((request) => (\n// // // // // //                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n// // // // // //                     <div className=\"flex justify-between items-start\">\n// // // // // //                       <div className=\"flex items-start gap-3\">\n// // // // // //                         {getStatusIcon(request.status)}\n// // // // // //                         <div>\n// // // // // //                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\n// // // // // //                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\n// // // // // //                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\n// // // // // //                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\n// // // // // //                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\n// // // // // //                         </div>\n// // // // // //                       </div>\n// // // // // //                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\n// // // // // //                         {request.status}\n// // // // // //                       </span>\n// // // // // //                     </div>\n// // // // // //                   </div>\n// // // // // //                 ))}\n// // // // // //               </div>\n// // // // // //             )}\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       )}\n\n// // // // // //       {/* Withdrawal Form Modal */}\n// // // // // //       {showWithdrawForm && (\n// // // // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n// // // // // //           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n// // // // // //             <div className=\"p-6\">\n// // // // // //               <div className=\"flex justify-between items-center mb-4\">\n// // // // // //                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\n// // // // // //                 <button\n// // // // // //                   onClick={() => setShowWithdrawForm(false)}\n// // // // // //                   className=\"text-gray-400 hover:text-gray-600\"\n// // // // // //                   disabled={loading.submit}\n// // // // // //                 >\n// // // // // //                   <X className=\"h-6 w-6\" />\n// // // // // //                 </button>\n// // // // // //               </div>\n\n// // // // // //               <div className=\"space-y-4\">\n// // // // // //                 <div>\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// // // // // //                     Bank Name <span className=\"text-red-500\">*</span>\n// // // // // //                   </label>\n// // // // // //                   <input\n// // // // // //                     type=\"text\"\n// // // // // //                     name=\"bankName\"\n// // // // // //                     value={withdrawalForm.bankName}\n// // // // // //                     onChange={handleInputChange}\n// // // // // //                     required\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// // // // // //                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\n// // // // // //                     }`}\n// // // // // //                     placeholder=\"Enter bank name\"\n// // // // // //                     disabled={loading.submit}\n// // // // // //                   />\n// // // // // //                   {formErrors.bankName && (\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\n// // // // // //                   )}\n// // // // // //                 </div>\n\n// // // // // //                 <div>\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// // // // // //                     Account Number <span className=\"text-red-500\">*</span>\n// // // // // //                   </label>\n// // // // // //                   <input\n// // // // // //                     type=\"text\"\n// // // // // //                     name=\"accountNumber\"\n// // // // // //                     value={withdrawalForm.accountNumber}\n// // // // // //                     onChange={handleInputChange}\n// // // // // //                     required\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// // // // // //                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\n// // // // // //                     }`}\n// // // // // //                     placeholder=\"Enter account number\"\n// // // // // //                     disabled={loading.submit}\n// // // // // //                   />\n// // // // // //                   {formErrors.accountNumber && (\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\n// // // // // //                   )}\n// // // // // //                 </div>\n\n// // // // // //                 <div>\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// // // // // //                     IFSC Code <span className=\"text-red-500\">*</span>\n// // // // // //                   </label>\n// // // // // //                   <input\n// // // // // //                     type=\"text\"\n// // // // // //                     name=\"ifscCode\"\n// // // // // //                     value={withdrawalForm.ifscCode}\n// // // // // //                     onChange={handleInputChange}\n// // // // // //                     required\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// // // // // //                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\n// // // // // //                     }`}\n// // // // // //                     placeholder=\"Enter IFSC code\"\n// // // // // //                     disabled={loading.submit}\n// // // // // //                   />\n// // // // // //                   {formErrors.ifscCode && (\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\n// // // // // //                   )}\n// // // // // //                 </div>\n\n// // // // // //                 <div>\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// // // // // //                     Mobile Number <span className=\"text-red-500\">*</span>\n// // // // // //                   </label>\n// // // // // //                   <input\n// // // // // //                     type=\"tel\"\n// // // // // //                     name=\"mobileNumber\"\n// // // // // //                     value={withdrawalForm.mobileNumber}\n// // // // // //                     onChange={handleInputChange}\n// // // // // //                     required\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// // // // // //                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\n// // // // // //                     }`}\n// // // // // //                     placeholder=\"Enter mobile number\"\n// // // // // //                     disabled={loading.submit}\n// // // // // //                   />\n// // // // // //                   {formErrors.mobileNumber && (\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\n// // // // // //                   )}\n// // // // // //                 </div>\n\n// // // // // //                 <div>\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n// // // // // //                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\n// // // // // //                   </label>\n// // // // // //                   <input\n// // // // // //                     type=\"number\"\n// // // // // //                     name=\"amount\"\n// // // // // //                     value={withdrawalForm.amount}\n// // // // // //                     onChange={handleInputChange}\n// // // // // //                     required\n// // // // // //                     min=\"1000\"\n// // // // // //                     max={wallet.balance}\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n// // // // // //                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\n// // // // // //                     }`}\n// // // // // //                     placeholder=\"Minimum â‚¹1000\"\n// // // // // //                     disabled={loading.submit}\n// // // // // //                   />\n// // // // // //                   {formErrors.amount && (\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\n// // // // // //                   )}\n// // // // // //                   <p className=\"text-xs text-gray-500 mt-1\">\n// // // // // //                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\n// // // // // //                   </p>\n// // // // // //                 </div>\n\n// // // // // //                 <div className=\"flex gap-3 pt-4\">\n// // // // // //                   <button\n// // // // // //                     type=\"button\"\n// // // // // //                     onClick={() => setShowWithdrawForm(false)}\n// // // // // //                     disabled={loading.submit}\n// // // // // //                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\n// // // // // //                   >\n// // // // // //                     Cancel\n// // // // // //                   </button>\n// // // // // //                   <button\n// // // // // //                     type=\"button\"\n// // // // // //                     onClick={handleWithdrawalSubmit}\n// // // // // //                     disabled={loading.submit}\n// // // // // //                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n// // // // // //                   >\n// // // // // //                     {loading.submit ? (\n// // // // // //                       <>\n// // // // // //                         <Loader className=\"h-4 w-4 animate-spin\" />\n// // // // // //                         Processing...\n// // // // // //                       </>\n// // // // // //                     ) : (\n// // // // // //                       'Submit Request'\n// // // // // //                     )}\n// // // // // //                   </button>\n// // // // // //                 </div>\n// // // // // //               </div>\n// // // // // //             </div>\n// // // // // //           </div>\n// // // // // //         </div>\n// // // // // //       )}\n// // // // // //     </div>\n// // // // // //   );\n// // // // // // };\n\n// // // // // // export default EnhancedWallet;\n\n// // // // // import React, { useState, useEffect, useCallback } from 'react';\n// // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n// // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// // // // //   const [error, setError] = useState('');\n// // // // //   const [success, setSuccess] = useState('');\n// // // // //   const [activeTab, setActiveTab] = useState('transactions');\n\n// // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\n// // // // //     bankName: '',\n// // // // //     accountNumber: '',\n// // // // //     ifscCode: '',\n// // // // //     mobileNumber: '',\n// // // // //     amount: ''\n// // // // //   });\n\n// // // // //   const [formErrors, setFormErrors] = useState({\n// // // // //     bankName: '',\n// // // // //     accountNumber: '',\n// // // // //     ifscCode: '',\n// // // // //     mobileNumber: '',\n// // // // //     amount: ''\n// // // // //   });\n\n// // // // //   const parseJwt = (token) => {\n// // // // //     if (!token) return null;\n// // // // //     try {\n// // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\n// // // // //       return payload.userId || payload.sub || null;\n// // // // //     } catch {\n// // // // //       return null;\n// // // // //     }\n// // // // //   };\n\n// // // // //   const resolvedToken = propUserToken\n// // // // //     || localStorage.getItem('token')\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n// // // // //     || '';\n\n// // // // //   const resolvedUserId = propUserId\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n// // // // //     || parseJwt(resolvedToken)\n// // // // //     || null;\n\n// // // // //   const userAuthHeaders = () => {\n// // // // //     const token = resolvedToken;\n// // // // //     return {\n// // // // //       'Content-Type': 'application/json',\n// // // // //       Authorization: token ? `Bearer ${token}` : '',\n// // // // //     };\n// // // // //   };\n\n// // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// // // // //   const fetchWalletData = useCallback(async () => {\n// // // // //     if (!resolvedUserId) return;\n// // // // //     try {\n// // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // //       const data = await res.json();\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n// // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n// // // // //     } catch {\n// // // // //       setError('Failed to fetch wallet data');\n// // // // //     }\n// // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // //   const fetchWithdrawalHistory = useCallback(async () => {\n// // // // //     if (!resolvedUserId) return;\n// // // // //     try {\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // //       const data = await res.json();\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n// // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\n// // // // //     } catch {\n// // // // //       setError('Failed to fetch withdrawal history');\n// // // // //     }\n// // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // //   useEffect(() => {\n// // // // //     const fetchData = async () => {\n// // // // //       if (!resolvedUserId) {\n// // // // //         setError('User not authenticated. Please login.');\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //         return;\n// // // // //       }\n// // // // //       if (!resolvedToken) {\n// // // // //         setError('Missing auth token. Please login again.');\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //         return;\n// // // // //       }\n\n// // // // //       try {\n// // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n// // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // //       } catch {\n// // // // //         setError('Failed to load wallet data. Please try again.');\n// // // // //       } finally {\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //       }\n// // // // //     };\n\n// // // // //     fetchData();\n// // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n// // // // //   const validateForm = () => {\n// // // // //     const errors = {};\n// // // // //     let isValid = true;\n\n// // // // //     if (!withdrawalForm.bankName.trim()) {\n// // // // //       errors.bankName = 'Bank name is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// // // // //       errors.ifscCode = 'Valid IFSC code is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n// // // // //       isValid = false;\n// // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// // // // //       errors.amount = 'Insufficient balance';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     setFormErrors(errors);\n// // // // //     return isValid;\n// // // // //   };\n\n// // // // //   const handleWithdrawalSubmit = async () => {\n// // // // //     if (!validateForm()) return;\n\n// // // // //     setLoading(prev => ({ ...prev, submit: true }));\n// // // // //     setError('');\n// // // // //     setSuccess('');\n\n// // // // //     try {\n// // // // //       const body = {\n// // // // //         userId: resolvedUserId, // âœ… fixed here\n// // // // //         amount: parseFloat(withdrawalForm.amount),\n// // // // //         bankName: withdrawalForm.bankName,\n// // // // //         accountNumber: withdrawalForm.accountNumber,\n// // // // //         ifscCode: withdrawalForm.ifscCode,\n// // // // //         mobileNumber: withdrawalForm.mobileNumber,\n// // // // //       };\n\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n// // // // //         method: 'POST',\n// // // // //         headers: userAuthHeaders(),\n// // // // //         body: JSON.stringify(body),\n// // // // //       });\n// // // // //       const data = await res.json();\n// // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n// // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // //       setSuccess('Withdrawal request submitted successfully!');\n// // // // //       setShowWithdrawForm(false);\n// // // // //     } catch {\n// // // // //       setError('Failed to submit withdrawal request. Please try again.');\n// // // // //     } finally {\n// // // // //       setLoading(prev => ({ ...prev, submit: false }));\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleInputChange = (e) => {\n// // // // //     const { name, value } = e.target;\n// // // // //     setWithdrawalForm(prev => ({\n// // // // //       ...prev,\n// // // // //       [name]: value\n// // // // //     }));\n\n// // // // //     if (formErrors[name]) {\n// // // // //       setFormErrors(prev => ({\n// // // // //         ...prev,\n// // // // //         [name]: ''\n// // // // //       }));\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getStatusIcon = (status) => {\n// // // // //     switch (status) {\n// // // // //       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// // // // //       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// // // // //       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n// // // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getStatusColor = (status) => {\n// // // // //     switch (status) {\n// // // // //       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n// // // // //       case 'Completed': return 'text-green-600 bg-green-50';\n// // // // //       case 'Rejected': return 'text-red-600 bg-red-50';\n// // // // //       default: return 'text-gray-600 bg-gray-50';\n// // // // //     }\n// // // // //   };\n\n// // // // //   const formatDate = (dateString) => {\n// // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n// // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// // // // //       {/* UI code remains same â€” I kept all your JSX untouched */}\n// // // // //       {/* ... */}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // export default EnhancedWallet;\n\n// // // // // import React, { useState, useEffect, useCallback } from 'react';\n// // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n// // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// // // // //   const [error, setError] = useState('');\n// // // // //   const [success, setSuccess] = useState('');\n// // // // //   const [activeTab, setActiveTab] = useState('transactions');\n\n// // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\n// // // // //     bankName: '',\n// // // // //     accountNumber: '',\n// // // // //     ifscCode: '',\n// // // // //     mobileNumber: '',\n// // // // //     amount: ''\n// // // // //   });\n\n// // // // //   const [formErrors, setFormErrors] = useState({\n// // // // //     bankName: '',\n// // // // //     accountNumber: '',\n// // // // //     ifscCode: '',\n// // // // //     mobileNumber: '',\n// // // // //     amount: ''\n// // // // //   });\n\n// // // // //   const parseJwt = (token) => {\n// // // // //     if (!token) return null;\n// // // // //     try {\n// // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\n// // // // //       return payload.userId || payload.sub || null;\n// // // // //     } catch {\n// // // // //       return null;\n// // // // //     }\n// // // // //   };\n\n// // // // //   const resolvedToken = propUserToken\n// // // // //     || localStorage.getItem('token')\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n// // // // //     || '';\n\n// // // // //   const resolvedUserId = propUserId\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n// // // // //     || parseJwt(resolvedToken)\n// // // // //     || null;\n\n// // // // //   const userAuthHeaders = () => {\n// // // // //     const token = resolvedToken;\n// // // // //     return {\n// // // // //       'Content-Type': 'application/json',\n// // // // //       Authorization: token ? `Bearer ${token}` : '',\n// // // // //     };\n// // // // //   };\n\n// // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// // // // //   const fetchWalletData = useCallback(async () => {\n// // // // //     if (!resolvedUserId) return;\n// // // // //     try {\n// // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // //       const data = await res.json();\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n// // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n// // // // //     } catch {\n// // // // //       setError('Failed to fetch wallet data');\n// // // // //     }\n// // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // //   const fetchWithdrawalHistory = useCallback(async () => {\n// // // // //     if (!resolvedUserId) return;\n// // // // //     try {\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n// // // // //       const data = await res.json();\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n// // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\n// // // // //     } catch {\n// // // // //       setError('Failed to fetch withdrawal history');\n// // // // //     }\n// // // // //   }, [resolvedUserId, resolvedToken]);\n\n// // // // //   useEffect(() => {\n// // // // //     const fetchData = async () => {\n// // // // //       if (!resolvedUserId) {\n// // // // //         setError('User not authenticated. Please login.');\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //         return;\n// // // // //       }\n// // // // //       if (!resolvedToken) {\n// // // // //         setError('Missing auth token. Please login again.');\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //         return;\n// // // // //       }\n\n// // // // //       try {\n// // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n// // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // //       } catch {\n// // // // //         setError('Failed to load wallet data. Please try again.');\n// // // // //       } finally {\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n// // // // //       }\n// // // // //     };\n\n// // // // //     fetchData();\n// // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n// // // // //   const validateForm = () => {\n// // // // //     const errors = {};\n// // // // //     let isValid = true;\n\n// // // // //     if (!withdrawalForm.bankName.trim()) {\n// // // // //       errors.bankName = 'Bank name is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// // // // //       errors.ifscCode = 'Valid IFSC code is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n// // // // //       isValid = false;\n// // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// // // // //       errors.amount = 'Insufficient balance';\n// // // // //       isValid = false;\n// // // // //     }\n\n// // // // //     setFormErrors(errors);\n// // // // //     return isValid;\n// // // // //   };\n\n// // // // //   const handleWithdrawalSubmit = async () => {\n// // // // //     if (!validateForm()) return;\n\n// // // // //     setLoading(prev => ({ ...prev, submit: true }));\n// // // // //     setError('');\n// // // // //     setSuccess('');\n\n// // // // //     try {\n// // // // //       const body = {\n// // // // //         userId: resolvedUserId, // âœ… fixed here\n// // // // //         amount: parseFloat(withdrawalForm.amount),\n// // // // //         bankName: withdrawalForm.bankName,\n// // // // //         accountNumber: withdrawalForm.accountNumber,\n// // // // //         ifscCode: withdrawalForm.ifscCode,\n// // // // //         mobileNumber: withdrawalForm.mobileNumber,\n// // // // //       };\n\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n// // // // //         method: 'POST',\n// // // // //         headers: userAuthHeaders(),\n// // // // //         body: JSON.stringify(body),\n// // // // //       });\n// // // // //       const data = await res.json();\n// // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n// // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n// // // // //       setSuccess('Withdrawal request submitted successfully!');\n// // // // //       setShowWithdrawForm(false);\n// // // // //     } catch {\n// // // // //       setError('Failed to submit withdrawal request. Please try again.');\n// // // // //     } finally {\n// // // // //       setLoading(prev => ({ ...prev, submit: false }));\n// // // // //     }\n// // // // //   };\n\n// // // // //   const handleInputChange = (e) => {\n// // // // //     const { name, value } = e.target;\n// // // // //     setWithdrawalForm(prev => ({\n// // // // //       ...prev,\n// // // // //       [name]: value\n// // // // //     }));\n\n// // // // //     if (formErrors[name]) {\n// // // // //       setFormErrors(prev => ({\n// // // // //         ...prev,\n// // // // //         [name]: ''\n// // // // //       }));\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getStatusIcon = (status) => {\n// // // // //     switch (status) {\n// // // // //       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// // // // //       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// // // // //       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n// // // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// // // // //     }\n// // // // //   };\n\n// // // // //   const getStatusColor = (status) => {\n// // // // //     switch (status) {\n// // // // //       case 'Pending': return 'text-yellow-600 bg-yellow-50';\n// // // // //       case 'Completed': return 'text-green-600 bg-green-50';\n// // // // //       case 'Rejected': return 'text-red-600 bg-red-50';\n// // // // //       default: return 'text-gray-600 bg-gray-50';\n// // // // //     }\n// // // // //   };\n\n// // // // //   const formatDate = (dateString) => {\n// // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n// // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\n// // // // //   };\n\n// // // // //   return (\n// // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// // // // //       {/* Balance Card */}\n// // // // //       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\n// // // // //         <div>\n// // // // //           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\n// // // // //           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\n// // // // //         </div>\n// // // // //         <button\n// // // // //           onClick={() => setShowWithdrawForm(true)}\n// // // // //           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\n// // // // //         >\n// // // // //           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       {/* Tabs */}\n// // // // //       <div className=\"flex space-x-4 border-b mb-4\">\n// // // // //         <button\n// // // // //           onClick={() => setActiveTab('transactions')}\n// // // // //           className={`pb-2 ${activeTab === 'transactions' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n// // // // //         >\n// // // // //           Transactions\n// // // // //         </button>\n// // // // //         <button\n// // // // //           onClick={() => setActiveTab('withdrawals')}\n// // // // //           className={`pb-2 ${activeTab === 'withdrawals' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\n// // // // //         >\n// // // // //           Withdrawals\n// // // // //         </button>\n// // // // //       </div>\n\n// // // // //       {/* Error / Success Messages */}\n// // // // //       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\n// // // // //       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\n\n// // // // //       {/* Transactions Tab */}\n// // // // //       {activeTab === 'transactions' && (\n// // // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n// // // // //           {wallet.transactions.length > 0 ? (\n// // // // //             <ul>\n// // // // //               {wallet.transactions.map((txn, index) => (\n// // // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\n// // // // //                   <div className=\"flex items-center\">\n// // // // //                     {txn.type === 'credit' ? (\n// // // // //                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\n// // // // //                     ) : (\n// // // // //                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\n// // // // //                     )}\n// // // // //                     <span>{txn.description || txn.type}</span>\n// // // // //                   </div>\n// // // // //                   <div className=\"text-right\">\n// // // // //                     <p className={txn.type === 'credit' ? 'text-green-600' : 'text-red-600'}>\n// // // // //                       â‚¹{txn.amount}\n// // // // //                     </p>\n// // // // //                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\n// // // // //                   </div>\n// // // // //                 </li>\n// // // // //               ))}\n// // // // //             </ul>\n// // // // //           ) : (\n// // // // //             <p className=\"p-4 text-gray-500\">No transactions found.</p>\n// // // // //           )}\n// // // // //         </div>\n// // // // //       )}\n\n// // // // //       {/* Withdrawals Tab */}\n// // // // //       {activeTab === 'withdrawals' && (\n// // // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n// // // // //           {withdrawalRequests.length > 0 ? (\n// // // // //             <ul>\n// // // // //               {withdrawalRequests.map((req, index) => (\n// // // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\n// // // // //                   <div className=\"flex items-center\">\n// // // // //                     {getStatusIcon(req.status)}\n// // // // //                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\n// // // // //                   </div>\n// // // // //                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\n// // // // //                     {req.status}\n// // // // //                   </div>\n// // // // //                 </li>\n// // // // //               ))}\n// // // // //             </ul>\n// // // // //           ) : (\n// // // // //             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\n// // // // //           )}\n// // // // //         </div>\n// // // // //       )}\n\n// // // // //       {/* Withdraw Form Modal */}\n// // // // //       {showWithdrawForm && (\n// // // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n// // // // //           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n// // // // //             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\n// // // // //             {Object.keys(withdrawalForm).map((field) => (\n// // // // //               <div key={field} className=\"mb-3\">\n// // // // //                 <input\n// // // // //                   type={field === 'amount' ? 'number' : 'text'}\n// // // // //                   name={field}\n// // // // //                   value={withdrawalForm[field]}\n// // // // //                   onChange={handleInputChange}\n// // // // //                   placeholder={field.replace(/([A-Z])/g, ' $1')}\n// // // // //                   className=\"w-full border rounded p-2\"\n// // // // //                 />\n// // // // //                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\n// // // // //               </div>\n// // // // //             ))}\n// // // // //             <div className=\"flex justify-end space-x-2\">\n// // // // //               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\n// // // // //               <button\n// // // // //                 onClick={handleWithdrawalSubmit}\n// // // // //                 disabled={loading.submit}\n// // // // //                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n// // // // //               >\n// // // // //                 {loading.submit ? 'Submitting...' : 'Submit'}\n// // // // //               </button>\n// // // // //             </div>\n// // // // //           </div>\n// // // // //         </div>\n// // // // //       )}\n// // // // //     </div>\n// // // // //   );\n// // // // // };\n\n// // // // // export default EnhancedWallet;\n\n// // // // // import React, { useState, useEffect } from \"react\";\n\n// // // // // import { walletAPI } from \"../../services/api\";\n\n// // // // // const { getUserWallet, getUserWithdrawalRequests, requestWithdrawal } = walletAPI;\n\n// // // // // import {\n// // // // //   ArrowUp,\n// // // // //   Clock,\n// // // // //   CheckCircle,\n// // // // //   X,\n// // // // //   Plus,\n// // // // //   Minus,\n// // // // // } from \"lucide-react\";\n\n// // // // import React, { useState, useEffect } from \"react\";\n// // // // import {\n// // // //   ArrowUp,\n// // // //   Clock,\n// // // //   CheckCircle,\n// // // //   X,\n// // // //   Plus,\n// // // //   Minus,\n// // // // } from \"lucide-react\";\n// // // // // import { walletAPI } from \"../../services/api\";\n// // // // import userWalletAPI from \"../../services/userWalletApi\";\n\n// // // // const { getUserWallet, getUserWithdrawalRequests, requestWithdrawal } = walletAPI;\n\n// // // // const EnhancedWallet = () => {\n// // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// // // //   const [error, setError] = useState(\"\");\n// // // //   const [success, setSuccess] = useState(\"\");\n// // // //   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n// // // //   const [withdrawalForm, setWithdrawalForm] = useState({\n// // // //     bankName: \"\",\n// // // //     accountNumber: \"\",\n// // // //     ifscCode: \"\",\n// // // //     mobileNumber: \"\",\n// // // //     amount: \"\",\n// // // //   });\n\n// // // //   const [formErrors, setFormErrors] = useState({});\n\n// // // //   const userId = localStorage.getItem(\"userId\");\n\n// // // //   const loadWallet = async () => {\n// // // //     if (!userId) return;\n// // // //     try {\n// // // //       setLoading((prev) => ({ ...prev, wallet: true }));\n// // // //       const res = await getUserWallet(userId);\n// // // //       setWallet({\n// // // //         balance: res.data.balance || 0,\n// // // //         transactions: res.data.transactions || [],\n// // // //       });\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\n// // // //     } finally {\n// // // //       setLoading((prev) => ({ ...prev, wallet: false }));\n// // // //     }\n// // // //   };\n\n// // // //   const loadRequests = async () => {\n// // // //     if (!userId) return;\n// // // //     try {\n// // // //       setLoading((prev) => ({ ...prev, withdrawals: true }));\n// // // //       const res = await getUserWithdrawalRequests(userId);\n// // // //       setWithdrawalRequests(res.data || []);\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\n// // // //     } finally {\n// // // //       setLoading((prev) => ({ ...prev, withdrawals: false }));\n// // // //     }\n// // // //   };\n\n// // // //   useEffect(() => {\n// // // //     if (userId) {\n// // // //       loadWallet();\n// // // //       loadRequests();\n// // // //     }\n// // // //   }, [userId]);\n\n// // // //   const validateForm = () => {\n// // // //     const errors = {};\n// // // //     let isValid = true;\n\n// // // //     if (!withdrawalForm.bankName.trim()) {\n// // // //       errors.bankName = \"Bank name is required\";\n// // // //       isValid = false;\n// // // //     }\n// // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// // // //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n// // // //       isValid = false;\n// // // //     }\n// // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// // // //       errors.ifscCode = \"Valid IFSC code is required\";\n// // // //       isValid = false;\n// // // //     }\n// // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// // // //       errors.mobileNumber = \"Valid Indian mobile number is required\";\n// // // //       isValid = false;\n// // // //     }\n// // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// // // //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n// // // //       isValid = false;\n// // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// // // //       errors.amount = \"Insufficient balance\";\n// // // //       isValid = false;\n// // // //     }\n\n// // // //     setFormErrors(errors);\n// // // //     return isValid;\n// // // //   };\n\n// // // //   const handleWithdrawalSubmit = async () => {\n// // // //     if (!validateForm()) return;\n\n// // // //     setLoading((prev) => ({ ...prev, submit: true }));\n// // // //     setError(\"\");\n// // // //     setSuccess(\"\");\n\n// // // //     try {\n// // // //       await requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\n// // // //       setSuccess(\"Withdrawal request submitted successfully!\");\n// // // //       setShowWithdrawForm(false);\n// // // //       await Promise.all([loadWallet(), loadRequests()]);\n// // // //     } catch (err) {\n// // // //       setError(err.response?.data?.message || \"Withdrawal failed\");\n// // // //     } finally {\n// // // //       setLoading((prev) => ({ ...prev, submit: false }));\n// // // //     }\n// // // //   };\n\n// // // //   const handleInputChange = (e) => {\n// // // //     const { name, value } = e.target;\n// // // //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n// // // //     if (formErrors[name]) {\n// // // //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n// // // //     }\n// // // //   };\n\n// // // //   const getStatusIcon = (status) => {\n// // // //     switch (status) {\n// // // //       case \"Pending\": return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// // // //       case \"Completed\": return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// // // //       case \"Rejected\": return <X className=\"h-5 w-5 text-red-500\" />;\n// // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// // // //     }\n// // // //   };\n\n// // // //   const getStatusColor = (status) => {\n// // // //     switch (status) {\n// // // //       case \"Pending\": return \"text-yellow-600 bg-yellow-50\";\n// // // //       case \"Completed\": return \"text-green-600 bg-green-50\";\n// // // //       case \"Rejected\": return \"text-red-600 bg-red-50\";\n// // // //       default: return \"text-gray-600 bg-gray-50\";\n// // // //     }\n// // // //   };\n\n// // // //   const formatDate = (dateString) => {\n// // // //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n// // // //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n// // // //   };\n\n// // // //   return (\n// // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// // // //       {/* Balance Card */}\n// // // //       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\n// // // //         <div>\n// // // //           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\n// // // //           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\n// // // //         </div>\n// // // //         <button\n// // // //           onClick={() => setShowWithdrawForm(true)}\n// // // //           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\n// // // //         >\n// // // //           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\n// // // //         </button>\n// // // //       </div>\n\n// // // //       {/* Tabs */}\n// // // //       <div className=\"flex space-x-4 border-b mb-4\">\n// // // //         <button\n// // // //           onClick={() => setActiveTab(\"transactions\")}\n// // // //           className={`pb-2 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\n// // // //         >\n// // // //           Transactions\n// // // //         </button>\n// // // //         <button\n// // // //           onClick={() => setActiveTab(\"withdrawals\")}\n// // // //           className={`pb-2 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\n// // // //         >\n// // // //           Withdrawals\n// // // //         </button>\n// // // //       </div>\n\n// // // //       {/* Error / Success Messages */}\n// // // //       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\n// // // //       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\n\n// // // //       {/* Transactions Tab */}\n// // // //       {activeTab === \"transactions\" && (\n// // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n// // // //           {wallet.transactions.length > 0 ? (\n// // // //             <ul>\n// // // //               {wallet.transactions.map((txn, index) => (\n// // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\n// // // //                   <div className=\"flex items-center\">\n// // // //                     {txn.type === \"credit\" ? (\n// // // //                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\n// // // //                     ) : (\n// // // //                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\n// // // //                     )}\n// // // //                     <span>{txn.description || txn.type}</span>\n// // // //                   </div>\n// // // //                   <div className=\"text-right\">\n// // // //                     <p className={txn.type === \"credit\" ? \"text-green-600\" : \"text-red-600\"}>\n// // // //                       â‚¹{txn.amount}\n// // // //                     </p>\n// // // //                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\n// // // //                   </div>\n// // // //                 </li>\n// // // //               ))}\n// // // //             </ul>\n// // // //           ) : (\n// // // //             <p className=\"p-4 text-gray-500\">No transactions found.</p>\n// // // //           )}\n// // // //         </div>\n// // // //       )}\n\n// // // //       {/* Withdrawals Tab */}\n// // // //       {activeTab === \"withdrawals\" && (\n// // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n// // // //           {withdrawalRequests.length > 0 ? (\n// // // //             <ul>\n// // // //               {withdrawalRequests.map((req, index) => (\n// // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\n// // // //                   <div className=\"flex items-center\">\n// // // //                     {getStatusIcon(req.status)}\n// // // //                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\n// // // //                   </div>\n// // // //                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\n// // // //                     {req.status}\n// // // //                   </div>\n// // // //                 </li>\n// // // //               ))}\n// // // //             </ul>\n// // // //           ) : (\n// // // //             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\n// // // //           )}\n// // // //         </div>\n// // // //       )}\n\n// // // //       {/* Withdraw Form Modal */}\n// // // //       {showWithdrawForm && (\n// // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\n// // // //           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n// // // //             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\n// // // //             {Object.keys(withdrawalForm).map((field) => (\n// // // //               <div key={field} className=\"mb-3\">\n// // // //                 <input\n// // // //                   type={field === \"amount\" ? \"number\" : \"text\"}\n// // // //                   name={field}\n// // // //                   value={withdrawalForm[field]}\n// // // //                   onChange={handleInputChange}\n// // // //                   placeholder={field.replace(/([A-Z])/g, \" $1\")}\n// // // //                   className=\"w-full border rounded p-2\"\n// // // //                 />\n// // // //                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\n// // // //               </div>\n// // // //             ))}\n// // // //             <div className=\"flex justify-end space-x-2\">\n// // // //               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\n// // // //               <button\n// // // //                 onClick={handleWithdrawalSubmit}\n// // // //                 disabled={loading.submit}\n// // // //                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n// // // //               >\n// // // //                 {loading.submit ? \"Submitting...\" : \"Submit\"}\n// // // //               </button>\n// // // //             </div>\n// // // //           </div>\n// // // //         </div>\n// // // //       )}\n// // // //     </div>\n// // // //   );\n// // // // };\n\n// // // // export default EnhancedWallet;   \n\n// // // import React, { useState, useEffect } from \"react\";\n// // // import {\n// // //   ArrowUp,\n// // //   Clock,\n// // //   CheckCircle,\n// // //   X,\n// // //   Plus,\n// // //   Minus,\n// // // } from \"lucide-react\";\n// // // import userWalletAPI from \"../../services/userWalletApi\"; // âœ… updated import\n\n// // // const EnhancedWallet = () => {\n// // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n// // //   const [error, setError] = useState(\"\");\n// // //   const [success, setSuccess] = useState(\"\");\n// // //   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n// // //   const [withdrawalForm, setWithdrawalForm] = useState({\n// // //     bankName: \"\",\n// // //     accountNumber: \"\",\n// // //     ifscCode: \"\",\n// // //     mobileNumber: \"\",\n// // //     amount: \"\",\n// // //   });\n\n// // //   const [formErrors, setFormErrors] = useState({});\n\n// // //   const userId = localStorage.getItem(\"userId\");\n\n// // //   const loadWallet = async () => {\n// // //     if (!userId) return;\n// // //     try {\n// // //       setLoading((prev) => ({ ...prev, wallet: true }));\n// // //       const res = await userWalletAPI.getWallet(userId); // âœ… updated\n// // //       setWallet({\n// // //         balance: res.data.balance || 0,\n// // //         transactions: res.data.transactions || [],\n// // //       });\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\n// // //     } finally {\n// // //       setLoading((prev) => ({ ...prev, wallet: false }));\n// // //     }\n// // //   };\n\n// // //   const loadRequests = async () => {\n// // //     if (!userId) return;\n// // //     try {\n// // //       setLoading((prev) => ({ ...prev, withdrawals: true }));\n// // //       const res = await userWalletAPI.getWithdrawals(userId); // âœ… updated\n// // //       setWithdrawalRequests(res.data || []);\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\n// // //     } finally {\n// // //       setLoading((prev) => ({ ...prev, withdrawals: false }));\n// // //     }\n// // //   };\n\n// // //   useEffect(() => {\n// // //     if (userId) {\n// // //       loadWallet();\n// // //       loadRequests();\n// // //     }\n// // //   }, [userId]);\n\n// // //   const validateForm = () => {\n// // //     const errors = {};\n// // //     let isValid = true;\n\n// // //     if (!withdrawalForm.bankName.trim()) {\n// // //       errors.bankName = \"Bank name is required\";\n// // //       isValid = false;\n// // //     }\n// // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n// // //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n// // //       isValid = false;\n// // //     }\n// // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n// // //       errors.ifscCode = \"Valid IFSC code is required\";\n// // //       isValid = false;\n// // //     }\n// // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n// // //       errors.mobileNumber = \"Valid Indian mobile number is required\";\n// // //       isValid = false;\n// // //     }\n// // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// // //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n// // //       isValid = false;\n// // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// // //       errors.amount = \"Insufficient balance\";\n// // //       isValid = false;\n// // //     }\n\n// // //     setFormErrors(errors);\n// // //     return isValid;\n// // //   };\n\n// // //   const handleWithdrawalSubmit = async () => {\n// // //     if (!validateForm()) return;\n\n// // //     setLoading((prev) => ({ ...prev, submit: true }));\n// // //     setError(\"\");\n// // //     setSuccess(\"\");\n\n// // //     try {\n// // //       await userWalletAPI.requestWithdrawal( // âœ… updated\n// // //         userId,\n// // //         withdrawalForm.amount,\n// // //         withdrawalForm\n// // //       );\n// // //       setSuccess(\"Withdrawal request submitted successfully!\");\n// // //       setShowWithdrawForm(false);\n// // //       await Promise.all([loadWallet(), loadRequests()]);\n// // //     } catch (err) {\n// // //       setError(err.response?.data?.message || \"Withdrawal failed\");\n// // //     } finally {\n// // //       setLoading((prev) => ({ ...prev, submit: false }));\n// // //     }\n// // //   };\n\n// // //   const handleInputChange = (e) => {\n// // //     const { name, value } = e.target;\n// // //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n// // //     if (formErrors[name]) {\n// // //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n// // //     }\n// // //   };\n\n// // //   const getStatusIcon = (status) => {\n// // //     switch (status) {\n// // //       case \"Pending\": return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n// // //       case \"Completed\": return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n// // //       case \"Rejected\": return <X className=\"h-5 w-5 text-red-500\" />;\n// // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n// // //     }\n// // //   };\n\n// // //   const getStatusColor = (status) => {\n// // //     switch (status) {\n// // //       case \"Pending\": return \"text-yellow-600 bg-yellow-50\";\n// // //       case \"Completed\": return \"text-green-600 bg-green-50\";\n// // //       case \"Rejected\": return \"text-red-600 bg-red-50\";\n// // //       default: return \"text-gray-600 bg-gray-50\";\n// // //     }\n// // //   };\n\n// // //   const formatDate = (dateString) => {\n// // //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n// // //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n// // //   };\n\n// // //   return (\n// // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n// // //       {/* Wallet balance, tabs, forms, transactions, etc... */}\n// // //       {/* â€”â€”â€” Your existing JSX continues here â€”â€”â€” */}\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default EnhancedWallet;\n\n// // import React, { useState, useEffect } from \"react\";\n// // import { useParams } from \"react-router-dom\";\n// // import {\n// //   ArrowUp,\n// //   Clock,\n// //   CheckCircle,\n// //   X,\n// //   Plus,\n// //   Wallet as WalletIcon,\n// //   IndianRupee,\n// // } from \"lucide-react\";\n// // import userWalletAPI from \"../../services/userWalletApi\"; // âœ… API service\n\n// // const EnhancedWallet = () => {\n// //   const { userId } = useParams();\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n// //   const [loading, setLoading] = useState({\n// //     wallet: false,\n// //     withdrawals: false,\n// //     submit: false,\n// //   });\n// //   const [error, setError] = useState(\"\");\n// //   const [success, setSuccess] = useState(\"\");\n// //   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\n// //     bankName: \"\",\n// //     accountNumber: \"\",\n// //     ifscCode: \"\",\n// //     mobileNumber: \"\",\n// //     amount: \"\",\n// //   });\n\n// //   const [formErrors, setFormErrors] = useState({});\n\n// //   // ðŸ”¹ Fetch Wallet Balance\n// //   const loadWallet = async () => {\n// //     if (!userId) return;\n// //     try {\n// //       setLoading((prev) => ({ ...prev, wallet: true }));\n// //       const res = await userWalletAPI.getWallet(userId);\n// //       setWallet({\n// //         balance: res.data.balance || 0,\n// //         transactions: res.data.transactions || [],\n// //       });\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\n// //     } finally {\n// //       setLoading((prev) => ({ ...prev, wallet: false }));\n// //     }\n// //   };\n\n// //   // ðŸ”¹ Fetch Withdrawals\n// //   const loadRequests = async () => {\n// //     if (!userId) return;\n// //     try {\n// //       setLoading((prev) => ({ ...prev, withdrawals: true }));\n// //       const res = await userWalletAPI.getWithdrawals(userId);\n// //       setWithdrawalRequests(res.data || []);\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\n// //     } finally {\n// //       setLoading((prev) => ({ ...prev, withdrawals: false }));\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (userId) {\n// //       loadWallet();\n// //       loadRequests();\n// //     }\n// //   }, [userId]);\n\n// //   // ðŸ”¹ Form Validation\n// //   const validateForm = () => {\n// //     const errors = {};\n// //     let isValid = true;\n\n// //     if (!withdrawalForm.bankName.trim()) {\n// //       errors.bankName = \"Bank name is required\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.accountNumber.trim() ||\n// //       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\n// //     ) {\n// //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.ifscCode.trim() ||\n// //       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\n// //     ) {\n// //       errors.ifscCode = \"Valid IFSC code is required\";\n// //       isValid = false;\n// //     }\n// //     if (\n// //       !withdrawalForm.mobileNumber.trim() ||\n// //       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\n// //     ) {\n// //       errors.mobileNumber = \"Valid Indian mobile number is required\";\n// //       isValid = false;\n// //     }\n// //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n// //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n// //       isValid = false;\n// //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n// //       errors.amount = \"Insufficient balance\";\n// //       isValid = false;\n// //     }\n\n// //     setFormErrors(errors);\n// //     return isValid;\n// //   };\n\n// //   // ðŸ”¹ Withdrawal Submit\n// //   const handleWithdrawalSubmit = async () => {\n// //     if (!validateForm()) return;\n\n// //     setLoading((prev) => ({ ...prev, submit: true }));\n// //     setError(\"\");\n// //     setSuccess(\"\");\n\n// //     try {\n// //       await userWalletAPI.requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\n// //       setSuccess(\"Withdrawal request submitted successfully!\");\n// //       setShowWithdrawForm(false);\n// //       setWithdrawalForm({\n// //         bankName: \"\",\n// //         accountNumber: \"\",\n// //         ifscCode: \"\",\n// //         mobileNumber: \"\",\n// //         amount: \"\",\n// //       });\n// //       await Promise.all([loadWallet(), loadRequests()]);\n// //     } catch (err) {\n// //       setError(err.response?.data?.message || \"Withdrawal failed\");\n// //     } finally {\n// //       setLoading((prev) => ({ ...prev, submit: false }));\n// //     }\n// //   };\n\n// //   // ðŸ”¹ Input Change\n// //   const handleInputChange = (e) => {\n// //     const { name, value } = e.target;\n// //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n// //     if (formErrors[name]) {\n// //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n// //     }\n// //   };\n\n// //   // ðŸ”¹ Status UI\n// //   const getStatusIcon = (status) => {\n// //     switch (status) {\n// //       case \"Pending\":\n// //         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n// //       case \"Completed\":\n// //         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n// //       case \"Rejected\":\n// //         return <X className=\"h-4 w-4 text-red-500\" />;\n// //       default:\n// //         return <Clock className=\"h-4 w-4 text-gray-500\" />;\n// //     }\n// //   };\n\n// //   const getStatusColor = (status) => {\n// //     switch (status) {\n// //       case \"Pending\":\n// //         return \"bg-yellow-100 text-yellow-700\";\n// //       case \"Completed\":\n// //         return \"bg-green-100 text-green-700\";\n// //       case \"Rejected\":\n// //         return \"bg-red-100 text-red-700\";\n// //       default:\n// //         return \"bg-gray-100 text-gray-700\";\n// //     }\n// //   };\n\n// //   const formatDate = (dateString) => {\n// //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n// //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n// //   };\n\n// //   return (\n// //     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\n// //       {/* Wallet Balance */}\n// //       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\n// //         <div>\n// //           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\n// //           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\n// //             <IndianRupee size={24} /> {wallet.balance.toFixed(2)}\n// //           </p>\n// //         </div>\n// //         <WalletIcon size={50} className=\"opacity-70\" />\n// //       </div>\n\n// //       {/* Tabs */}\n// //       <div className=\"mt-6 flex gap-4 border-b\">\n// //         <button\n// //           onClick={() => setActiveTab(\"transactions\")}\n// //           className={`pb-2 px-4 ${\n// //             activeTab === \"transactions\"\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n// //               : \"text-gray-600\"\n// //           }`}\n// //         >\n// //           Transactions\n// //         </button>\n// //         <button\n// //           onClick={() => setActiveTab(\"withdrawals\")}\n// //           className={`pb-2 px-4 ${\n// //             activeTab === \"withdrawals\"\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n// //               : \"text-gray-600\"\n// //           }`}\n// //         >\n// //           Withdrawals\n// //         </button>\n// //       </div>\n\n// //       {/* Success / Error */}\n// //       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\n// //       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\n\n// //       {/* Transactions */}\n// //       {activeTab === \"transactions\" && (\n// //         <div className=\"mt-6 space-y-3\">\n// //           {wallet.transactions.length === 0 ? (\n// //             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\n// //           ) : (\n// //             wallet.transactions.map((t, i) => (\n// //               <div\n// //                 key={i}\n// //                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n// //               >\n// //                 <div>\n// //                   <p className=\"font-medium\">{t.type}</p>\n// //                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\n// //                 </div>\n// //                 <p\n// //                   className={`font-semibold ${\n// //                     t.type === \"Credit\" ? \"text-green-600\" : \"text-red-600\"\n// //                   }`}\n// //                 >\n// //                   {t.type === \"Credit\" ? \"+\" : \"-\"} â‚¹{t.amount}\n// //                 </p>\n// //               </div>\n// //             ))\n// //           )}\n// //         </div>\n// //       )}\n\n// //       {/* Withdrawals */}\n// //       {activeTab === \"withdrawals\" && (\n// //         <div className=\"mt-6 space-y-3\">\n// //           <button\n// //             onClick={() => setShowWithdrawForm(!showWithdrawForm)}\n// //             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\n// //           >\n// //             + New Withdrawal\n// //           </button>\n\n// //           {showWithdrawForm && (\n// //             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\n// //               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\n// //                 <div key={field}>\n// //                   <input\n// //                     type={field === \"amount\" ? \"number\" : \"text\"}\n// //                     name={field}\n// //                     placeholder={\n// //                       field === \"bankName\"\n// //                         ? \"Bank Name\"\n// //                         : field === \"accountNumber\"\n// //                         ? \"Account Number\"\n// //                         : field === \"ifscCode\"\n// //                         ? \"IFSC Code\"\n// //                         : field === \"mobileNumber\"\n// //                         ? \"Mobile Number\"\n// //                         : \"Amount\"\n// //                     }\n// //                     value={withdrawalForm[field]}\n// //                     onChange={handleInputChange}\n// //                     className={`w-full border rounded-lg px-3 py-2 ${\n// //                       formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\n// //                     }`}\n// //                   />\n// //                   {formErrors[field] && (\n// //                     <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>\n// //                   )}\n// //                 </div>\n// //               ))}\n// //               <button\n// //                 onClick={handleWithdrawalSubmit}\n// //                 disabled={loading.submit}\n// //                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n// //               >\n// //                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\n// //               </button>\n// //             </div>\n// //           )}\n\n// //           <div className=\"space-y-3\">\n// //             {withdrawalRequests.length === 0 ? (\n// //               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\n// //             ) : (\n// //               withdrawalRequests.map((req, i) => (\n// //                 <div\n// //                   key={i}\n// //                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n// //                 >\n// //                   <div>\n// //                     <p className=\"font-medium\">â‚¹{req.amount}</p>\n// //                     <p className=\"text-sm text-gray-500\">{formatDate(req.date)}</p>\n// //                   </div>\n// //                   <span\n// //                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\n// //                       req.status\n// //                     )}`}\n// //                   >\n// //                     {getStatusIcon(req.status)}\n// //                     {req.status}\n// //                   </span>\n// //                 </div>\n// //               ))\n// //             )}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // };\n\n// // export default EnhancedWallet;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import {\n//   ArrowUp,\n//   Clock,\n//   CheckCircle,\n//   X,\n//   Plus,\n//   Wallet as WalletIcon,\n//   IndianRupee,\n// } from \"lucide-react\";\n// import userWalletAPI from \"../../services/userWalletApi\";\n\n// const EnhancedWallet = () => {\n//   const { userId } = useParams();\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({\n//     wallet: false,\n//     withdrawals: false,\n//     submit: false,\n//   });\n//   const [error, setError] = useState(\"\");\n//   const [success, setSuccess] = useState(\"\");\n//   const [activeTab, setActiveTab] = useState(\"transactions\");\n\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: \"\",\n//     accountNumber: \"\",\n//     ifscCode: \"\",\n//     mobileNumber: \"\",\n//     amount: \"\",\n//   });\n\n//   const [formErrors, setFormErrors] = useState({});\n\n//   const loadWallet = async () => {\n//     if (!userId) return;\n//     try {\n//       setLoading((prev) => ({ ...prev, wallet: true }));\n//       const res = await userWalletAPI.getWallet(userId);\n//       setWallet({\n//         balance: res.data.balance || 0,\n//         transactions: res.data.transactions || [],\n//       });\n//     } catch (err) {\n//       setError(err.response?.data?.message || \"Failed to fetch wallet\");\n//     } finally {\n//       setLoading((prev) => ({ ...prev, wallet: false }));\n//     }\n//   };\n\n//   const loadRequests = async () => {\n//     if (!userId) return;\n//     try {\n//       setLoading((prev) => ({ ...prev, withdrawals: true }));\n//       const res = await userWalletAPI.getWithdrawals(userId);\n//       setWithdrawalRequests(res.data || []);\n//     } catch (err) {\n//       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\n//     } finally {\n//       setLoading((prev) => ({ ...prev, withdrawals: false }));\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (userId) {\n//       loadWallet();\n//       loadRequests();\n//     }\n//   }, [userId]);\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = \"Bank name is required\";\n//       isValid = false;\n//     }\n//     if (\n//       !withdrawalForm.accountNumber.trim() ||\n//       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\n//     ) {\n//       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n//       isValid = false;\n//     }\n//     if (\n//       !withdrawalForm.ifscCode.trim() ||\n//       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\n//     ) {\n//       errors.ifscCode = \"Valid IFSC code is required\";\n//       isValid = false;\n//     }\n//     if (\n//       !withdrawalForm.mobileNumber.trim() ||\n//       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\n//     ) {\n//       errors.mobileNumber = \"Valid Indian mobile number is required\";\n//       isValid = false;\n//     }\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = \"Insufficient balance\";\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading((prev) => ({ ...prev, submit: true }));\n//     setError(\"\");\n//     setSuccess(\"\");\n\n//     try {\n//       // âœ… Correct API call\n//       await userWalletAPI.requestWithdrawal(userId, withdrawalForm);\n//       setSuccess(\"Withdrawal request submitted successfully!\");\n//       setShowWithdrawForm(false);\n//       setWithdrawalForm({\n//         bankName: \"\",\n//         accountNumber: \"\",\n//         ifscCode: \"\",\n//         mobileNumber: \"\",\n//         amount: \"\",\n//       });\n//       await Promise.all([loadWallet(), loadRequests()]);\n//     } catch (err) {\n//       setError(err.response?.data?.message || \"Withdrawal failed\");\n//     } finally {\n//       setLoading((prev) => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\n//     if (formErrors[name]) {\n//       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case \"Pending\":\n//         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n//       case \"Completed\":\n//         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n//       case \"Rejected\":\n//         return <X className=\"h-4 w-4 text-red-500\" />;\n//       default:\n//         return <Clock className=\"h-4 w-4 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case \"Pending\":\n//         return \"bg-yellow-100 text-yellow-700\";\n//       case \"Completed\":\n//         return \"bg-green-100 text-green-700\";\n//       case \"Rejected\":\n//         return \"bg-red-100 text-red-700\";\n//       default:\n//         return \"bg-gray-100 text-gray-700\";\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\n//     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\n//       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\n//         <div>\n//           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\n//           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\n//             <IndianRupee size={24} /> {wallet.balance.toFixed(2)}\n//           </p>\n//         </div>\n//         <WalletIcon size={50} className=\"opacity-70\" />\n//       </div>\n\n//       <div className=\"mt-6 flex gap-4 border-b\">\n//         <button\n//           onClick={() => setActiveTab(\"transactions\")}\n//           className={`pb-2 px-4 ${\n//             activeTab === \"transactions\"\n//               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n//               : \"text-gray-600\"\n//           }`}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           onClick={() => setActiveTab(\"withdrawals\")}\n//           className={`pb-2 px-4 ${\n//             activeTab === \"withdrawals\"\n//               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\n//               : \"text-gray-600\"\n//           }`}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\n//       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\n\n//       {activeTab === \"transactions\" && (\n//         <div className=\"mt-6 space-y-3\">\n//           {wallet.transactions.length === 0 ? (\n//             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\n//           ) : (\n//             wallet.transactions.map((t, i) => (\n//               <div\n//                 key={i}\n//                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n//               >\n//                 <div>\n//                   <p className=\"font-medium\">{t.type}</p>\n//                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\n//                 </div>\n//                 <p\n//                   className={`font-semibold ${\n//                     t.type === \"Credit\" ? \"text-green-600\" : \"text-red-600\"\n//                   }`}\n//                 >\n//                   {t.type === \"Credit\" ? \"+\" : \"-\"} â‚¹{t.amount}\n//                 </p>\n//               </div>\n//             ))\n//           )}\n//         </div>\n//       )}\n\n//       {activeTab === \"withdrawals\" && (\n//         <div className=\"mt-6 space-y-3\">\n//           <button\n//             onClick={() => setShowWithdrawForm(!showWithdrawForm)}\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\n//           >\n//             + New Withdrawal\n//           </button>\n\n//           {showWithdrawForm && (\n//             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\n//               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\n//                 <div key={field}>\n//                   <input\n//                     type={field === \"amount\" ? \"number\" : \"text\"}\n//                     name={field}\n//                     placeholder={\n//                       field === \"bankName\"\n//                         ? \"Bank Name\"\n//                         : field === \"accountNumber\"\n//                         ? \"Account Number\"\n//                         : field === \"ifscCode\"\n//                         ? \"IFSC Code\"\n//                         : field === \"mobileNumber\"\n//                         ? \"Mobile Number\"\n//                         : \"Amount\"\n//                     }\n//                     value={withdrawalForm[field]}\n//                     onChange={handleInputChange}\n//                     className={`w-full border rounded-lg px-3 py-2 ${\n//                       formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\n//                     }`}\n//                   />\n//                   {formErrors[field] && (\n//                     <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>\n//                   )}\n//                 </div>\n//               ))}\n//               <button\n//                 onClick={handleWithdrawalSubmit}\n//                 disabled={loading.submit}\n//                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\n//               >\n//                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\n//               </button>\n//             </div>\n//           )}\n\n//           <div className=\"space-y-3\">\n//             {withdrawalRequests.length === 0 ? (\n//               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\n//             ) : (\n//               withdrawalRequests.map((req, i) => (\n//                 <div\n//                   key={i}\n//                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\n//                 >\n//                   <div>\n//                     <p className=\"font-medium\">â‚¹{req.amount}</p>\n//                     <p className=\"text-sm text-gray-500\">{formatDate(req.date)}</p>\n//                   </div>\n//                   <span\n//                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\n//                       req.status\n//                     )}`}\n//                   >\n//                     {getStatusIcon(req.status)}\n//                     {req.status}\n//                   </span>\n//                 </div>\n//               ))\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Clock, CheckCircle, X, Wallet as WalletIcon, IndianRupee } from \"lucide-react\";\nimport userWalletAPI from \"../../services/userWalletApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnhancedWallet = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [wallet, setWallet] = useState({\n    balance: 0,\n    transactions: []\n  });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({\n    wallet: false,\n    withdrawals: false,\n    submit: false\n  });\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"transactions\");\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: \"\",\n    accountNumber: \"\",\n    ifscCode: \"\",\n    mobileNumber: \"\",\n    amount: \"\"\n  });\n  const [formErrors, setFormErrors] = useState({});\n\n  // ---------- helpers ----------\n  const formatDate = dateString => {\n    if (!dateString) return \"-\";\n    const options = {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\"\n    };\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\n  };\n  const getStatusIcon = status => {\n    switch (status) {\n      case \"Pending\":\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-4 w-4 text-yellow-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2334,\n          columnNumber: 16\n        }, this);\n      case \"Approved\":\n      case \"Completed\":\n        return /*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"h-4 w-4 text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2337,\n          columnNumber: 16\n        }, this);\n      case \"Rejected\":\n        return /*#__PURE__*/_jsxDEV(X, {\n          className: \"h-4 w-4 text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2339,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-4 w-4 text-gray-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2341,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case \"Pending\":\n        return \"bg-yellow-100 text-yellow-700\";\n      case \"Approved\":\n      case \"Completed\":\n        return \"bg-green-100 text-green-700\";\n      case \"Rejected\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n  const prettyType = t => {\n    // backend types: 'bonus', 'deduct', 'withdrawal', 'refund'\n    const map = {\n      bonus: \"Bonus\",\n      deduct: \"Deduction\",\n      withdrawal: \"Withdrawal\",\n      refund: \"Refund\"\n    };\n    return map[t] || t || \"Transaction\";\n  };\n  const amountClass = amt => Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\n  const sign = amt => Number(amt) >= 0 ? \"+\" : \"-\";\n\n  // ---------- API calls ----------\n  const loadWallet = async () => {\n    if (!userId) return;\n    try {\n      var _res$data;\n      setLoading(p => ({\n        ...p,\n        wallet: true\n      }));\n      setError(\"\");\n      const res = await userWalletAPI.getWallet(userId);\n      // expect: { success, wallet: { balance, transactions } }\n      const w = (res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.wallet) || (res === null || res === void 0 ? void 0 : res.data) || {}; // tolerate shapes\n      setWallet({\n        balance: Number(w.balance) || 0,\n        transactions: Array.isArray(w.transactions) ? w.transactions : []\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch wallet\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        wallet: false\n      }));\n    }\n  };\n  const loadRequests = async () => {\n    if (!userId) return;\n    try {\n      var _res$data2;\n      setLoading(p => ({\n        ...p,\n        withdrawals: true\n      }));\n      setError(\"\");\n      const res = await userWalletAPI.getWithdrawals(userId);\n      // expect: { success, withdrawalRequests: [...] }\n      const list = (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.withdrawalRequests) || (res === null || res === void 0 ? void 0 : res.data) || [];\n      setWithdrawalRequests(Array.isArray(list) ? list : []);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError((err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch withdrawals\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        withdrawals: false\n      }));\n    }\n  };\n  useEffect(() => {\n    if (userId) {\n      loadWallet();\n      loadRequests();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userId]);\n\n  // ---------- validations ----------\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = \"Bank name is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\n      isValid = false;\n    }\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = \"Valid IFSC code is required\";\n      isValid = false;\n    }\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\n      isValid = false;\n    }\n    const amt = parseFloat(withdrawalForm.amount);\n    if (!amt || amt < 1000) {\n      errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\n      isValid = false;\n    } else if (amt > (Number(wallet.balance) || 0)) {\n      errors.amount = \"Insufficient balance\";\n      isValid = false;\n    }\n    setFormErrors(errors);\n    return isValid;\n  };\n\n  // ---------- submit ----------\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(p => ({\n      ...p,\n      submit: true\n    }));\n    setError(\"\");\n    setSuccess(\"\");\n    try {\n      // backend expects POST /api/wallet/withdraw  with body { userId, amount, ... }\n      await userWalletAPI.requestWithdrawal({\n        userId,\n        ...withdrawalForm,\n        amount: Number(withdrawalForm.amount)\n      });\n      setSuccess(\"Withdrawal request submitted successfully!\");\n      setShowWithdrawForm(false);\n      setWithdrawalForm({\n        bankName: \"\",\n        accountNumber: \"\",\n        ifscCode: \"\",\n        mobileNumber: \"\",\n        amount: \"\"\n      });\n      await Promise.all([loadWallet(), loadRequests()]);\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError((err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Withdrawal failed\");\n    } finally {\n      setLoading(p => ({\n        ...p,\n        submit: false\n      }));\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWithdrawalForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: \"\"\n      }));\n    }\n  };\n\n  // ---------- UI ----------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 md:p-6 max-w-5xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold\",\n          children: \"Wallet Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold flex items-center gap-2 mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(IndianRupee, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2521,\n            columnNumber: 13\n          }, this), \" \", (Number(wallet.balance) || 0).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WalletIcon, {\n        size: 50,\n        className: \"opacity-70\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2524,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 flex gap-4 border-b\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"transactions\"),\n        className: `pb-2 px-4 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setActiveTab(\"withdrawals\"),\n        className: `pb-2 px-4 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 font-semibold text-blue-600\" : \"text-gray-600\"}`,\n        children: \"Withdrawals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2538,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2527,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-red-600 bg-red-50 p-2 rounded\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2551,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-green-600 bg-green-50 p-2 rounded\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2554,\n      columnNumber: 9\n    }, this), activeTab === \"transactions\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 space-y-3\",\n      children: loading.wallet ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"Loading wallet\\u2026\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2560,\n        columnNumber: 13\n      }, this) : wallet.transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"No transactions yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2562,\n        columnNumber: 13\n      }, this) : wallet.transactions.map((t, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-medium\",\n            children: prettyType(t.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2570,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-500\",\n            children: formatDate(t.date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2571,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2569,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `font-semibold ${amountClass(t.amount)}`,\n          children: [sign(t.amount), \" \\u20B9\", Math.abs(Number(t.amount) || 0)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2573,\n          columnNumber: 17\n        }, this)]\n      }, t._id || i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2565,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2558,\n      columnNumber: 9\n    }, this), activeTab === \"withdrawals\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 space-y-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowWithdrawForm(s => !s),\n        className: \"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\",\n        children: showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2584,\n        columnNumber: 11\n      }, this), showWithdrawForm && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 bg-white shadow rounded-xl p-4 space-y-4\",\n        children: [[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === \"amount\" ? \"number\" : \"text\",\n            name: field,\n            placeholder: field === \"bankName\" ? \"Bank Name\" : field === \"accountNumber\" ? \"Account Number\" : field === \"ifscCode\" ? \"IFSC Code\" : field === \"mobileNumber\" ? \"Mobile Number\" : \"Amount\",\n            value: withdrawalForm[field],\n            onChange: handleInputChange,\n            className: `w-full border rounded-lg px-3 py-2 ${formErrors[field] ? \"border-red-500\" : \"border-gray-300\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2596,\n            columnNumber: 21\n          }, this), formErrors[field] && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-red-500 text-sm mt-1\",\n            children: formErrors[field]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2617,\n            columnNumber: 23\n          }, this)]\n        }, field, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2595,\n          columnNumber: 19\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleWithdrawalSubmit,\n          disabled: loading.submit,\n          className: \"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\",\n          children: loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2624,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2592,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: loading.withdrawals ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center\",\n          children: \"Loading withdrawals\\u2026\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2636,\n          columnNumber: 15\n        }, this) : withdrawalRequests.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-500 text-center\",\n          children: \"No withdrawal requests yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2638,\n          columnNumber: 15\n        }, this) : withdrawalRequests.map((req, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-medium\",\n              children: [\"\\u20B9\", req.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2648,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-500\",\n              children: formatDate(req.requestDate)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2649,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2647,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(req.status)}`,\n            children: [getStatusIcon(req.status), req.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2653,\n            columnNumber: 19\n          }, this)]\n        }, req.id || i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2643,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2634,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2583,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 2516,\n    columnNumber: 5\n  }, this);\n};\n_s(EnhancedWallet, \"aA5HnanZ9fYVMLqaGVRp9ijZJGc=\", false, function () {\n  return [useParams];\n});\n_c = EnhancedWallet;\nexport default EnhancedWallet;\nvar _c;\n$RefreshReg$(_c, \"EnhancedWallet\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Clock","CheckCircle","X","Wallet","WalletIcon","IndianRupee","userWalletAPI","jsxDEV","_jsxDEV","EnhancedWallet","_s","userId","wallet","setWallet","balance","transactions","withdrawalRequests","setWithdrawalRequests","showWithdrawForm","setShowWithdrawForm","loading","setLoading","withdrawals","submit","error","setError","success","setSuccess","activeTab","setActiveTab","withdrawalForm","setWithdrawalForm","bankName","accountNumber","ifscCode","mobileNumber","amount","formErrors","setFormErrors","formatDate","dateString","options","day","month","year","Date","toLocaleDateString","getStatusIcon","status","className","fileName","_jsxFileName","lineNumber","columnNumber","getStatusColor","prettyType","t","map","bonus","deduct","withdrawal","refund","amountClass","amt","Number","sign","loadWallet","_res$data","p","res","getWallet","w","data","Array","isArray","err","_err$response","_err$response$data","response","message","loadRequests","_res$data2","getWithdrawals","list","_err$response2","_err$response2$data","validateForm","errors","isValid","trim","test","parseFloat","handleWithdrawalSubmit","requestWithdrawal","Promise","all","_err$response3","_err$response3$data","handleInputChange","e","name","value","target","prev","children","size","toFixed","onClick","length","i","type","date","Math","abs","_id","s","field","placeholder","onChange","disabled","req","requestDate","id","_c","$RefreshReg$"],"sources":["C:/Users/moazz/Desktop/frontend/frontend/frontend/src/components/dashboard/Wallet.jsx"],"sourcesContent":["// // // // // // import React, { useState, useEffect, useCallback } from 'react';\r\n// // // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\r\n\r\n// // // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\r\n// // // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// // // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// // // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// // // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\r\n// // // // // //   const [error, setError] = useState('');\r\n// // // // // //   const [success, setSuccess] = useState('');\r\n// // // // // //   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\r\n\r\n// // // // // //   // Withdrawal form state\r\n// // // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// // // // // //     bankName: '',\r\n// // // // // //     accountNumber: '',\r\n// // // // // //     ifscCode: '',\r\n// // // // // //     mobileNumber: '',\r\n// // // // // //     amount: ''\r\n// // // // // //   });\r\n\r\n// // // // // //   // Form validation state\r\n// // // // // //   const [formErrors, setFormErrors] = useState({\r\n// // // // // //     bankName: '',\r\n// // // // // //     accountNumber: '',\r\n// // // // // //     ifscCode: '',\r\n// // // // // //     mobileNumber: '',\r\n// // // // // //     amount: ''\r\n// // // // // //   });\r\n\r\n// // // // // //   // helper: parse JWT to extract userId if token contains it\r\n// // // // // //   const parseJwt = (token) => {\r\n// // // // // //     if (!token) return null;\r\n// // // // // //     try {\r\n// // // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\r\n// // // // // //       return payload.userId || payload.sub || null;\r\n// // // // // //     } catch (e) {\r\n// // // // // //       return null;\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   // Resolve token and userId (prop -> localStorage.authData -> token)\r\n// // // // // //   const resolvedToken = propUserToken\r\n// // // // // //     || localStorage.getItem('token')\r\n// // // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\r\n// // // // // //     || '';\r\n\r\n// // // // // //   const resolvedUserId = propUserId\r\n// // // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\r\n// // // // // //     || parseJwt(resolvedToken)\r\n// // // // // //     || null;\r\n\r\n// // // // // //   const userAuthHeaders = () => {\r\n// // // // // //     const token = resolvedToken;\r\n// // // // // //     return {\r\n// // // // // //       'Content-Type': 'application/json',\r\n// // // // // //       Authorization: token ? `Bearer ${token}` : '',\r\n// // // // // //     };\r\n// // // // // //   };\r\n\r\n// // // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\n// // // // // //   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\r\n// // // // // //   const fetchWalletData = useCallback(async () => {\r\n// // // // // //     if (!resolvedUserId) return;\r\n// // // // // //     try {\r\n// // // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // // //       const data = await res.json();\r\n// // // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\r\n// // // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\r\n// // // // // //     } catch (err) {\r\n// // // // // //       setError('Failed to fetch wallet data');\r\n// // // // // //     }\r\n// // // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // // //   const fetchWithdrawalHistory = useCallback(async () => {\r\n// // // // // //     if (!resolvedUserId) return;\r\n// // // // // //     try {\r\n// // // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // // //       const data = await res.json();\r\n// // // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\r\n// // // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\r\n// // // // // //     } catch (err) {\r\n// // // // // //       setError('Failed to fetch withdrawal history');\r\n// // // // // //     }\r\n// // // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // // //   // Fetch data with error handling: skip requests if no userId/token\r\n// // // // // //   useEffect(() => {\r\n// // // // // //     const fetchData = async () => {\r\n// // // // // //       if (!resolvedUserId) {\r\n// // // // // //         setError('User not authenticated. Please login.');\r\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // // //         return;\r\n// // // // // //       }\r\n// // // // // //       if (!resolvedToken) {\r\n// // // // // //         setError('Missing auth token. Please login again.');\r\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // // //         return;\r\n// // // // // //       }\r\n\r\n// // // // // //       try {\r\n// // // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\r\n// // // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // // //       } catch (err) {\r\n// // // // // //         setError('Failed to load wallet data. Please try again.');\r\n// // // // // //       } finally {\r\n// // // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // // //       }\r\n// // // // // //     };\r\n\r\n// // // // // //     fetchData();\r\n// // // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\r\n\r\n// // // // // //   const validateForm = () => {\r\n// // // // // //     const errors = {};\r\n// // // // // //     let isValid = true;\r\n\r\n// // // // // //     if (!withdrawalForm.bankName.trim()) {\r\n// // // // // //       errors.bankName = 'Bank name is required';\r\n// // // // // //       isValid = false;\r\n// // // // // //     }\r\n\r\n// // // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n// // // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\r\n// // // // // //       isValid = false;\r\n// // // // // //     }\r\n\r\n// // // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n// // // // // //       errors.ifscCode = 'Valid IFSC code is required';\r\n// // // // // //       isValid = false;\r\n// // // // // //     }\r\n\r\n// // // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n// // // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\r\n// // // // // //       isValid = false;\r\n// // // // // //     }\r\n\r\n// // // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// // // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\r\n// // // // // //       isValid = false;\r\n// // // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// // // // // //       errors.amount = 'Insufficient balance';\r\n// // // // // //       isValid = false;\r\n// // // // // //     }\r\n\r\n// // // // // //     setFormErrors(errors);\r\n// // // // // //     return isValid;\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleWithdrawalSubmit = async () => {\r\n// // // // // //     if (!validateForm()) return;\r\n\r\n// // // // // //     setLoading(prev => ({ ...prev, submit: true }));\r\n// // // // // //     setError('');\r\n// // // // // //     setSuccess('');\r\n\r\n// // // // // //     try {\r\n// // // // // //       const body = {\r\n// // // // // //         userId: userId,\r\n// // // // // //         amount: parseFloat(withdrawalForm.amount),\r\n// // // // // //         bankName: withdrawalForm.bankName,\r\n// // // // // //         accountNumber: withdrawalForm.accountNumber,\r\n// // // // // //         ifscCode: withdrawalForm.ifscCode,\r\n// // // // // //         mobileNumber: withdrawalForm.mobileNumber,\r\n// // // // // //       };\r\n\r\n// // // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\r\n// // // // // //         method: 'POST',\r\n// // // // // //         headers: userAuthHeaders(),\r\n// // // // // //         body: JSON.stringify(body),\r\n// // // // // //       });\r\n// // // // // //       const data = await res.json();\r\n// // // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\r\n\r\n// // // // // //       // refresh UI\r\n// // // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // // //       setSuccess('Withdrawal request submitted successfully!');\r\n// // // // // //       setShowWithdrawForm(false);\r\n// // // // // //       setLoading(prev => ({ ...prev, submit: false }));\r\n// // // // // //     } catch (err) {\r\n// // // // // //       setError('Failed to submit withdrawal request. Please try again.');\r\n// // // // // //     } finally {\r\n// // // // // //       setLoading(prev => ({ ...prev, submit: false }));\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const handleInputChange = (e) => {\r\n// // // // // //     const { name, value } = e.target;\r\n// // // // // //     setWithdrawalForm(prev => ({\r\n// // // // // //       ...prev,\r\n// // // // // //       [name]: value\r\n// // // // // //     }));\r\n    \r\n// // // // // //     // Clear error when user starts typing\r\n// // // // // //     if (formErrors[name]) {\r\n// // // // // //       setFormErrors(prev => ({\r\n// // // // // //         ...prev,\r\n// // // // // //         [name]: ''\r\n// // // // // //       }));\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const getStatusIcon = (status) => {\r\n// // // // // //     switch (status) {\r\n// // // // // //       case 'Pending':\r\n// // // // // //         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\r\n// // // // // //       case 'Completed':\r\n// // // // // //         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n// // // // // //       case 'Rejected':\r\n// // // // // //         return <X className=\"h-5 w-5 text-red-500\" />;\r\n// // // // // //       default:\r\n// // // // // //         return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const getStatusColor = (status) => {\r\n// // // // // //     switch (status) {\r\n// // // // // //       case 'Pending':\r\n// // // // // //         return 'text-yellow-600 bg-yellow-50';\r\n// // // // // //       case 'Completed':\r\n// // // // // //         return 'text-green-600 bg-green-50';\r\n// // // // // //       case 'Rejected':\r\n// // // // // //         return 'text-red-600 bg-red-50';\r\n// // // // // //       default:\r\n// // // // // //         return 'text-gray-600 bg-gray-50';\r\n// // // // // //     }\r\n// // // // // //   };\r\n\r\n// // // // // //   const formatDate = (dateString) => {\r\n// // // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\r\n// // // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\r\n// // // // // //   };\r\n\r\n// // // // // //   return (\r\n// // // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\r\n// // // // // //       <div className=\"mb-6\">\r\n// // // // // //         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\r\n// // // // // //         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\r\n// // // // // //       </div>\r\n\r\n// // // // // //       {/* Notifications */}\r\n// // // // // //       {error && (\r\n// // // // // //         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\r\n// // // // // //           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\r\n// // // // // //           <p className=\"text-red-600\">{error}</p>\r\n// // // // // //         </div>\r\n// // // // // //       )}\r\n\r\n// // // // // //       {success && (\r\n// // // // // //         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\r\n// // // // // //           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\r\n// // // // // //           <p className=\"text-green-600\">{success}</p>\r\n// // // // // //         </div>\r\n// // // // // //       )}\r\n\r\n// // // // // //       {/* Balance Card */}\r\n// // // // // //       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\r\n// // // // // //         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\r\n// // // // // //           <div>\r\n// // // // // //             <p className=\"text-blue-100 text-sm\">Available Balance</p>\r\n// // // // // //             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\r\n// // // // // //             <p className=\"text-blue-100 text-sm mt-2\">\r\n// // // // // //               {wallet.balance >= 1000 ? (\r\n// // // // // //                 'Eligible for withdrawal'\r\n// // // // // //               ) : (\r\n// // // // // //                 <>\r\n// // // // // //                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\r\n// // // // // //                 </>\r\n// // // // // //               )}\r\n// // // // // //             </p>\r\n// // // // // //           </div>\r\n// // // // // //           <div className=\"flex gap-3 w-full md:w-auto\">\r\n// // // // // //             <button\r\n// // // // // //               onClick={() => setShowWithdrawForm(true)}\r\n// // // // // //               disabled={wallet.balance < 1000}\r\n// // // // // //               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\r\n// // // // // //                 wallet.balance >= 1000\r\n// // // // // //                   ? 'bg-white text-blue-600 hover:bg-blue-50'\r\n// // // // // //                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\r\n// // // // // //               }`}\r\n// // // // // //             >\r\n// // // // // //               <ArrowUp className=\"h-5 w-5\" />\r\n// // // // // //               <span>Withdraw</span>\r\n// // // // // //             </button>\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       </div>\r\n\r\n// // // // // //       {/* Tabs */}\r\n// // // // // //       <div className=\"flex border-b border-gray-200 mb-6\">\r\n// // // // // //         <button\r\n// // // // // //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\r\n// // // // // //             activeTab === 'transactions'\r\n// // // // // //               ? 'border-blue-500 text-blue-600'\r\n// // // // // //               : 'border-transparent text-gray-500 hover:text-gray-700'\r\n// // // // // //           }`}\r\n// // // // // //           onClick={() => setActiveTab('transactions')}\r\n// // // // // //         >\r\n// // // // // //           Transactions\r\n// // // // // //         </button>\r\n// // // // // //         <button\r\n// // // // // //           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\r\n// // // // // //             activeTab === 'withdrawals'\r\n// // // // // //               ? 'border-blue-500 text-blue-600'\r\n// // // // // //               : 'border-transparent text-gray-500 hover:text-gray-700'\r\n// // // // // //           }`}\r\n// // // // // //           onClick={() => setActiveTab('withdrawals')}\r\n// // // // // //         >\r\n// // // // // //           Withdrawals\r\n// // // // // //         </button>\r\n// // // // // //       </div>\r\n\r\n// // // // // //       {/* Content based on active tab */}\r\n// // // // // //       {activeTab === 'transactions' ? (\r\n// // // // // //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\r\n// // // // // //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\r\n// // // // // //             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\r\n// // // // // //             <div className=\"text-sm text-gray-500\">\r\n// // // // // //               {wallet.transactions.length} records\r\n// // // // // //             </div>\r\n// // // // // //           </div>\r\n// // // // // //           <div className=\"max-h-[500px] overflow-y-auto\">\r\n// // // // // //             {loading.wallet ? (\r\n// // // // // //               <div className=\"p-8 text-center\">\r\n// // // // // //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\r\n// // // // // //                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\r\n// // // // // //               </div>\r\n// // // // // //             ) : wallet.transactions.length === 0 ? (\r\n// // // // // //               <div className=\"p-8 text-center text-gray-500\">\r\n// // // // // //                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n// // // // // //                 <p>No transactions yet</p>\r\n// // // // // //               </div>\r\n// // // // // //             ) : (\r\n// // // // // //               <div className=\"divide-y divide-gray-200\">\r\n// // // // // //                 {wallet.transactions.map((txn) => (\r\n// // // // // //                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\r\n// // // // // //                     <div className=\"flex justify-between items-center\">\r\n// // // // // //                       <div className=\"flex items-center gap-4\">\r\n// // // // // //                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\r\n// // // // // //                           {txn.amount > 0 ? (\r\n// // // // // //                             <Plus className=\"h-5 w-5 text-green-600\" />\r\n// // // // // //                           ) : (\r\n// // // // // //                             <Minus className=\"h-5 w-5 text-red-600\" />\r\n// // // // // //                           )}\r\n// // // // // //                         </div>\r\n// // // // // //                         <div>\r\n// // // // // //                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\r\n// // // // // //                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\r\n// // // // // //                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\r\n// // // // // //                         </div>\r\n// // // // // //                       </div>\r\n// // // // // //                       <div className=\"text-right\">\r\n// // // // // //                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\r\n// // // // // //                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\r\n// // // // // //                         </p>\r\n// // // // // //                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\r\n// // // // // //                           {txn.status}\r\n// // // // // //                         </span>\r\n// // // // // //                       </div>\r\n// // // // // //                     </div>\r\n// // // // // //                   </div>\r\n// // // // // //                 ))}\r\n// // // // // //               </div>\r\n// // // // // //             )}\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       ) : (\r\n// // // // // //         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\r\n// // // // // //           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\r\n// // // // // //             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\r\n// // // // // //             <div className=\"text-sm text-gray-500\">\r\n// // // // // //               {withdrawalRequests.length} requests\r\n// // // // // //             </div>\r\n// // // // // //           </div>\r\n// // // // // //           <div className=\"max-h-[500px] overflow-y-auto\">\r\n// // // // // //             {loading.withdrawals ? (\r\n// // // // // //               <div className=\"p-8 text-center\">\r\n// // // // // //                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\r\n// // // // // //                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\r\n// // // // // //               </div>\r\n// // // // // //             ) : withdrawalRequests.length === 0 ? (\r\n// // // // // //               <div className=\"p-8 text-center text-gray-500\">\r\n// // // // // //                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\r\n// // // // // //                 <p>No withdrawal requests yet</p>\r\n// // // // // //                 <button\r\n// // // // // //                   onClick={() => setShowWithdrawForm(true)}\r\n// // // // // //                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n// // // // // //                 >\r\n// // // // // //                   Make your first withdrawal\r\n// // // // // //                 </button>\r\n// // // // // //               </div>\r\n// // // // // //             ) : (\r\n// // // // // //               <div className=\"divide-y divide-gray-200\">\r\n// // // // // //                 {withdrawalRequests.map((request) => (\r\n// // // // // //                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\r\n// // // // // //                     <div className=\"flex justify-between items-start\">\r\n// // // // // //                       <div className=\"flex items-start gap-3\">\r\n// // // // // //                         {getStatusIcon(request.status)}\r\n// // // // // //                         <div>\r\n// // // // // //                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\r\n// // // // // //                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\r\n// // // // // //                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\r\n// // // // // //                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\r\n// // // // // //                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\r\n// // // // // //                         </div>\r\n// // // // // //                       </div>\r\n// // // // // //                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\r\n// // // // // //                         {request.status}\r\n// // // // // //                       </span>\r\n// // // // // //                     </div>\r\n// // // // // //                   </div>\r\n// // // // // //                 ))}\r\n// // // // // //               </div>\r\n// // // // // //             )}\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       )}\r\n\r\n// // // // // //       {/* Withdrawal Form Modal */}\r\n// // // // // //       {showWithdrawForm && (\r\n// // // // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n// // // // // //           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\r\n// // // // // //             <div className=\"p-6\">\r\n// // // // // //               <div className=\"flex justify-between items-center mb-4\">\r\n// // // // // //                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\r\n// // // // // //                 <button\r\n// // // // // //                   onClick={() => setShowWithdrawForm(false)}\r\n// // // // // //                   className=\"text-gray-400 hover:text-gray-600\"\r\n// // // // // //                   disabled={loading.submit}\r\n// // // // // //                 >\r\n// // // // // //                   <X className=\"h-6 w-6\" />\r\n// // // // // //                 </button>\r\n// // // // // //               </div>\r\n\r\n// // // // // //               <div className=\"space-y-4\">\r\n// // // // // //                 <div>\r\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n// // // // // //                     Bank Name <span className=\"text-red-500\">*</span>\r\n// // // // // //                   </label>\r\n// // // // // //                   <input\r\n// // // // // //                     type=\"text\"\r\n// // // // // //                     name=\"bankName\"\r\n// // // // // //                     value={withdrawalForm.bankName}\r\n// // // // // //                     onChange={handleInputChange}\r\n// // // // // //                     required\r\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n// // // // // //                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\r\n// // // // // //                     }`}\r\n// // // // // //                     placeholder=\"Enter bank name\"\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                   />\r\n// // // // // //                   {formErrors.bankName && (\r\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\r\n// // // // // //                   )}\r\n// // // // // //                 </div>\r\n\r\n// // // // // //                 <div>\r\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n// // // // // //                     Account Number <span className=\"text-red-500\">*</span>\r\n// // // // // //                   </label>\r\n// // // // // //                   <input\r\n// // // // // //                     type=\"text\"\r\n// // // // // //                     name=\"accountNumber\"\r\n// // // // // //                     value={withdrawalForm.accountNumber}\r\n// // // // // //                     onChange={handleInputChange}\r\n// // // // // //                     required\r\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n// // // // // //                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\r\n// // // // // //                     }`}\r\n// // // // // //                     placeholder=\"Enter account number\"\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                   />\r\n// // // // // //                   {formErrors.accountNumber && (\r\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\r\n// // // // // //                   )}\r\n// // // // // //                 </div>\r\n\r\n// // // // // //                 <div>\r\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n// // // // // //                     IFSC Code <span className=\"text-red-500\">*</span>\r\n// // // // // //                   </label>\r\n// // // // // //                   <input\r\n// // // // // //                     type=\"text\"\r\n// // // // // //                     name=\"ifscCode\"\r\n// // // // // //                     value={withdrawalForm.ifscCode}\r\n// // // // // //                     onChange={handleInputChange}\r\n// // // // // //                     required\r\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n// // // // // //                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\r\n// // // // // //                     }`}\r\n// // // // // //                     placeholder=\"Enter IFSC code\"\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                   />\r\n// // // // // //                   {formErrors.ifscCode && (\r\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\r\n// // // // // //                   )}\r\n// // // // // //                 </div>\r\n\r\n// // // // // //                 <div>\r\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n// // // // // //                     Mobile Number <span className=\"text-red-500\">*</span>\r\n// // // // // //                   </label>\r\n// // // // // //                   <input\r\n// // // // // //                     type=\"tel\"\r\n// // // // // //                     name=\"mobileNumber\"\r\n// // // // // //                     value={withdrawalForm.mobileNumber}\r\n// // // // // //                     onChange={handleInputChange}\r\n// // // // // //                     required\r\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n// // // // // //                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\r\n// // // // // //                     }`}\r\n// // // // // //                     placeholder=\"Enter mobile number\"\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                   />\r\n// // // // // //                   {formErrors.mobileNumber && (\r\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\r\n// // // // // //                   )}\r\n// // // // // //                 </div>\r\n\r\n// // // // // //                 <div>\r\n// // // // // //                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n// // // // // //                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\r\n// // // // // //                   </label>\r\n// // // // // //                   <input\r\n// // // // // //                     type=\"number\"\r\n// // // // // //                     name=\"amount\"\r\n// // // // // //                     value={withdrawalForm.amount}\r\n// // // // // //                     onChange={handleInputChange}\r\n// // // // // //                     required\r\n// // // // // //                     min=\"1000\"\r\n// // // // // //                     max={wallet.balance}\r\n// // // // // //                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\r\n// // // // // //                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\r\n// // // // // //                     }`}\r\n// // // // // //                     placeholder=\"Minimum â‚¹1000\"\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                   />\r\n// // // // // //                   {formErrors.amount && (\r\n// // // // // //                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\r\n// // // // // //                   )}\r\n// // // // // //                   <p className=\"text-xs text-gray-500 mt-1\">\r\n// // // // // //                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\r\n// // // // // //                   </p>\r\n// // // // // //                 </div>\r\n\r\n// // // // // //                 <div className=\"flex gap-3 pt-4\">\r\n// // // // // //                   <button\r\n// // // // // //                     type=\"button\"\r\n// // // // // //                     onClick={() => setShowWithdrawForm(false)}\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\r\n// // // // // //                   >\r\n// // // // // //                     Cancel\r\n// // // // // //                   </button>\r\n// // // // // //                   <button\r\n// // // // // //                     type=\"button\"\r\n// // // // // //                     onClick={handleWithdrawalSubmit}\r\n// // // // // //                     disabled={loading.submit}\r\n// // // // // //                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\r\n// // // // // //                   >\r\n// // // // // //                     {loading.submit ? (\r\n// // // // // //                       <>\r\n// // // // // //                         <Loader className=\"h-4 w-4 animate-spin\" />\r\n// // // // // //                         Processing...\r\n// // // // // //                       </>\r\n// // // // // //                     ) : (\r\n// // // // // //                       'Submit Request'\r\n// // // // // //                     )}\r\n// // // // // //                   </button>\r\n// // // // // //                 </div>\r\n// // // // // //               </div>\r\n// // // // // //             </div>\r\n// // // // // //           </div>\r\n// // // // // //         </div>\r\n// // // // // //       )}\r\n// // // // // //     </div>\r\n// // // // // //   );\r\n// // // // // // };\r\n\r\n// // // // // // export default EnhancedWallet;\r\n\r\n\r\n// // // // // import React, { useState, useEffect, useCallback } from 'react';\r\n// // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\r\n\r\n// // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\r\n// // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\r\n// // // // //   const [error, setError] = useState('');\r\n// // // // //   const [success, setSuccess] = useState('');\r\n// // // // //   const [activeTab, setActiveTab] = useState('transactions');\r\n\r\n// // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// // // // //     bankName: '',\r\n// // // // //     accountNumber: '',\r\n// // // // //     ifscCode: '',\r\n// // // // //     mobileNumber: '',\r\n// // // // //     amount: ''\r\n// // // // //   });\r\n\r\n// // // // //   const [formErrors, setFormErrors] = useState({\r\n// // // // //     bankName: '',\r\n// // // // //     accountNumber: '',\r\n// // // // //     ifscCode: '',\r\n// // // // //     mobileNumber: '',\r\n// // // // //     amount: ''\r\n// // // // //   });\r\n\r\n// // // // //   const parseJwt = (token) => {\r\n// // // // //     if (!token) return null;\r\n// // // // //     try {\r\n// // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\r\n// // // // //       return payload.userId || payload.sub || null;\r\n// // // // //     } catch {\r\n// // // // //       return null;\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const resolvedToken = propUserToken\r\n// // // // //     || localStorage.getItem('token')\r\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\r\n// // // // //     || '';\r\n\r\n// // // // //   const resolvedUserId = propUserId\r\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\r\n// // // // //     || parseJwt(resolvedToken)\r\n// // // // //     || null;\r\n\r\n// // // // //   const userAuthHeaders = () => {\r\n// // // // //     const token = resolvedToken;\r\n// // // // //     return {\r\n// // // // //       'Content-Type': 'application/json',\r\n// // // // //       Authorization: token ? `Bearer ${token}` : '',\r\n// // // // //     };\r\n// // // // //   };\r\n\r\n// // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\n// // // // //   const fetchWalletData = useCallback(async () => {\r\n// // // // //     if (!resolvedUserId) return;\r\n// // // // //     try {\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\r\n// // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to fetch wallet data');\r\n// // // // //     }\r\n// // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // //   const fetchWithdrawalHistory = useCallback(async () => {\r\n// // // // //     if (!resolvedUserId) return;\r\n// // // // //     try {\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\r\n// // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to fetch withdrawal history');\r\n// // // // //     }\r\n// // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // //   useEffect(() => {\r\n// // // // //     const fetchData = async () => {\r\n// // // // //       if (!resolvedUserId) {\r\n// // // // //         setError('User not authenticated. Please login.');\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //         return;\r\n// // // // //       }\r\n// // // // //       if (!resolvedToken) {\r\n// // // // //         setError('Missing auth token. Please login again.');\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //         return;\r\n// // // // //       }\r\n\r\n// // // // //       try {\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\r\n// // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // //       } catch {\r\n// // // // //         setError('Failed to load wallet data. Please try again.');\r\n// // // // //       } finally {\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //       }\r\n// // // // //     };\r\n\r\n// // // // //     fetchData();\r\n// // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\r\n\r\n// // // // //   const validateForm = () => {\r\n// // // // //     const errors = {};\r\n// // // // //     let isValid = true;\r\n\r\n// // // // //     if (!withdrawalForm.bankName.trim()) {\r\n// // // // //       errors.bankName = 'Bank name is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n// // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n// // // // //       errors.ifscCode = 'Valid IFSC code is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n// // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\r\n// // // // //       isValid = false;\r\n// // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// // // // //       errors.amount = 'Insufficient balance';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     setFormErrors(errors);\r\n// // // // //     return isValid;\r\n// // // // //   };\r\n\r\n// // // // //   const handleWithdrawalSubmit = async () => {\r\n// // // // //     if (!validateForm()) return;\r\n\r\n// // // // //     setLoading(prev => ({ ...prev, submit: true }));\r\n// // // // //     setError('');\r\n// // // // //     setSuccess('');\r\n\r\n// // // // //     try {\r\n// // // // //       const body = {\r\n// // // // //         userId: resolvedUserId, // âœ… fixed here\r\n// // // // //         amount: parseFloat(withdrawalForm.amount),\r\n// // // // //         bankName: withdrawalForm.bankName,\r\n// // // // //         accountNumber: withdrawalForm.accountNumber,\r\n// // // // //         ifscCode: withdrawalForm.ifscCode,\r\n// // // // //         mobileNumber: withdrawalForm.mobileNumber,\r\n// // // // //       };\r\n\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\r\n// // // // //         method: 'POST',\r\n// // // // //         headers: userAuthHeaders(),\r\n// // // // //         body: JSON.stringify(body),\r\n// // // // //       });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\r\n\r\n// // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // //       setSuccess('Withdrawal request submitted successfully!');\r\n// // // // //       setShowWithdrawForm(false);\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to submit withdrawal request. Please try again.');\r\n// // // // //     } finally {\r\n// // // // //       setLoading(prev => ({ ...prev, submit: false }));\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const handleInputChange = (e) => {\r\n// // // // //     const { name, value } = e.target;\r\n// // // // //     setWithdrawalForm(prev => ({\r\n// // // // //       ...prev,\r\n// // // // //       [name]: value\r\n// // // // //     }));\r\n\r\n// // // // //     if (formErrors[name]) {\r\n// // // // //       setFormErrors(prev => ({\r\n// // // // //         ...prev,\r\n// // // // //         [name]: ''\r\n// // // // //       }));\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const getStatusIcon = (status) => {\r\n// // // // //     switch (status) {\r\n// // // // //       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\r\n// // // // //       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n// // // // //       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\r\n// // // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const getStatusColor = (status) => {\r\n// // // // //     switch (status) {\r\n// // // // //       case 'Pending': return 'text-yellow-600 bg-yellow-50';\r\n// // // // //       case 'Completed': return 'text-green-600 bg-green-50';\r\n// // // // //       case 'Rejected': return 'text-red-600 bg-red-50';\r\n// // // // //       default: return 'text-gray-600 bg-gray-50';\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const formatDate = (dateString) => {\r\n// // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\r\n// // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\r\n// // // // //       {/* UI code remains same â€” I kept all your JSX untouched */}\r\n// // // // //       {/* ... */}\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // };\r\n\r\n// // // // // export default EnhancedWallet;\r\n\r\n\r\n// // // // // import React, { useState, useEffect, useCallback } from 'react';\r\n// // // // // import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\r\n\r\n// // // // // const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\r\n// // // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// // // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// // // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// // // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\r\n// // // // //   const [error, setError] = useState('');\r\n// // // // //   const [success, setSuccess] = useState('');\r\n// // // // //   const [activeTab, setActiveTab] = useState('transactions');\r\n\r\n// // // // //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// // // // //     bankName: '',\r\n// // // // //     accountNumber: '',\r\n// // // // //     ifscCode: '',\r\n// // // // //     mobileNumber: '',\r\n// // // // //     amount: ''\r\n// // // // //   });\r\n\r\n// // // // //   const [formErrors, setFormErrors] = useState({\r\n// // // // //     bankName: '',\r\n// // // // //     accountNumber: '',\r\n// // // // //     ifscCode: '',\r\n// // // // //     mobileNumber: '',\r\n// // // // //     amount: ''\r\n// // // // //   });\r\n\r\n// // // // //   const parseJwt = (token) => {\r\n// // // // //     if (!token) return null;\r\n// // // // //     try {\r\n// // // // //       const payload = JSON.parse(atob(token.split('.')[1]));\r\n// // // // //       return payload.userId || payload.sub || null;\r\n// // // // //     } catch {\r\n// // // // //       return null;\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const resolvedToken = propUserToken\r\n// // // // //     || localStorage.getItem('token')\r\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\r\n// // // // //     || '';\r\n\r\n// // // // //   const resolvedUserId = propUserId\r\n// // // // //     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\r\n// // // // //     || parseJwt(resolvedToken)\r\n// // // // //     || null;\r\n\r\n// // // // //   const userAuthHeaders = () => {\r\n// // // // //     const token = resolvedToken;\r\n// // // // //     return {\r\n// // // // //       'Content-Type': 'application/json',\r\n// // // // //       Authorization: token ? `Bearer ${token}` : '',\r\n// // // // //     };\r\n// // // // //   };\r\n\r\n// // // // //   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\n// // // // //   const fetchWalletData = useCallback(async () => {\r\n// // // // //     if (!resolvedUserId) return;\r\n// // // // //     try {\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\r\n// // // // //       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to fetch wallet data');\r\n// // // // //     }\r\n// // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // //   const fetchWithdrawalHistory = useCallback(async () => {\r\n// // // // //     if (!resolvedUserId) return;\r\n// // // // //     try {\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\r\n// // // // //       setWithdrawalRequests(data.withdrawalRequests || []);\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to fetch withdrawal history');\r\n// // // // //     }\r\n// // // // //   }, [resolvedUserId, resolvedToken]);\r\n\r\n// // // // //   useEffect(() => {\r\n// // // // //     const fetchData = async () => {\r\n// // // // //       if (!resolvedUserId) {\r\n// // // // //         setError('User not authenticated. Please login.');\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //         return;\r\n// // // // //       }\r\n// // // // //       if (!resolvedToken) {\r\n// // // // //         setError('Missing auth token. Please login again.');\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //         return;\r\n// // // // //       }\r\n\r\n// // // // //       try {\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\r\n// // // // //         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // //       } catch {\r\n// // // // //         setError('Failed to load wallet data. Please try again.');\r\n// // // // //       } finally {\r\n// // // // //         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\r\n// // // // //       }\r\n// // // // //     };\r\n\r\n// // // // //     fetchData();\r\n// // // // //   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\r\n\r\n// // // // //   const validateForm = () => {\r\n// // // // //     const errors = {};\r\n// // // // //     let isValid = true;\r\n\r\n// // // // //     if (!withdrawalForm.bankName.trim()) {\r\n// // // // //       errors.bankName = 'Bank name is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n// // // // //       errors.accountNumber = 'Valid account number is required (9-18 digits)';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n// // // // //       errors.ifscCode = 'Valid IFSC code is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n// // // // //       errors.mobileNumber = 'Valid Indian mobile number is required';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// // // // //       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\r\n// // // // //       isValid = false;\r\n// // // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// // // // //       errors.amount = 'Insufficient balance';\r\n// // // // //       isValid = false;\r\n// // // // //     }\r\n\r\n// // // // //     setFormErrors(errors);\r\n// // // // //     return isValid;\r\n// // // // //   };\r\n\r\n// // // // //   const handleWithdrawalSubmit = async () => {\r\n// // // // //     if (!validateForm()) return;\r\n\r\n// // // // //     setLoading(prev => ({ ...prev, submit: true }));\r\n// // // // //     setError('');\r\n// // // // //     setSuccess('');\r\n\r\n// // // // //     try {\r\n// // // // //       const body = {\r\n// // // // //         userId: resolvedUserId, // âœ… fixed here\r\n// // // // //         amount: parseFloat(withdrawalForm.amount),\r\n// // // // //         bankName: withdrawalForm.bankName,\r\n// // // // //         accountNumber: withdrawalForm.accountNumber,\r\n// // // // //         ifscCode: withdrawalForm.ifscCode,\r\n// // // // //         mobileNumber: withdrawalForm.mobileNumber,\r\n// // // // //       };\r\n\r\n// // // // //       const res = await fetch(`${API_URL}/wallet/withdraw`, {\r\n// // // // //         method: 'POST',\r\n// // // // //         headers: userAuthHeaders(),\r\n// // // // //         body: JSON.stringify(body),\r\n// // // // //       });\r\n// // // // //       const data = await res.json();\r\n// // // // //       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\r\n\r\n// // // // //       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\r\n// // // // //       setSuccess('Withdrawal request submitted successfully!');\r\n// // // // //       setShowWithdrawForm(false);\r\n// // // // //     } catch {\r\n// // // // //       setError('Failed to submit withdrawal request. Please try again.');\r\n// // // // //     } finally {\r\n// // // // //       setLoading(prev => ({ ...prev, submit: false }));\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const handleInputChange = (e) => {\r\n// // // // //     const { name, value } = e.target;\r\n// // // // //     setWithdrawalForm(prev => ({\r\n// // // // //       ...prev,\r\n// // // // //       [name]: value\r\n// // // // //     }));\r\n\r\n// // // // //     if (formErrors[name]) {\r\n// // // // //       setFormErrors(prev => ({\r\n// // // // //         ...prev,\r\n// // // // //         [name]: ''\r\n// // // // //       }));\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const getStatusIcon = (status) => {\r\n// // // // //     switch (status) {\r\n// // // // //       case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\r\n// // // // //       case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n// // // // //       case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\r\n// // // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const getStatusColor = (status) => {\r\n// // // // //     switch (status) {\r\n// // // // //       case 'Pending': return 'text-yellow-600 bg-yellow-50';\r\n// // // // //       case 'Completed': return 'text-green-600 bg-green-50';\r\n// // // // //       case 'Rejected': return 'text-red-600 bg-red-50';\r\n// // // // //       default: return 'text-gray-600 bg-gray-50';\r\n// // // // //     }\r\n// // // // //   };\r\n\r\n// // // // //   const formatDate = (dateString) => {\r\n// // // // //     const options = { day: 'numeric', month: 'short', year: 'numeric' };\r\n// // // // //     return new Date(dateString).toLocaleDateString('en-IN', options);\r\n// // // // //   };\r\n\r\n// // // // //   return (\r\n// // // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\r\n// // // // //       {/* Balance Card */}\r\n// // // // //       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\r\n// // // // //         <div>\r\n// // // // //           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\r\n// // // // //           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\r\n// // // // //         </div>\r\n// // // // //         <button\r\n// // // // //           onClick={() => setShowWithdrawForm(true)}\r\n// // // // //           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\r\n// // // // //         >\r\n// // // // //           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* Tabs */}\r\n// // // // //       <div className=\"flex space-x-4 border-b mb-4\">\r\n// // // // //         <button\r\n// // // // //           onClick={() => setActiveTab('transactions')}\r\n// // // // //           className={`pb-2 ${activeTab === 'transactions' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\r\n// // // // //         >\r\n// // // // //           Transactions\r\n// // // // //         </button>\r\n// // // // //         <button\r\n// // // // //           onClick={() => setActiveTab('withdrawals')}\r\n// // // // //           className={`pb-2 ${activeTab === 'withdrawals' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-600'}`}\r\n// // // // //         >\r\n// // // // //           Withdrawals\r\n// // // // //         </button>\r\n// // // // //       </div>\r\n\r\n// // // // //       {/* Error / Success Messages */}\r\n// // // // //       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\r\n// // // // //       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\r\n\r\n// // // // //       {/* Transactions Tab */}\r\n// // // // //       {activeTab === 'transactions' && (\r\n// // // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n// // // // //           {wallet.transactions.length > 0 ? (\r\n// // // // //             <ul>\r\n// // // // //               {wallet.transactions.map((txn, index) => (\r\n// // // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\r\n// // // // //                   <div className=\"flex items-center\">\r\n// // // // //                     {txn.type === 'credit' ? (\r\n// // // // //                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\r\n// // // // //                     ) : (\r\n// // // // //                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\r\n// // // // //                     )}\r\n// // // // //                     <span>{txn.description || txn.type}</span>\r\n// // // // //                   </div>\r\n// // // // //                   <div className=\"text-right\">\r\n// // // // //                     <p className={txn.type === 'credit' ? 'text-green-600' : 'text-red-600'}>\r\n// // // // //                       â‚¹{txn.amount}\r\n// // // // //                     </p>\r\n// // // // //                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\r\n// // // // //                   </div>\r\n// // // // //                 </li>\r\n// // // // //               ))}\r\n// // // // //             </ul>\r\n// // // // //           ) : (\r\n// // // // //             <p className=\"p-4 text-gray-500\">No transactions found.</p>\r\n// // // // //           )}\r\n// // // // //         </div>\r\n// // // // //       )}\r\n\r\n// // // // //       {/* Withdrawals Tab */}\r\n// // // // //       {activeTab === 'withdrawals' && (\r\n// // // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n// // // // //           {withdrawalRequests.length > 0 ? (\r\n// // // // //             <ul>\r\n// // // // //               {withdrawalRequests.map((req, index) => (\r\n// // // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\r\n// // // // //                   <div className=\"flex items-center\">\r\n// // // // //                     {getStatusIcon(req.status)}\r\n// // // // //                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\r\n// // // // //                   </div>\r\n// // // // //                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\r\n// // // // //                     {req.status}\r\n// // // // //                   </div>\r\n// // // // //                 </li>\r\n// // // // //               ))}\r\n// // // // //             </ul>\r\n// // // // //           ) : (\r\n// // // // //             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\r\n// // // // //           )}\r\n// // // // //         </div>\r\n// // // // //       )}\r\n\r\n// // // // //       {/* Withdraw Form Modal */}\r\n// // // // //       {showWithdrawForm && (\r\n// // // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\r\n// // // // //           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n// // // // //             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\r\n// // // // //             {Object.keys(withdrawalForm).map((field) => (\r\n// // // // //               <div key={field} className=\"mb-3\">\r\n// // // // //                 <input\r\n// // // // //                   type={field === 'amount' ? 'number' : 'text'}\r\n// // // // //                   name={field}\r\n// // // // //                   value={withdrawalForm[field]}\r\n// // // // //                   onChange={handleInputChange}\r\n// // // // //                   placeholder={field.replace(/([A-Z])/g, ' $1')}\r\n// // // // //                   className=\"w-full border rounded p-2\"\r\n// // // // //                 />\r\n// // // // //                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\r\n// // // // //               </div>\r\n// // // // //             ))}\r\n// // // // //             <div className=\"flex justify-end space-x-2\">\r\n// // // // //               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\r\n// // // // //               <button\r\n// // // // //                 onClick={handleWithdrawalSubmit}\r\n// // // // //                 disabled={loading.submit}\r\n// // // // //                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n// // // // //               >\r\n// // // // //                 {loading.submit ? 'Submitting...' : 'Submit'}\r\n// // // // //               </button>\r\n// // // // //             </div>\r\n// // // // //           </div>\r\n// // // // //         </div>\r\n// // // // //       )}\r\n// // // // //     </div>\r\n// // // // //   );\r\n// // // // // };\r\n\r\n// // // // // export default EnhancedWallet;\r\n\r\n\r\n\r\n\r\n// // // // // import React, { useState, useEffect } from \"react\";\r\n\r\n\r\n// // // // // import { walletAPI } from \"../../services/api\";\r\n\r\n// // // // // const { getUserWallet, getUserWithdrawalRequests, requestWithdrawal } = walletAPI;\r\n\r\n// // // // // import {\r\n// // // // //   ArrowUp,\r\n// // // // //   Clock,\r\n// // // // //   CheckCircle,\r\n// // // // //   X,\r\n// // // // //   Plus,\r\n// // // // //   Minus,\r\n// // // // // } from \"lucide-react\";\r\n\r\n\r\n// // // // import React, { useState, useEffect } from \"react\";\r\n// // // // import {\r\n// // // //   ArrowUp,\r\n// // // //   Clock,\r\n// // // //   CheckCircle,\r\n// // // //   X,\r\n// // // //   Plus,\r\n// // // //   Minus,\r\n// // // // } from \"lucide-react\";\r\n// // // // // import { walletAPI } from \"../../services/api\";\r\n// // // // import userWalletAPI from \"../../services/userWalletApi\";\r\n\r\n// // // // const { getUserWallet, getUserWithdrawalRequests, requestWithdrawal } = walletAPI;\r\n\r\n\r\n// // // // const EnhancedWallet = () => {\r\n// // // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// // // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// // // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// // // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\r\n// // // //   const [error, setError] = useState(\"\");\r\n// // // //   const [success, setSuccess] = useState(\"\");\r\n// // // //   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n// // // //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// // // //     bankName: \"\",\r\n// // // //     accountNumber: \"\",\r\n// // // //     ifscCode: \"\",\r\n// // // //     mobileNumber: \"\",\r\n// // // //     amount: \"\",\r\n// // // //   });\r\n\r\n// // // //   const [formErrors, setFormErrors] = useState({});\r\n\r\n// // // //   const userId = localStorage.getItem(\"userId\");\r\n\r\n// // // //   const loadWallet = async () => {\r\n// // // //     if (!userId) return;\r\n// // // //     try {\r\n// // // //       setLoading((prev) => ({ ...prev, wallet: true }));\r\n// // // //       const res = await getUserWallet(userId);\r\n// // // //       setWallet({\r\n// // // //         balance: res.data.balance || 0,\r\n// // // //         transactions: res.data.transactions || [],\r\n// // // //       });\r\n// // // //     } catch (err) {\r\n// // // //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\r\n// // // //     } finally {\r\n// // // //       setLoading((prev) => ({ ...prev, wallet: false }));\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const loadRequests = async () => {\r\n// // // //     if (!userId) return;\r\n// // // //     try {\r\n// // // //       setLoading((prev) => ({ ...prev, withdrawals: true }));\r\n// // // //       const res = await getUserWithdrawalRequests(userId);\r\n// // // //       setWithdrawalRequests(res.data || []);\r\n// // // //     } catch (err) {\r\n// // // //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\r\n// // // //     } finally {\r\n// // // //       setLoading((prev) => ({ ...prev, withdrawals: false }));\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   useEffect(() => {\r\n// // // //     if (userId) {\r\n// // // //       loadWallet();\r\n// // // //       loadRequests();\r\n// // // //     }\r\n// // // //   }, [userId]);\r\n\r\n// // // //   const validateForm = () => {\r\n// // // //     const errors = {};\r\n// // // //     let isValid = true;\r\n\r\n// // // //     if (!withdrawalForm.bankName.trim()) {\r\n// // // //       errors.bankName = \"Bank name is required\";\r\n// // // //       isValid = false;\r\n// // // //     }\r\n// // // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n// // // //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n// // // //       isValid = false;\r\n// // // //     }\r\n// // // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n// // // //       errors.ifscCode = \"Valid IFSC code is required\";\r\n// // // //       isValid = false;\r\n// // // //     }\r\n// // // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n// // // //       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n// // // //       isValid = false;\r\n// // // //     }\r\n// // // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// // // //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\r\n// // // //       isValid = false;\r\n// // // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// // // //       errors.amount = \"Insufficient balance\";\r\n// // // //       isValid = false;\r\n// // // //     }\r\n\r\n// // // //     setFormErrors(errors);\r\n// // // //     return isValid;\r\n// // // //   };\r\n\r\n// // // //   const handleWithdrawalSubmit = async () => {\r\n// // // //     if (!validateForm()) return;\r\n\r\n// // // //     setLoading((prev) => ({ ...prev, submit: true }));\r\n// // // //     setError(\"\");\r\n// // // //     setSuccess(\"\");\r\n\r\n// // // //     try {\r\n// // // //       await requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\r\n// // // //       setSuccess(\"Withdrawal request submitted successfully!\");\r\n// // // //       setShowWithdrawForm(false);\r\n// // // //       await Promise.all([loadWallet(), loadRequests()]);\r\n// // // //     } catch (err) {\r\n// // // //       setError(err.response?.data?.message || \"Withdrawal failed\");\r\n// // // //     } finally {\r\n// // // //       setLoading((prev) => ({ ...prev, submit: false }));\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const handleInputChange = (e) => {\r\n// // // //     const { name, value } = e.target;\r\n// // // //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n// // // //     if (formErrors[name]) {\r\n// // // //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const getStatusIcon = (status) => {\r\n// // // //     switch (status) {\r\n// // // //       case \"Pending\": return <Clock className=\"h-5 w-5 text-yellow-500\" />;\r\n// // // //       case \"Completed\": return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n// // // //       case \"Rejected\": return <X className=\"h-5 w-5 text-red-500\" />;\r\n// // // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const getStatusColor = (status) => {\r\n// // // //     switch (status) {\r\n// // // //       case \"Pending\": return \"text-yellow-600 bg-yellow-50\";\r\n// // // //       case \"Completed\": return \"text-green-600 bg-green-50\";\r\n// // // //       case \"Rejected\": return \"text-red-600 bg-red-50\";\r\n// // // //       default: return \"text-gray-600 bg-gray-50\";\r\n// // // //     }\r\n// // // //   };\r\n\r\n// // // //   const formatDate = (dateString) => {\r\n// // // //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n// // // //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n// // // //   };\r\n\r\n// // // //   return (\r\n// // // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\r\n// // // //       {/* Balance Card */}\r\n// // // //       <div className=\"bg-white shadow-md rounded-lg p-6 mb-6 flex items-center justify-between\">\r\n// // // //         <div>\r\n// // // //           <h2 className=\"text-lg font-semibold text-gray-700\">Wallet Balance</h2>\r\n// // // //           <p className=\"text-3xl font-bold text-gray-900\">â‚¹{wallet.balance}</p>\r\n// // // //         </div>\r\n// // // //         <button\r\n// // // //           onClick={() => setShowWithdrawForm(true)}\r\n// // // //           className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center\"\r\n// // // //         >\r\n// // // //           <ArrowUp className=\"h-5 w-5 mr-2\" /> Withdraw\r\n// // // //         </button>\r\n// // // //       </div>\r\n\r\n// // // //       {/* Tabs */}\r\n// // // //       <div className=\"flex space-x-4 border-b mb-4\">\r\n// // // //         <button\r\n// // // //           onClick={() => setActiveTab(\"transactions\")}\r\n// // // //           className={`pb-2 ${activeTab === \"transactions\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\r\n// // // //         >\r\n// // // //           Transactions\r\n// // // //         </button>\r\n// // // //         <button\r\n// // // //           onClick={() => setActiveTab(\"withdrawals\")}\r\n// // // //           className={`pb-2 ${activeTab === \"withdrawals\" ? \"border-b-2 border-blue-600 text-blue-600\" : \"text-gray-600\"}`}\r\n// // // //         >\r\n// // // //           Withdrawals\r\n// // // //         </button>\r\n// // // //       </div>\r\n\r\n// // // //       {/* Error / Success Messages */}\r\n// // // //       {error && <div className=\"mb-4 p-3 bg-red-100 text-red-700 rounded\">{error}</div>}\r\n// // // //       {success && <div className=\"mb-4 p-3 bg-green-100 text-green-700 rounded\">{success}</div>}\r\n\r\n// // // //       {/* Transactions Tab */}\r\n// // // //       {activeTab === \"transactions\" && (\r\n// // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n// // // //           {wallet.transactions.length > 0 ? (\r\n// // // //             <ul>\r\n// // // //               {wallet.transactions.map((txn, index) => (\r\n// // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\r\n// // // //                   <div className=\"flex items-center\">\r\n// // // //                     {txn.type === \"credit\" ? (\r\n// // // //                       <Plus className=\"h-5 w-5 text-green-500 mr-2\" />\r\n// // // //                     ) : (\r\n// // // //                       <Minus className=\"h-5 w-5 text-red-500 mr-2\" />\r\n// // // //                     )}\r\n// // // //                     <span>{txn.description || txn.type}</span>\r\n// // // //                   </div>\r\n// // // //                   <div className=\"text-right\">\r\n// // // //                     <p className={txn.type === \"credit\" ? \"text-green-600\" : \"text-red-600\"}>\r\n// // // //                       â‚¹{txn.amount}\r\n// // // //                     </p>\r\n// // // //                     <small className=\"text-gray-500\">{formatDate(txn.date)}</small>\r\n// // // //                   </div>\r\n// // // //                 </li>\r\n// // // //               ))}\r\n// // // //             </ul>\r\n// // // //           ) : (\r\n// // // //             <p className=\"p-4 text-gray-500\">No transactions found.</p>\r\n// // // //           )}\r\n// // // //         </div>\r\n// // // //       )}\r\n\r\n// // // //       {/* Withdrawals Tab */}\r\n// // // //       {activeTab === \"withdrawals\" && (\r\n// // // //         <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n// // // //           {withdrawalRequests.length > 0 ? (\r\n// // // //             <ul>\r\n// // // //               {withdrawalRequests.map((req, index) => (\r\n// // // //                 <li key={index} className=\"flex justify-between p-4 border-b\">\r\n// // // //                   <div className=\"flex items-center\">\r\n// // // //                     {getStatusIcon(req.status)}\r\n// // // //                     <span className=\"ml-2\">{req.bankName} - â‚¹{req.amount}</span>\r\n// // // //                   </div>\r\n// // // //                   <div className={`px-2 py-1 rounded text-sm ${getStatusColor(req.status)}`}>\r\n// // // //                     {req.status}\r\n// // // //                   </div>\r\n// // // //                 </li>\r\n// // // //               ))}\r\n// // // //             </ul>\r\n// // // //           ) : (\r\n// // // //             <p className=\"p-4 text-gray-500\">No withdrawal requests found.</p>\r\n// // // //           )}\r\n// // // //         </div>\r\n// // // //       )}\r\n\r\n// // // //       {/* Withdraw Form Modal */}\r\n// // // //       {showWithdrawForm && (\r\n// // // //         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\">\r\n// // // //           <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\r\n// // // //             <h3 className=\"text-lg font-semibold mb-4\">Withdraw Funds</h3>\r\n// // // //             {Object.keys(withdrawalForm).map((field) => (\r\n// // // //               <div key={field} className=\"mb-3\">\r\n// // // //                 <input\r\n// // // //                   type={field === \"amount\" ? \"number\" : \"text\"}\r\n// // // //                   name={field}\r\n// // // //                   value={withdrawalForm[field]}\r\n// // // //                   onChange={handleInputChange}\r\n// // // //                   placeholder={field.replace(/([A-Z])/g, \" $1\")}\r\n// // // //                   className=\"w-full border rounded p-2\"\r\n// // // //                 />\r\n// // // //                 {formErrors[field] && <p className=\"text-red-500 text-sm\">{formErrors[field]}</p>}\r\n// // // //               </div>\r\n// // // //             ))}\r\n// // // //             <div className=\"flex justify-end space-x-2\">\r\n// // // //               <button onClick={() => setShowWithdrawForm(false)} className=\"px-4 py-2 bg-gray-300 rounded\">Cancel</button>\r\n// // // //               <button\r\n// // // //                 onClick={handleWithdrawalSubmit}\r\n// // // //                 disabled={loading.submit}\r\n// // // //                 className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n// // // //               >\r\n// // // //                 {loading.submit ? \"Submitting...\" : \"Submit\"}\r\n// // // //               </button>\r\n// // // //             </div>\r\n// // // //           </div>\r\n// // // //         </div>\r\n// // // //       )}\r\n// // // //     </div>\r\n// // // //   );\r\n// // // // };\r\n\r\n// // // // export default EnhancedWallet;   \r\n\r\n\r\n// // // import React, { useState, useEffect } from \"react\";\r\n// // // import {\r\n// // //   ArrowUp,\r\n// // //   Clock,\r\n// // //   CheckCircle,\r\n// // //   X,\r\n// // //   Plus,\r\n// // //   Minus,\r\n// // // } from \"lucide-react\";\r\n// // // import userWalletAPI from \"../../services/userWalletApi\"; // âœ… updated import\r\n\r\n// // // const EnhancedWallet = () => {\r\n// // //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// // //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// // //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// // //   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\r\n// // //   const [error, setError] = useState(\"\");\r\n// // //   const [success, setSuccess] = useState(\"\");\r\n// // //   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n// // //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// // //     bankName: \"\",\r\n// // //     accountNumber: \"\",\r\n// // //     ifscCode: \"\",\r\n// // //     mobileNumber: \"\",\r\n// // //     amount: \"\",\r\n// // //   });\r\n\r\n// // //   const [formErrors, setFormErrors] = useState({});\r\n\r\n// // //   const userId = localStorage.getItem(\"userId\");\r\n\r\n// // //   const loadWallet = async () => {\r\n// // //     if (!userId) return;\r\n// // //     try {\r\n// // //       setLoading((prev) => ({ ...prev, wallet: true }));\r\n// // //       const res = await userWalletAPI.getWallet(userId); // âœ… updated\r\n// // //       setWallet({\r\n// // //         balance: res.data.balance || 0,\r\n// // //         transactions: res.data.transactions || [],\r\n// // //       });\r\n// // //     } catch (err) {\r\n// // //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\r\n// // //     } finally {\r\n// // //       setLoading((prev) => ({ ...prev, wallet: false }));\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const loadRequests = async () => {\r\n// // //     if (!userId) return;\r\n// // //     try {\r\n// // //       setLoading((prev) => ({ ...prev, withdrawals: true }));\r\n// // //       const res = await userWalletAPI.getWithdrawals(userId); // âœ… updated\r\n// // //       setWithdrawalRequests(res.data || []);\r\n// // //     } catch (err) {\r\n// // //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\r\n// // //     } finally {\r\n// // //       setLoading((prev) => ({ ...prev, withdrawals: false }));\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   useEffect(() => {\r\n// // //     if (userId) {\r\n// // //       loadWallet();\r\n// // //       loadRequests();\r\n// // //     }\r\n// // //   }, [userId]);\r\n\r\n// // //   const validateForm = () => {\r\n// // //     const errors = {};\r\n// // //     let isValid = true;\r\n\r\n// // //     if (!withdrawalForm.bankName.trim()) {\r\n// // //       errors.bankName = \"Bank name is required\";\r\n// // //       isValid = false;\r\n// // //     }\r\n// // //     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\r\n// // //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n// // //       isValid = false;\r\n// // //     }\r\n// // //     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\r\n// // //       errors.ifscCode = \"Valid IFSC code is required\";\r\n// // //       isValid = false;\r\n// // //     }\r\n// // //     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\r\n// // //       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n// // //       isValid = false;\r\n// // //     }\r\n// // //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// // //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\r\n// // //       isValid = false;\r\n// // //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// // //       errors.amount = \"Insufficient balance\";\r\n// // //       isValid = false;\r\n// // //     }\r\n\r\n// // //     setFormErrors(errors);\r\n// // //     return isValid;\r\n// // //   };\r\n\r\n// // //   const handleWithdrawalSubmit = async () => {\r\n// // //     if (!validateForm()) return;\r\n\r\n// // //     setLoading((prev) => ({ ...prev, submit: true }));\r\n// // //     setError(\"\");\r\n// // //     setSuccess(\"\");\r\n\r\n// // //     try {\r\n// // //       await userWalletAPI.requestWithdrawal( // âœ… updated\r\n// // //         userId,\r\n// // //         withdrawalForm.amount,\r\n// // //         withdrawalForm\r\n// // //       );\r\n// // //       setSuccess(\"Withdrawal request submitted successfully!\");\r\n// // //       setShowWithdrawForm(false);\r\n// // //       await Promise.all([loadWallet(), loadRequests()]);\r\n// // //     } catch (err) {\r\n// // //       setError(err.response?.data?.message || \"Withdrawal failed\");\r\n// // //     } finally {\r\n// // //       setLoading((prev) => ({ ...prev, submit: false }));\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const handleInputChange = (e) => {\r\n// // //     const { name, value } = e.target;\r\n// // //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n// // //     if (formErrors[name]) {\r\n// // //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const getStatusIcon = (status) => {\r\n// // //     switch (status) {\r\n// // //       case \"Pending\": return <Clock className=\"h-5 w-5 text-yellow-500\" />;\r\n// // //       case \"Completed\": return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\r\n// // //       case \"Rejected\": return <X className=\"h-5 w-5 text-red-500\" />;\r\n// // //       default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const getStatusColor = (status) => {\r\n// // //     switch (status) {\r\n// // //       case \"Pending\": return \"text-yellow-600 bg-yellow-50\";\r\n// // //       case \"Completed\": return \"text-green-600 bg-green-50\";\r\n// // //       case \"Rejected\": return \"text-red-600 bg-red-50\";\r\n// // //       default: return \"text-gray-600 bg-gray-50\";\r\n// // //     }\r\n// // //   };\r\n\r\n// // //   const formatDate = (dateString) => {\r\n// // //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n// // //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n// // //   };\r\n\r\n// // //   return (\r\n// // //     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\r\n// // //       {/* Wallet balance, tabs, forms, transactions, etc... */}\r\n// // //       {/* â€”â€”â€” Your existing JSX continues here â€”â€”â€” */}\r\n// // //     </div>\r\n// // //   );\r\n// // // };\r\n\r\n// // // export default EnhancedWallet;\r\n\r\n\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import { useParams } from \"react-router-dom\";\r\n// // import {\r\n// //   ArrowUp,\r\n// //   Clock,\r\n// //   CheckCircle,\r\n// //   X,\r\n// //   Plus,\r\n// //   Wallet as WalletIcon,\r\n// //   IndianRupee,\r\n// // } from \"lucide-react\";\r\n// // import userWalletAPI from \"../../services/userWalletApi\"; // âœ… API service\r\n\r\n// // const EnhancedWallet = () => {\r\n// //   const { userId } = useParams();\r\n// //   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n// //   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n// //   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n// //   const [loading, setLoading] = useState({\r\n// //     wallet: false,\r\n// //     withdrawals: false,\r\n// //     submit: false,\r\n// //   });\r\n// //   const [error, setError] = useState(\"\");\r\n// //   const [success, setSuccess] = useState(\"\");\r\n// //   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n// //   const [withdrawalForm, setWithdrawalForm] = useState({\r\n// //     bankName: \"\",\r\n// //     accountNumber: \"\",\r\n// //     ifscCode: \"\",\r\n// //     mobileNumber: \"\",\r\n// //     amount: \"\",\r\n// //   });\r\n\r\n// //   const [formErrors, setFormErrors] = useState({});\r\n\r\n// //   // ðŸ”¹ Fetch Wallet Balance\r\n// //   const loadWallet = async () => {\r\n// //     if (!userId) return;\r\n// //     try {\r\n// //       setLoading((prev) => ({ ...prev, wallet: true }));\r\n// //       const res = await userWalletAPI.getWallet(userId);\r\n// //       setWallet({\r\n// //         balance: res.data.balance || 0,\r\n// //         transactions: res.data.transactions || [],\r\n// //       });\r\n// //     } catch (err) {\r\n// //       setError(err.response?.data?.message || \"Failed to fetch wallet\");\r\n// //     } finally {\r\n// //       setLoading((prev) => ({ ...prev, wallet: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   // ðŸ”¹ Fetch Withdrawals\r\n// //   const loadRequests = async () => {\r\n// //     if (!userId) return;\r\n// //     try {\r\n// //       setLoading((prev) => ({ ...prev, withdrawals: true }));\r\n// //       const res = await userWalletAPI.getWithdrawals(userId);\r\n// //       setWithdrawalRequests(res.data || []);\r\n// //     } catch (err) {\r\n// //       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\r\n// //     } finally {\r\n// //       setLoading((prev) => ({ ...prev, withdrawals: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (userId) {\r\n// //       loadWallet();\r\n// //       loadRequests();\r\n// //     }\r\n// //   }, [userId]);\r\n\r\n// //   // ðŸ”¹ Form Validation\r\n// //   const validateForm = () => {\r\n// //     const errors = {};\r\n// //     let isValid = true;\r\n\r\n// //     if (!withdrawalForm.bankName.trim()) {\r\n// //       errors.bankName = \"Bank name is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.accountNumber.trim() ||\r\n// //       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\r\n// //     ) {\r\n// //       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.ifscCode.trim() ||\r\n// //       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\r\n// //     ) {\r\n// //       errors.ifscCode = \"Valid IFSC code is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (\r\n// //       !withdrawalForm.mobileNumber.trim() ||\r\n// //       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\r\n// //     ) {\r\n// //       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n// //       isValid = false;\r\n// //     }\r\n// //     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n// //       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\r\n// //       isValid = false;\r\n// //     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n// //       errors.amount = \"Insufficient balance\";\r\n// //       isValid = false;\r\n// //     }\r\n\r\n// //     setFormErrors(errors);\r\n// //     return isValid;\r\n// //   };\r\n\r\n// //   // ðŸ”¹ Withdrawal Submit\r\n// //   const handleWithdrawalSubmit = async () => {\r\n// //     if (!validateForm()) return;\r\n\r\n// //     setLoading((prev) => ({ ...prev, submit: true }));\r\n// //     setError(\"\");\r\n// //     setSuccess(\"\");\r\n\r\n// //     try {\r\n// //       await userWalletAPI.requestWithdrawal(userId, withdrawalForm.amount, withdrawalForm);\r\n// //       setSuccess(\"Withdrawal request submitted successfully!\");\r\n// //       setShowWithdrawForm(false);\r\n// //       setWithdrawalForm({\r\n// //         bankName: \"\",\r\n// //         accountNumber: \"\",\r\n// //         ifscCode: \"\",\r\n// //         mobileNumber: \"\",\r\n// //         amount: \"\",\r\n// //       });\r\n// //       await Promise.all([loadWallet(), loadRequests()]);\r\n// //     } catch (err) {\r\n// //       setError(err.response?.data?.message || \"Withdrawal failed\");\r\n// //     } finally {\r\n// //       setLoading((prev) => ({ ...prev, submit: false }));\r\n// //     }\r\n// //   };\r\n\r\n// //   // ðŸ”¹ Input Change\r\n// //   const handleInputChange = (e) => {\r\n// //     const { name, value } = e.target;\r\n// //     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n// //     if (formErrors[name]) {\r\n// //       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n// //     }\r\n// //   };\r\n\r\n// //   // ðŸ”¹ Status UI\r\n// //   const getStatusIcon = (status) => {\r\n// //     switch (status) {\r\n// //       case \"Pending\":\r\n// //         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n// //       case \"Completed\":\r\n// //         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n// //       case \"Rejected\":\r\n// //         return <X className=\"h-4 w-4 text-red-500\" />;\r\n// //       default:\r\n// //         return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n// //     }\r\n// //   };\r\n\r\n// //   const getStatusColor = (status) => {\r\n// //     switch (status) {\r\n// //       case \"Pending\":\r\n// //         return \"bg-yellow-100 text-yellow-700\";\r\n// //       case \"Completed\":\r\n// //         return \"bg-green-100 text-green-700\";\r\n// //       case \"Rejected\":\r\n// //         return \"bg-red-100 text-red-700\";\r\n// //       default:\r\n// //         return \"bg-gray-100 text-gray-700\";\r\n// //     }\r\n// //   };\r\n\r\n// //   const formatDate = (dateString) => {\r\n// //     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n// //     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n// //       {/* Wallet Balance */}\r\n// //       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n// //         <div>\r\n// //           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n// //           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n// //             <IndianRupee size={24} /> {wallet.balance.toFixed(2)}\r\n// //           </p>\r\n// //         </div>\r\n// //         <WalletIcon size={50} className=\"opacity-70\" />\r\n// //       </div>\r\n\r\n// //       {/* Tabs */}\r\n// //       <div className=\"mt-6 flex gap-4 border-b\">\r\n// //         <button\r\n// //           onClick={() => setActiveTab(\"transactions\")}\r\n// //           className={`pb-2 px-4 ${\r\n// //             activeTab === \"transactions\"\r\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n// //               : \"text-gray-600\"\r\n// //           }`}\r\n// //         >\r\n// //           Transactions\r\n// //         </button>\r\n// //         <button\r\n// //           onClick={() => setActiveTab(\"withdrawals\")}\r\n// //           className={`pb-2 px-4 ${\r\n// //             activeTab === \"withdrawals\"\r\n// //               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n// //               : \"text-gray-600\"\r\n// //           }`}\r\n// //         >\r\n// //           Withdrawals\r\n// //         </button>\r\n// //       </div>\r\n\r\n// //       {/* Success / Error */}\r\n// //       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\r\n// //       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\r\n\r\n// //       {/* Transactions */}\r\n// //       {activeTab === \"transactions\" && (\r\n// //         <div className=\"mt-6 space-y-3\">\r\n// //           {wallet.transactions.length === 0 ? (\r\n// //             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n// //           ) : (\r\n// //             wallet.transactions.map((t, i) => (\r\n// //               <div\r\n// //                 key={i}\r\n// //                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n// //               >\r\n// //                 <div>\r\n// //                   <p className=\"font-medium\">{t.type}</p>\r\n// //                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n// //                 </div>\r\n// //                 <p\r\n// //                   className={`font-semibold ${\r\n// //                     t.type === \"Credit\" ? \"text-green-600\" : \"text-red-600\"\r\n// //                   }`}\r\n// //                 >\r\n// //                   {t.type === \"Credit\" ? \"+\" : \"-\"} â‚¹{t.amount}\r\n// //                 </p>\r\n// //               </div>\r\n// //             ))\r\n// //           )}\r\n// //         </div>\r\n// //       )}\r\n\r\n// //       {/* Withdrawals */}\r\n// //       {activeTab === \"withdrawals\" && (\r\n// //         <div className=\"mt-6 space-y-3\">\r\n// //           <button\r\n// //             onClick={() => setShowWithdrawForm(!showWithdrawForm)}\r\n// //             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n// //           >\r\n// //             + New Withdrawal\r\n// //           </button>\r\n\r\n// //           {showWithdrawForm && (\r\n// //             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n// //               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\r\n// //                 <div key={field}>\r\n// //                   <input\r\n// //                     type={field === \"amount\" ? \"number\" : \"text\"}\r\n// //                     name={field}\r\n// //                     placeholder={\r\n// //                       field === \"bankName\"\r\n// //                         ? \"Bank Name\"\r\n// //                         : field === \"accountNumber\"\r\n// //                         ? \"Account Number\"\r\n// //                         : field === \"ifscCode\"\r\n// //                         ? \"IFSC Code\"\r\n// //                         : field === \"mobileNumber\"\r\n// //                         ? \"Mobile Number\"\r\n// //                         : \"Amount\"\r\n// //                     }\r\n// //                     value={withdrawalForm[field]}\r\n// //                     onChange={handleInputChange}\r\n// //                     className={`w-full border rounded-lg px-3 py-2 ${\r\n// //                       formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\r\n// //                     }`}\r\n// //                   />\r\n// //                   {formErrors[field] && (\r\n// //                     <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>\r\n// //                   )}\r\n// //                 </div>\r\n// //               ))}\r\n// //               <button\r\n// //                 onClick={handleWithdrawalSubmit}\r\n// //                 disabled={loading.submit}\r\n// //                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n// //               >\r\n// //                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n// //               </button>\r\n// //             </div>\r\n// //           )}\r\n\r\n// //           <div className=\"space-y-3\">\r\n// //             {withdrawalRequests.length === 0 ? (\r\n// //               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\r\n// //             ) : (\r\n// //               withdrawalRequests.map((req, i) => (\r\n// //                 <div\r\n// //                   key={i}\r\n// //                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n// //                 >\r\n// //                   <div>\r\n// //                     <p className=\"font-medium\">â‚¹{req.amount}</p>\r\n// //                     <p className=\"text-sm text-gray-500\">{formatDate(req.date)}</p>\r\n// //                   </div>\r\n// //                   <span\r\n// //                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\r\n// //                       req.status\r\n// //                     )}`}\r\n// //                   >\r\n// //                     {getStatusIcon(req.status)}\r\n// //                     {req.status}\r\n// //                   </span>\r\n// //                 </div>\r\n// //               ))\r\n// //             )}\r\n// //           </div>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // };\r\n\r\n// // export default EnhancedWallet;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useParams } from \"react-router-dom\";\r\n// import {\r\n//   ArrowUp,\r\n//   Clock,\r\n//   CheckCircle,\r\n//   X,\r\n//   Plus,\r\n//   Wallet as WalletIcon,\r\n//   IndianRupee,\r\n// } from \"lucide-react\";\r\n// import userWalletAPI from \"../../services/userWalletApi\";\r\n\r\n// const EnhancedWallet = () => {\r\n//   const { userId } = useParams();\r\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n//   const [loading, setLoading] = useState({\r\n//     wallet: false,\r\n//     withdrawals: false,\r\n//     submit: false,\r\n//   });\r\n//   const [error, setError] = useState(\"\");\r\n//   const [success, setSuccess] = useState(\"\");\r\n//   const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n//   const [withdrawalForm, setWithdrawalForm] = useState({\r\n//     bankName: \"\",\r\n//     accountNumber: \"\",\r\n//     ifscCode: \"\",\r\n//     mobileNumber: \"\",\r\n//     amount: \"\",\r\n//   });\r\n\r\n//   const [formErrors, setFormErrors] = useState({});\r\n\r\n\r\n\r\n\r\n\r\n//   const loadWallet = async () => {\r\n//     if (!userId) return;\r\n//     try {\r\n//       setLoading((prev) => ({ ...prev, wallet: true }));\r\n//       const res = await userWalletAPI.getWallet(userId);\r\n//       setWallet({\r\n//         balance: res.data.balance || 0,\r\n//         transactions: res.data.transactions || [],\r\n//       });\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || \"Failed to fetch wallet\");\r\n//     } finally {\r\n//       setLoading((prev) => ({ ...prev, wallet: false }));\r\n//     }\r\n//   };\r\n\r\n//   const loadRequests = async () => {\r\n//     if (!userId) return;\r\n//     try {\r\n//       setLoading((prev) => ({ ...prev, withdrawals: true }));\r\n//       const res = await userWalletAPI.getWithdrawals(userId);\r\n//       setWithdrawalRequests(res.data || []);\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || \"Failed to fetch withdrawals\");\r\n//     } finally {\r\n//       setLoading((prev) => ({ ...prev, withdrawals: false }));\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (userId) {\r\n//       loadWallet();\r\n//       loadRequests();\r\n//     }\r\n//   }, [userId]);\r\n\r\n//   const validateForm = () => {\r\n//     const errors = {};\r\n//     let isValid = true;\r\n\r\n//     if (!withdrawalForm.bankName.trim()) {\r\n//       errors.bankName = \"Bank name is required\";\r\n//       isValid = false;\r\n//     }\r\n//     if (\r\n//       !withdrawalForm.accountNumber.trim() ||\r\n//       !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\r\n//     ) {\r\n//       errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n//       isValid = false;\r\n//     }\r\n//     if (\r\n//       !withdrawalForm.ifscCode.trim() ||\r\n//       !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\r\n//     ) {\r\n//       errors.ifscCode = \"Valid IFSC code is required\";\r\n//       isValid = false;\r\n//     }\r\n//     if (\r\n//       !withdrawalForm.mobileNumber.trim() ||\r\n//       !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\r\n//     ) {\r\n//       errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n//       isValid = false;\r\n//     }\r\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\r\n//       errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\r\n//       isValid = false;\r\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\r\n//       errors.amount = \"Insufficient balance\";\r\n//       isValid = false;\r\n//     }\r\n\r\n//     setFormErrors(errors);\r\n//     return isValid;\r\n//   };\r\n\r\n//   const handleWithdrawalSubmit = async () => {\r\n//     if (!validateForm()) return;\r\n\r\n//     setLoading((prev) => ({ ...prev, submit: true }));\r\n//     setError(\"\");\r\n//     setSuccess(\"\");\r\n\r\n//     try {\r\n//       // âœ… Correct API call\r\n//       await userWalletAPI.requestWithdrawal(userId, withdrawalForm);\r\n//       setSuccess(\"Withdrawal request submitted successfully!\");\r\n//       setShowWithdrawForm(false);\r\n//       setWithdrawalForm({\r\n//         bankName: \"\",\r\n//         accountNumber: \"\",\r\n//         ifscCode: \"\",\r\n//         mobileNumber: \"\",\r\n//         amount: \"\",\r\n//       });\r\n//       await Promise.all([loadWallet(), loadRequests()]);\r\n//     } catch (err) {\r\n//       setError(err.response?.data?.message || \"Withdrawal failed\");\r\n//     } finally {\r\n//       setLoading((prev) => ({ ...prev, submit: false }));\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n//     if (formErrors[name]) {\r\n//       setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n//     }\r\n//   };\r\n\r\n//   const getStatusIcon = (status) => {\r\n//     switch (status) {\r\n//       case \"Pending\":\r\n//         return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n//       case \"Completed\":\r\n//         return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n//       case \"Rejected\":\r\n//         return <X className=\"h-4 w-4 text-red-500\" />;\r\n//       default:\r\n//         return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n//     }\r\n//   };\r\n\r\n//   const getStatusColor = (status) => {\r\n//     switch (status) {\r\n//       case \"Pending\":\r\n//         return \"bg-yellow-100 text-yellow-700\";\r\n//       case \"Completed\":\r\n//         return \"bg-green-100 text-green-700\";\r\n//       case \"Rejected\":\r\n//         return \"bg-red-100 text-red-700\";\r\n//       default:\r\n//         return \"bg-gray-100 text-gray-700\";\r\n//     }\r\n//   };\r\n\r\n//   const formatDate = (dateString) => {\r\n//     const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n//     return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n//       <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n//         <div>\r\n//           <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n//           <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n//             <IndianRupee size={24} /> {wallet.balance.toFixed(2)}\r\n//           </p>\r\n//         </div>\r\n//         <WalletIcon size={50} className=\"opacity-70\" />\r\n//       </div>\r\n\r\n//       <div className=\"mt-6 flex gap-4 border-b\">\r\n//         <button\r\n//           onClick={() => setActiveTab(\"transactions\")}\r\n//           className={`pb-2 px-4 ${\r\n//             activeTab === \"transactions\"\r\n//               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//         >\r\n//           Transactions\r\n//         </button>\r\n//         <button\r\n//           onClick={() => setActiveTab(\"withdrawals\")}\r\n//           className={`pb-2 px-4 ${\r\n//             activeTab === \"withdrawals\"\r\n//               ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n//               : \"text-gray-600\"\r\n//           }`}\r\n//         >\r\n//           Withdrawals\r\n//         </button>\r\n//       </div>\r\n\r\n//       {error && <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>}\r\n//       {success && <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>}\r\n\r\n//       {activeTab === \"transactions\" && (\r\n//         <div className=\"mt-6 space-y-3\">\r\n//           {wallet.transactions.length === 0 ? (\r\n//             <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n//           ) : (\r\n//             wallet.transactions.map((t, i) => (\r\n//               <div\r\n//                 key={i}\r\n//                 className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n//               >\r\n//                 <div>\r\n//                   <p className=\"font-medium\">{t.type}</p>\r\n//                   <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n//                 </div>\r\n//                 <p\r\n//                   className={`font-semibold ${\r\n//                     t.type === \"Credit\" ? \"text-green-600\" : \"text-red-600\"\r\n//                   }`}\r\n//                 >\r\n//                   {t.type === \"Credit\" ? \"+\" : \"-\"} â‚¹{t.amount}\r\n//                 </p>\r\n//               </div>\r\n//             ))\r\n//           )}\r\n//         </div>\r\n//       )}\r\n\r\n//       {activeTab === \"withdrawals\" && (\r\n//         <div className=\"mt-6 space-y-3\">\r\n//           <button\r\n//             onClick={() => setShowWithdrawForm(!showWithdrawForm)}\r\n//             className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n//           >\r\n//             + New Withdrawal\r\n//           </button>\r\n\r\n//           {showWithdrawForm && (\r\n//             <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n//               {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map((field) => (\r\n//                 <div key={field}>\r\n//                   <input\r\n//                     type={field === \"amount\" ? \"number\" : \"text\"}\r\n//                     name={field}\r\n//                     placeholder={\r\n//                       field === \"bankName\"\r\n//                         ? \"Bank Name\"\r\n//                         : field === \"accountNumber\"\r\n//                         ? \"Account Number\"\r\n//                         : field === \"ifscCode\"\r\n//                         ? \"IFSC Code\"\r\n//                         : field === \"mobileNumber\"\r\n//                         ? \"Mobile Number\"\r\n//                         : \"Amount\"\r\n//                     }\r\n//                     value={withdrawalForm[field]}\r\n//                     onChange={handleInputChange}\r\n//                     className={`w-full border rounded-lg px-3 py-2 ${\r\n//                       formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\r\n//                     }`}\r\n//                   />\r\n//                   {formErrors[field] && (\r\n//                     <p className=\"text-red-500 text-sm mt-1\">{formErrors[field]}</p>\r\n//                   )}\r\n//                 </div>\r\n//               ))}\r\n//               <button\r\n//                 onClick={handleWithdrawalSubmit}\r\n//                 disabled={loading.submit}\r\n//                 className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n//               >\r\n//                 {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n//               </button>\r\n//             </div>\r\n//           )}\r\n\r\n//           <div className=\"space-y-3\">\r\n//             {withdrawalRequests.length === 0 ? (\r\n//               <p className=\"text-gray-500 text-center\">No withdrawal requests yet.</p>\r\n//             ) : (\r\n//               withdrawalRequests.map((req, i) => (\r\n//                 <div\r\n//                   key={i}\r\n//                   className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n//                 >\r\n//                   <div>\r\n//                     <p className=\"font-medium\">â‚¹{req.amount}</p>\r\n//                     <p className=\"text-sm text-gray-500\">{formatDate(req.date)}</p>\r\n//                   </div>\r\n//                   <span\r\n//                     className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\r\n//                       req.status\r\n//                     )}`}\r\n//                   >\r\n//                     {getStatusIcon(req.status)}\r\n//                     {req.status}\r\n//                   </span>\r\n//                 </div>\r\n//               ))\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EnhancedWallet;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  Clock,\r\n  CheckCircle,\r\n  X,\r\n  Wallet as WalletIcon,\r\n  IndianRupee,\r\n} from \"lucide-react\";\r\nimport userWalletAPI from \"../../services/userWalletApi\";\r\n\r\nconst EnhancedWallet = () => {\r\n  const { userId } = useParams();\r\n\r\n  const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\r\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\r\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\r\n  const [loading, setLoading] = useState({\r\n    wallet: false,\r\n    withdrawals: false,\r\n    submit: false,\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [activeTab, setActiveTab] = useState(\"transactions\");\r\n\r\n  const [withdrawalForm, setWithdrawalForm] = useState({\r\n    bankName: \"\",\r\n    accountNumber: \"\",\r\n    ifscCode: \"\",\r\n    mobileNumber: \"\",\r\n    amount: \"\",\r\n  });\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  // ---------- helpers ----------\r\n  const formatDate = (dateString) => {\r\n    if (!dateString) return \"-\";\r\n    const options = { day: \"numeric\", month: \"short\", year: \"numeric\" };\r\n    return new Date(dateString).toLocaleDateString(\"en-IN\", options);\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case \"Pending\":\r\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\r\n      case \"Approved\":\r\n      case \"Completed\":\r\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\r\n      case \"Rejected\":\r\n        return <X className=\"h-4 w-4 text-red-500\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case \"Pending\":\r\n        return \"bg-yellow-100 text-yellow-700\";\r\n      case \"Approved\":\r\n      case \"Completed\":\r\n        return \"bg-green-100 text-green-700\";\r\n      case \"Rejected\":\r\n        return \"bg-red-100 text-red-700\";\r\n      default:\r\n        return \"bg-gray-100 text-gray-700\";\r\n    }\r\n  };\r\n\r\n  const prettyType = (t) => {\r\n    // backend types: 'bonus', 'deduct', 'withdrawal', 'refund'\r\n    const map = { bonus: \"Bonus\", deduct: \"Deduction\", withdrawal: \"Withdrawal\", refund: \"Refund\" };\r\n    return map[t] || t || \"Transaction\";\r\n  };\r\n\r\n  const amountClass = (amt) =>\r\n    Number(amt) >= 0 ? \"text-green-600\" : \"text-red-600\";\r\n\r\n  const sign = (amt) => (Number(amt) >= 0 ? \"+\" : \"-\");\r\n\r\n  // ---------- API calls ----------\r\n  const loadWallet = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      setLoading((p) => ({ ...p, wallet: true }));\r\n      setError(\"\");\r\n      const res = await userWalletAPI.getWallet(userId);\r\n      // expect: { success, wallet: { balance, transactions } }\r\n      const w = res?.data?.wallet || res?.data || {}; // tolerate shapes\r\n      setWallet({\r\n        balance: Number(w.balance) || 0,\r\n        transactions: Array.isArray(w.transactions) ? w.transactions : [],\r\n      });\r\n    } catch (err) {\r\n      setError(\r\n        err?.response?.data?.message ||\r\n          err?.message ||\r\n          \"Failed to fetch wallet\"\r\n      );\r\n    } finally {\r\n      setLoading((p) => ({ ...p, wallet: false }));\r\n    }\r\n  };\r\n\r\n  const loadRequests = async () => {\r\n    if (!userId) return;\r\n    try {\r\n      setLoading((p) => ({ ...p, withdrawals: true }));\r\n      setError(\"\");\r\n      const res = await userWalletAPI.getWithdrawals(userId);\r\n      // expect: { success, withdrawalRequests: [...] }\r\n      const list =\r\n        res?.data?.withdrawalRequests ||\r\n        res?.data ||\r\n        [];\r\n      setWithdrawalRequests(Array.isArray(list) ? list : []);\r\n    } catch (err) {\r\n      setError(\r\n        err?.response?.data?.message ||\r\n          err?.message ||\r\n          \"Failed to fetch withdrawals\"\r\n      );\r\n    } finally {\r\n      setLoading((p) => ({ ...p, withdrawals: false }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      loadWallet();\r\n      loadRequests();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [userId]);\r\n\r\n  // ---------- validations ----------\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    let isValid = true;\r\n\r\n    if (!withdrawalForm.bankName.trim()) {\r\n      errors.bankName = \"Bank name is required\";\r\n      isValid = false;\r\n    }\r\n    if (\r\n      !withdrawalForm.accountNumber.trim() ||\r\n      !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)\r\n    ) {\r\n      errors.accountNumber = \"Valid account number is required (9-18 digits)\";\r\n      isValid = false;\r\n    }\r\n    if (\r\n      !withdrawalForm.ifscCode.trim() ||\r\n      !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)\r\n    ) {\r\n      errors.ifscCode = \"Valid IFSC code is required\";\r\n      isValid = false;\r\n    }\r\n    if (\r\n      !withdrawalForm.mobileNumber.trim() ||\r\n      !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)\r\n    ) {\r\n      errors.mobileNumber = \"Valid Indian mobile number is required\";\r\n      isValid = false;\r\n    }\r\n    const amt = parseFloat(withdrawalForm.amount);\r\n    if (!amt || amt < 1000) {\r\n      errors.amount = \"Minimum withdrawal amount is â‚¹1000\";\r\n      isValid = false;\r\n    } else if (amt > (Number(wallet.balance) || 0)) {\r\n      errors.amount = \"Insufficient balance\";\r\n      isValid = false;\r\n    }\r\n\r\n    setFormErrors(errors);\r\n    return isValid;\r\n  };\r\n\r\n  // ---------- submit ----------\r\n  const handleWithdrawalSubmit = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading((p) => ({ ...p, submit: true }));\r\n    setError(\"\");\r\n    setSuccess(\"\");\r\n\r\n    try {\r\n      // backend expects POST /api/wallet/withdraw  with body { userId, amount, ... }\r\n      await userWalletAPI.requestWithdrawal({\r\n        userId,\r\n        ...withdrawalForm,\r\n        amount: Number(withdrawalForm.amount),\r\n      });\r\n\r\n      setSuccess(\"Withdrawal request submitted successfully!\");\r\n      setShowWithdrawForm(false);\r\n      setWithdrawalForm({\r\n        bankName: \"\",\r\n        accountNumber: \"\",\r\n        ifscCode: \"\",\r\n        mobileNumber: \"\",\r\n        amount: \"\",\r\n      });\r\n\r\n      await Promise.all([loadWallet(), loadRequests()]);\r\n    } catch (err) {\r\n      setError(\r\n        err?.response?.data?.message ||\r\n          err?.message ||\r\n          \"Withdrawal failed\"\r\n      );\r\n    } finally {\r\n      setLoading((p) => ({ ...p, submit: false }));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setWithdrawalForm((prev) => ({ ...prev, [name]: value }));\r\n    if (formErrors[name]) {\r\n      setFormErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n    }\r\n  };\r\n\r\n  // ---------- UI ----------\r\n  return (\r\n    <div className=\"p-4 md:p-6 max-w-5xl mx-auto\">\r\n      <div className=\"bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-2xl p-6 flex items-center justify-between shadow-lg\">\r\n        <div>\r\n          <h2 className=\"text-lg font-semibold\">Wallet Balance</h2>\r\n          <p className=\"text-3xl font-bold flex items-center gap-2 mt-2\">\r\n            <IndianRupee size={24} /> {(Number(wallet.balance) || 0).toFixed(2)}\r\n          </p>\r\n        </div>\r\n        <WalletIcon size={50} className=\"opacity-70\" />\r\n      </div>\r\n\r\n      <div className=\"mt-6 flex gap-4 border-b\">\r\n        <button\r\n          onClick={() => setActiveTab(\"transactions\")}\r\n          className={`pb-2 px-4 ${\r\n            activeTab === \"transactions\"\r\n              ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n              : \"text-gray-600\"\r\n          }`}\r\n        >\r\n          Transactions\r\n        </button>\r\n        <button\r\n          onClick={() => setActiveTab(\"withdrawals\")}\r\n          className={`pb-2 px-4 ${\r\n            activeTab === \"withdrawals\"\r\n              ? \"border-b-2 border-blue-600 font-semibold text-blue-600\"\r\n              : \"text-gray-600\"\r\n          }`}\r\n        >\r\n          Withdrawals\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <p className=\"mt-4 text-red-600 bg-red-50 p-2 rounded\">{error}</p>\r\n      )}\r\n      {success && (\r\n        <p className=\"mt-4 text-green-600 bg-green-50 p-2 rounded\">{success}</p>\r\n      )}\r\n\r\n      {activeTab === \"transactions\" && (\r\n        <div className=\"mt-6 space-y-3\">\r\n          {loading.wallet ? (\r\n            <p className=\"text-gray-500 text-center\">Loading walletâ€¦</p>\r\n          ) : wallet.transactions.length === 0 ? (\r\n            <p className=\"text-gray-500 text-center\">No transactions yet.</p>\r\n          ) : (\r\n            wallet.transactions.map((t, i) => (\r\n              <div\r\n                key={t._id || i}\r\n                className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n              >\r\n                <div>\r\n                  <p className=\"font-medium\">{prettyType(t.type)}</p>\r\n                  <p className=\"text-sm text-gray-500\">{formatDate(t.date)}</p>\r\n                </div>\r\n                <p className={`font-semibold ${amountClass(t.amount)}`}>\r\n                  {sign(t.amount)} â‚¹{Math.abs(Number(t.amount) || 0)}\r\n                </p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {activeTab === \"withdrawals\" && (\r\n        <div className=\"mt-6 space-y-3\">\r\n          <button\r\n            onClick={() => setShowWithdrawForm((s) => !s)}\r\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-lg shadow hover:bg-blue-700\"\r\n          >\r\n            {showWithdrawForm ? \"Close\" : \"+ New Withdrawal\"}\r\n          </button>\r\n\r\n          {showWithdrawForm && (\r\n            <div className=\"mt-4 bg-white shadow rounded-xl p-4 space-y-4\">\r\n              {[\"bankName\", \"accountNumber\", \"ifscCode\", \"mobileNumber\", \"amount\"].map(\r\n                (field) => (\r\n                  <div key={field}>\r\n                    <input\r\n                      type={field === \"amount\" ? \"number\" : \"text\"}\r\n                      name={field}\r\n                      placeholder={\r\n                        field === \"bankName\"\r\n                          ? \"Bank Name\"\r\n                          : field === \"accountNumber\"\r\n                          ? \"Account Number\"\r\n                          : field === \"ifscCode\"\r\n                          ? \"IFSC Code\"\r\n                          : field === \"mobileNumber\"\r\n                          ? \"Mobile Number\"\r\n                          : \"Amount\"\r\n                      }\r\n                      value={withdrawalForm[field]}\r\n                      onChange={handleInputChange}\r\n                      className={`w-full border rounded-lg px-3 py-2 ${\r\n                        formErrors[field] ? \"border-red-500\" : \"border-gray-300\"\r\n                      }`}\r\n                    />\r\n                    {formErrors[field] && (\r\n                      <p className=\"text-red-500 text-sm mt-1\">\r\n                        {formErrors[field]}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                )\r\n              )}\r\n              <button\r\n                onClick={handleWithdrawalSubmit}\r\n                disabled={loading.submit}\r\n                className=\"w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 disabled:opacity-50\"\r\n              >\r\n                {loading.submit ? \"Submitting...\" : \"Submit Withdrawal\"}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"space-y-3\">\r\n            {loading.withdrawals ? (\r\n              <p className=\"text-gray-500 text-center\">Loading withdrawalsâ€¦</p>\r\n            ) : withdrawalRequests.length === 0 ? (\r\n              <p className=\"text-gray-500 text-center\">\r\n                No withdrawal requests yet.\r\n              </p>\r\n            ) : (\r\n              withdrawalRequests.map((req, i) => (\r\n                <div\r\n                  key={req.id || i}\r\n                  className=\"flex justify-between items-center bg-white shadow-sm p-3 rounded-lg\"\r\n                >\r\n                  <div>\r\n                    <p className=\"font-medium\">â‚¹{req.amount}</p>\r\n                    <p className=\"text-sm text-gray-500\">\r\n                      {formatDate(req.requestDate)}\r\n                    </p>\r\n                  </div>\r\n                  <span\r\n                    className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full ${getStatusColor(\r\n                      req.status\r\n                    )}`}\r\n                  >\r\n                    {getStatusIcon(req.status)}\r\n                    {req.status}\r\n                  </span>\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnhancedWallet;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SACEC,KAAK,EACLC,WAAW,EACXC,CAAC,EACDC,MAAM,IAAIC,UAAU,EACpBC,WAAW,QACN,cAAc;AACrB,OAAOC,aAAa,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAO,CAAC,GAAGZ,SAAS,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}