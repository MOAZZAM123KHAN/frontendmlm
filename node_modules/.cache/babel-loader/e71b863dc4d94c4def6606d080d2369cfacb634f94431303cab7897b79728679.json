{"ast":null,"code":"// // src/services/userWalletApi.js\n// import axios from \"axios\";\n\n// const API_URL = \"http://localhost:5001/api/wallet\";\n// const TOKEN_KEY = \"userToken\";\n\n// const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// userWalletAPI.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(TOKEN_KEY);\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\n//   return config;\n// });\n\n// export default {\n//   getWallet: async (userId) => {\n//     const res = await userWalletAPI.get(`/user/${userId}`);\n//     return res.data;\n//   },\n//   getWithdrawals: async (userId) => {\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n//     return res.data;\n//   },\n//   requestWithdrawal: async (userId, amount, bankDetails) => {\n//     const res = await userWalletAPI.post(`/withdraw`, {\n//       userId,\n//       amount,\n//       ...bankDetails,\n//     });\n//     return res.data;\n//   },\n// };\n\n// src/services/api.js\nimport axios from \"axios\";\n\n/** Toggle: mock vs real backend */\nexport const USE_MOCK = true;\n\n// ---------- REAL BACKEND (if you have it) ----------\nconst REAL_BASE = \"http://localhost:5001/api\";\nexport const http = axios.create({\n  baseURL: REAL_BASE\n});\n\n// ---------- MOCK BACKEND ----------\nconst wait = ms => new Promise(r => setTimeout(r, ms));\n\n/**\r\n * In-memory mock DB\r\n * You can change mobile / users as you like.\r\n */\nconst mockDB = {\n  mobiles: {\n    \"+9181273575704\": [\"user1\", \"user2\", \"user3\"],\n    \"+911234567890\": [\"user4\"]\n  },\n  users: {\n    // userId: { password, parentMobile, isAdmin, _id }\n    user1: {\n      _id: \"u_user1\",\n      password: \"pass123\",\n      parentMobile: \"+9181273575704\",\n      isAdmin: false\n    },\n    user2: {\n      _id: \"u_user2\",\n      password: \"pass123\",\n      parentMobile: \"+9181273575704\",\n      isAdmin: false\n    },\n    user3: {\n      _id: \"u_user3\",\n      password: \"pass123\",\n      parentMobile: \"+9181273575704\",\n      isAdmin: false\n    },\n    user4: {\n      _id: \"u_user4\",\n      password: \"admin123\",\n      parentMobile: \"+911234567890\",\n      isAdmin: true\n    }\n  }\n};\nconst tokenOf = userId => `mock-token-${userId}-${Date.now()}`;\nasync function mockLogin({\n  userId,\n  password,\n  parentMobile\n}) {\n  await wait(500);\n  const user = mockDB.users[userId];\n  if (!user) {\n    return {\n      success: false,\n      message: \"Invalid User ID\"\n    };\n  }\n  if (user.password !== password) {\n    return {\n      success: false,\n      message: \"Invalid password\"\n    };\n  }\n  if (user.parentMobile !== parentMobile) {\n    return {\n      success: false,\n      message: \"Mobile number not linked with this user\"\n    };\n  }\n  const allUserIds = mockDB.mobiles[parentMobile] || [userId];\n  const data = {\n    token: tokenOf(userId),\n    user: {\n      _id: user._id,\n      userId,\n      parentMobile\n    },\n    allUserIds,\n    isAdmin: user.isAdmin,\n    parentMobile,\n    message: \"Login success (MOCK)\"\n  };\n  return {\n    success: true,\n    data\n  };\n}\nasync function mockGenerateUserId({\n  mobileNumber\n}) {\n  await wait(400);\n  const list = mockDB.mobiles[mobileNumber] || [];\n  const nextNum = list.length + 1;\n  const userId = `user${nextNum}`;\n  return {\n    success: true,\n    userId\n  };\n}\nasync function mockCompleteSignup(payload) {\n  await wait(600);\n  const {\n    userId,\n    password = \"pass123\",\n    mobileNumber\n  } = payload;\n\n  // add to maps\n  if (!mockDB.mobiles[mobileNumber]) mockDB.mobiles[mobileNumber] = [];\n  if (!mockDB.mobiles[mobileNumber].includes(userId)) {\n    mockDB.mobiles[mobileNumber].push(userId);\n  }\n  mockDB.users[userId] = {\n    _id: `u_${userId}`,\n    password,\n    parentMobile: mobileNumber,\n    isAdmin: false\n  };\n  return {\n    success: true,\n    message: \"Signup complete (MOCK)\",\n    userId\n  };\n}\nasync function mockGetUserIdsByMobile(mobile) {\n  await wait(300);\n  return {\n    success: true,\n    userIds: mockDB.mobiles[mobile] || []\n  };\n}\n\n// ---------- EXPORTED API ----------\nexport const authAPI = USE_MOCK ? {\n  login: mockLogin,\n  generateUserId: mockGenerateUserId,\n  completeSignup: mockCompleteSignup,\n  getUserIdsByMobile: mockGetUserIdsByMobile\n} : {\n  login: async body => {\n    const {\n      data\n    } = await http.post(\"/auth/login\", body);\n    return data;\n  },\n  generateUserId: async body => {\n    const {\n      data\n    } = await http.post(\"/auth/generate-userid\", body);\n    return data;\n  },\n  completeSignup: async body => {\n    const {\n      data\n    } = await http.post(\"/auth/signup\", body);\n    return data;\n  },\n  getUserIdsByMobile: async mobile => {\n    const {\n      data\n    } = await http.get(`/auth/userids/${mobile}`);\n    return data;\n  }\n};","map":{"version":3,"names":["axios","USE_MOCK","REAL_BASE","http","create","baseURL","wait","ms","Promise","r","setTimeout","mockDB","mobiles","users","user1","_id","password","parentMobile","isAdmin","user2","user3","user4","tokenOf","userId","Date","now","mockLogin","user","success","message","allUserIds","data","token","mockGenerateUserId","mobileNumber","list","nextNum","length","mockCompleteSignup","payload","includes","push","mockGetUserIdsByMobile","mobile","userIds","authAPI","login","generateUserId","completeSignup","getUserIdsByMobile","body","post","get"],"sources":["C:/Users/moazz/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/services/userWalletApi.js"],"sourcesContent":["// // src/services/userWalletApi.js\r\n// import axios from \"axios\";\r\n\r\n// const API_URL = \"http://localhost:5001/api/wallet\";\r\n// const TOKEN_KEY = \"userToken\";\r\n\r\n// const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// userWalletAPI.interceptors.request.use((config) => {\r\n//   const token = localStorage.getItem(TOKEN_KEY);\r\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n//   return config;\r\n// });\r\n\r\n// export default {\r\n//   getWallet: async (userId) => {\r\n//     const res = await userWalletAPI.get(`/user/${userId}`);\r\n//     return res.data;\r\n//   },\r\n//   getWithdrawals: async (userId) => {\r\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n//     return res.data;\r\n//   },\r\n//   requestWithdrawal: async (userId, amount, bankDetails) => {\r\n//     const res = await userWalletAPI.post(`/withdraw`, {\r\n//       userId,\r\n//       amount,\r\n//       ...bankDetails,\r\n//     });\r\n//     return res.data;\r\n//   },\r\n// };\r\n\r\n\r\n// src/services/api.js\r\nimport axios from \"axios\";\r\n\r\n/** Toggle: mock vs real backend */\r\nexport const USE_MOCK = true;\r\n\r\n// ---------- REAL BACKEND (if you have it) ----------\r\nconst REAL_BASE = \"http://localhost:5001/api\";\r\nexport const http = axios.create({ baseURL: REAL_BASE });\r\n\r\n// ---------- MOCK BACKEND ----------\r\nconst wait = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\n/**\r\n * In-memory mock DB\r\n * You can change mobile / users as you like.\r\n */\r\nconst mockDB = {\r\n  mobiles: {\r\n    \"+9181273575704\": [\"user1\", \"user2\", \"user3\"],\r\n    \"+911234567890\": [\"user4\"],\r\n  },\r\n  users: {\r\n    // userId: { password, parentMobile, isAdmin, _id }\r\n    user1: {\r\n      _id: \"u_user1\",\r\n      password: \"pass123\",\r\n      parentMobile: \"+9181273575704\",\r\n      isAdmin: false,\r\n    },\r\n    user2: {\r\n      _id: \"u_user2\",\r\n      password: \"pass123\",\r\n      parentMobile: \"+9181273575704\",\r\n      isAdmin: false,\r\n    },\r\n    user3: {\r\n      _id: \"u_user3\",\r\n      password: \"pass123\",\r\n      parentMobile: \"+9181273575704\",\r\n      isAdmin: false,\r\n    },\r\n    user4: {\r\n      _id: \"u_user4\",\r\n      password: \"admin123\",\r\n      parentMobile: \"+911234567890\",\r\n      isAdmin: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst tokenOf = (userId) => `mock-token-${userId}-${Date.now()}`;\r\n\r\nasync function mockLogin({ userId, password, parentMobile }) {\r\n  await wait(500);\r\n\r\n  const user = mockDB.users[userId];\r\n  if (!user) {\r\n    return { success: false, message: \"Invalid User ID\" };\r\n  }\r\n  if (user.password !== password) {\r\n    return { success: false, message: \"Invalid password\" };\r\n  }\r\n  if (user.parentMobile !== parentMobile) {\r\n    return { success: false, message: \"Mobile number not linked with this user\" };\r\n  }\r\n\r\n  const allUserIds = mockDB.mobiles[parentMobile] || [userId];\r\n  const data = {\r\n    token: tokenOf(userId),\r\n    user: { _id: user._id, userId, parentMobile },\r\n    allUserIds,\r\n    isAdmin: user.isAdmin,\r\n    parentMobile,\r\n    message: \"Login success (MOCK)\",\r\n  };\r\n  return { success: true, data };\r\n}\r\n\r\nasync function mockGenerateUserId({ mobileNumber }) {\r\n  await wait(400);\r\n  const list = mockDB.mobiles[mobileNumber] || [];\r\n  const nextNum = list.length + 1;\r\n  const userId = `user${nextNum}`;\r\n  return { success: true, userId };\r\n}\r\n\r\nasync function mockCompleteSignup(payload) {\r\n  await wait(600);\r\n  const { userId, password = \"pass123\", mobileNumber } = payload;\r\n\r\n  // add to maps\r\n  if (!mockDB.mobiles[mobileNumber]) mockDB.mobiles[mobileNumber] = [];\r\n  if (!mockDB.mobiles[mobileNumber].includes(userId)) {\r\n    mockDB.mobiles[mobileNumber].push(userId);\r\n  }\r\n  mockDB.users[userId] = {\r\n    _id: `u_${userId}`,\r\n    password,\r\n    parentMobile: mobileNumber,\r\n    isAdmin: false,\r\n  };\r\n  return { success: true, message: \"Signup complete (MOCK)\", userId };\r\n}\r\n\r\nasync function mockGetUserIdsByMobile(mobile) {\r\n  await wait(300);\r\n  return {\r\n    success: true,\r\n    userIds: mockDB.mobiles[mobile] || [],\r\n  };\r\n}\r\n\r\n// ---------- EXPORTED API ----------\r\nexport const authAPI = USE_MOCK\r\n  ? {\r\n      login: mockLogin,\r\n      generateUserId: mockGenerateUserId,\r\n      completeSignup: mockCompleteSignup,\r\n      getUserIdsByMobile: mockGetUserIdsByMobile,\r\n    }\r\n  : {\r\n      login: async (body) => {\r\n        const { data } = await http.post(\"/auth/login\", body);\r\n        return data;\r\n      },\r\n      generateUserId: async (body) => {\r\n        const { data } = await http.post(\"/auth/generate-userid\", body);\r\n        return data;\r\n      },\r\n      completeSignup: async (body) => {\r\n        const { data } = await http.post(\"/auth/signup\", body);\r\n        return data;\r\n      },\r\n      getUserIdsByMobile: async (mobile) => {\r\n        const { data } = await http.get(`/auth/userids/${mobile}`);\r\n        return data;\r\n      },\r\n    };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}