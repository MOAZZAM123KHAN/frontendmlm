{"ast":null,"code":"// // // // src/services/userWalletApi.js\n// // // import axios from \"axios\";\n\n// // // const API_URL = \"http://localhost:5001/api/wallet\";\n// // // const TOKEN_KEY = \"userToken\";\n\n// // // const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// // // userWalletAPI.interceptors.request.use((config) => {\n// // //   const token = localStorage.getItem(TOKEN_KEY);\n// // //   if (token) config.headers.Authorization = `Bearer ${token}`;\n// // //   return config;\n// // // });\n\n// // // export default {\n// // //   getWallet: async (userId) => {\n// // //     const res = await userWalletAPI.get(`/user/${userId}`);\n// // //     return res.data;\n// // //   },\n// // //   getWithdrawals: async (userId) => {\n// // //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n// // //     return res.data;\n// // //   },\n// // //   requestWithdrawal: async (userId, amount, bankDetails) => {\n// // //     const res = await userWalletAPI.post(`/withdraw`, {\n// // //       userId,\n// // //       amount,\n// // //       ...bankDetails,\n// // //     });\n// // //     return res.data;\n// // //   },\n// // // };\n\n// // // src/services/userWalletApi.js\n// // import axios from \"axios\";\n\n// // const API_URL = \"http://localhost:5001/api/wallet\";\n// // const TOKEN_KEY = \"authToken\";\n\n// // // axios instance\n// // const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// // // har request ke header me token inject karega\n// // userWalletAPI.interceptors.request.use((config) => {\n// //   const token = localStorage.getItem(TOKEN_KEY);\n// //   if (token) config.headers.Authorization = `Bearer ${token}`;\n// //   return config;\n// // });\n\n// // export default {\n// //   // GET wallet data\n// //   getWallet: async () => {\n// //     const userId =\n// //       localStorage.getItem(\"selectedUserId\") ||\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n// //     const res = await userWalletAPI.get(`/user/${userId}`);\n// //     return res.data;\n// //   },\n\n// //   // GET withdrawals\n// //   getWithdrawals: async () => {\n// //     const userId =\n// //       localStorage.getItem(\"selectedUserId\") ||\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n// //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n// //     return res.data;\n// //   },\n\n// //   // POST withdrawal request\n// //   requestWithdrawal: async (amount, bankDetails) => {\n// //     const userId =\n// //       localStorage.getItem(\"selectedUserId\") ||\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\n\n// //     const res = await userWalletAPI.post(`/withdraw`, {\n// //       userId,\n// //       amount,\n// //       ...bankDetails,\n// //     });\n// //     return res.data;\n// //   },\n// // };\n\n// // src/services/userWalletApi.js\n// import axios from \"axios\";\n\n// const API_URL = \"http://localhost:5001/api/wallet\";\n\n// // axios instance\n// const userWalletAPI = axios.create({ baseURL: API_URL });\n\n// // helper to get token from multiple possible keys\n// const getToken = () => {\n//   const keys = [\"authToken\", \"token\", \"userToken\"];\n//   for (let key of keys) {\n//     const val = localStorage.getItem(key);\n//     if (val) return val;\n//   }\n//   return null;\n// };\n\n// // har request ke header me token inject karega\n// userWalletAPI.interceptors.request.use((config) => {\n//   const token = getToken();\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\n//   return config;\n// });\n\n// // helper to get current userId (selected or active)\n// const getUserId = () => {\n//   return (\n//     localStorage.getItem(\"selectedUserId\") ||\n//     JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId\n//   );\n// };\n\n// export default {\n//   // GET wallet data\n//   getWallet: async () => {\n//     const userId = getUserId();\n//     const res = await userWalletAPI.get(`/user/${userId}`);\n//     return res.data;\n//   },\n\n//   // GET withdrawals\n//   getWithdrawals: async () => {\n//     const userId = getUserId();\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\n//     return res.data;\n//   },\n\n//   // POST withdrawal request\n//   requestWithdrawal: async (amount, bankDetails) => {\n//     const userId = getUserId();\n//     const res = await userWalletAPI.post(`/withdraw`, {\n//       userId,\n//       amount,\n//       ...bankDetails,\n//     });\n//     return res.data;\n//   },\n// };\n\nimport axios from \"axios\";\nconst API = axios.create({\n  baseURL: \"http://localhost:5001/api/wallet\"\n});\n\n// 🟢 Add token to every request\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"authToken\"); // ✅ same key as LoginForm\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log(\"👉 Attached token:\", token); // debug\n  } else {\n    console.warn(\"⚠️ No token found in localStorage!\");\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// ✅ Wallet APIs\nexport const getUserWallet = userId => API.get(`/user/${userId}`);\nexport const getUserWithdrawals = userId => API.get(`/withdrawals/${userId}`);\nexport const requestWithdrawal = (userId, amount) => API.post(`/withdraw/${userId}`, {\n  amount\n});\nexport default API;","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","console","log","warn","error","Promise","reject","getUserWallet","userId","get","getUserWithdrawals","requestWithdrawal","amount","post"],"sources":["C:/Users/moazz/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/services/userWalletApi.js"],"sourcesContent":["// // // // src/services/userWalletApi.js\r\n// // // import axios from \"axios\";\r\n\r\n// // // const API_URL = \"http://localhost:5001/api/wallet\";\r\n// // // const TOKEN_KEY = \"userToken\";\r\n\r\n// // // const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// // // userWalletAPI.interceptors.request.use((config) => {\r\n// // //   const token = localStorage.getItem(TOKEN_KEY);\r\n// // //   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n// // //   return config;\r\n// // // });\r\n\r\n// // // export default {\r\n// // //   getWallet: async (userId) => {\r\n// // //     const res = await userWalletAPI.get(`/user/${userId}`);\r\n// // //     return res.data;\r\n// // //   },\r\n// // //   getWithdrawals: async (userId) => {\r\n// // //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n// // //     return res.data;\r\n// // //   },\r\n// // //   requestWithdrawal: async (userId, amount, bankDetails) => {\r\n// // //     const res = await userWalletAPI.post(`/withdraw`, {\r\n// // //       userId,\r\n// // //       amount,\r\n// // //       ...bankDetails,\r\n// // //     });\r\n// // //     return res.data;\r\n// // //   },\r\n// // // };\r\n\r\n\r\n\r\n// // // src/services/userWalletApi.js\r\n// // import axios from \"axios\";\r\n\r\n// // const API_URL = \"http://localhost:5001/api/wallet\";\r\n// // const TOKEN_KEY = \"authToken\";\r\n\r\n// // // axios instance\r\n// // const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// // // har request ke header me token inject karega\r\n// // userWalletAPI.interceptors.request.use((config) => {\r\n// //   const token = localStorage.getItem(TOKEN_KEY);\r\n// //   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n// //   return config;\r\n// // });\r\n\r\n// // export default {\r\n// //   // GET wallet data\r\n// //   getWallet: async () => {\r\n// //     const userId =\r\n// //       localStorage.getItem(\"selectedUserId\") ||\r\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n// //     const res = await userWalletAPI.get(`/user/${userId}`);\r\n// //     return res.data;\r\n// //   },\r\n\r\n// //   // GET withdrawals\r\n// //   getWithdrawals: async () => {\r\n// //     const userId =\r\n// //       localStorage.getItem(\"selectedUserId\") ||\r\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n// //     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n// //     return res.data;\r\n// //   },\r\n\r\n// //   // POST withdrawal request\r\n// //   requestWithdrawal: async (amount, bankDetails) => {\r\n// //     const userId =\r\n// //       localStorage.getItem(\"selectedUserId\") ||\r\n// //       JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId;\r\n\r\n// //     const res = await userWalletAPI.post(`/withdraw`, {\r\n// //       userId,\r\n// //       amount,\r\n// //       ...bankDetails,\r\n// //     });\r\n// //     return res.data;\r\n// //   },\r\n// // };\r\n\r\n\r\n\r\n// // src/services/userWalletApi.js\r\n// import axios from \"axios\";\r\n\r\n// const API_URL = \"http://localhost:5001/api/wallet\";\r\n\r\n// // axios instance\r\n// const userWalletAPI = axios.create({ baseURL: API_URL });\r\n\r\n// // helper to get token from multiple possible keys\r\n// const getToken = () => {\r\n//   const keys = [\"authToken\", \"token\", \"userToken\"];\r\n//   for (let key of keys) {\r\n//     const val = localStorage.getItem(key);\r\n//     if (val) return val;\r\n//   }\r\n//   return null;\r\n// };\r\n\r\n// // har request ke header me token inject karega\r\n// userWalletAPI.interceptors.request.use((config) => {\r\n//   const token = getToken();\r\n//   if (token) config.headers.Authorization = `Bearer ${token}`;\r\n//   return config;\r\n// });\r\n\r\n// // helper to get current userId (selected or active)\r\n// const getUserId = () => {\r\n//   return (\r\n//     localStorage.getItem(\"selectedUserId\") ||\r\n//     JSON.parse(localStorage.getItem(\"activeUser\") || \"{}\").userId\r\n//   );\r\n// };\r\n\r\n// export default {\r\n//   // GET wallet data\r\n//   getWallet: async () => {\r\n//     const userId = getUserId();\r\n//     const res = await userWalletAPI.get(`/user/${userId}`);\r\n//     return res.data;\r\n//   },\r\n\r\n//   // GET withdrawals\r\n//   getWithdrawals: async () => {\r\n//     const userId = getUserId();\r\n//     const res = await userWalletAPI.get(`/withdrawals/${userId}`);\r\n//     return res.data;\r\n//   },\r\n\r\n//   // POST withdrawal request\r\n//   requestWithdrawal: async (amount, bankDetails) => {\r\n//     const userId = getUserId();\r\n//     const res = await userWalletAPI.post(`/withdraw`, {\r\n//       userId,\r\n//       amount,\r\n//       ...bankDetails,\r\n//     });\r\n//     return res.data;\r\n//   },\r\n// };\r\n\r\n\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5001/api/wallet\",\r\n});\r\n\r\n// 🟢 Add token to every request\r\nAPI.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"authToken\"); // ✅ same key as LoginForm\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      console.log(\"👉 Attached token:\", token); // debug\r\n    } else {\r\n      console.warn(\"⚠️ No token found in localStorage!\");\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// ✅ Wallet APIs\r\nexport const getUserWallet = (userId) => API.get(`/user/${userId}`);\r\nexport const getUserWithdrawals = (userId) => API.get(`/withdrawals/${userId}`);\r\nexport const requestWithdrawal = (userId, amount) =>\r\n  API.post(`/withdraw/${userId}`, { amount });\r\n\r\nexport default API;\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAChDK,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEN,KAAK,CAAC,CAAC,CAAC;EAC5C,CAAC,MAAM;IACLK,OAAO,CAACE,IAAI,CAAC,oCAAoC,CAAC;EACpD;EACA,OAAOR,MAAM;AACf,CAAC,EACAS,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAIC,MAAM,IAAKnB,GAAG,CAACoB,GAAG,CAAC,SAASD,MAAM,EAAE,CAAC;AACnE,OAAO,MAAME,kBAAkB,GAAIF,MAAM,IAAKnB,GAAG,CAACoB,GAAG,CAAC,gBAAgBD,MAAM,EAAE,CAAC;AAC/E,OAAO,MAAMG,iBAAiB,GAAGA,CAACH,MAAM,EAAEI,MAAM,KAC9CvB,GAAG,CAACwB,IAAI,CAAC,aAAaL,MAAM,EAAE,EAAE;EAAEI;AAAO,CAAC,CAAC;AAE7C,eAAevB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}