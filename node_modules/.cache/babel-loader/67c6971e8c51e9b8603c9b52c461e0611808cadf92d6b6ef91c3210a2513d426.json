{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moazz\\\\Downloads\\\\Ecommerce-MLM-Chain-main\\\\Ecommerce-MLM-Chain-main\\\\frontend\\\\frontend\\\\src\\\\components\\\\dashboard\\\\Wallet.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\n\n//   // Withdrawal form state\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   // Form validation state\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   // helper: parse JWT to extract userId if token contains it\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch (e) {\n//       return null;\n//     }\n//   };\n\n//   // Resolve token and userId (prop -> localStorage.authData -> token)\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch (err) {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch (err) {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   // Fetch data with error handling: skip requests if no userId/token\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch (err) {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: userId,\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       // refresh UI\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     } catch (err) {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n\n//     // Clear error when user starts typing\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending':\n//         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed':\n//         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected':\n//         return <X className=\"h-5 w-5 text-red-500\" />;\n//       default:\n//         return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending':\n//         return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed':\n//         return 'text-green-600 bg-green-50';\n//       case 'Rejected':\n//         return 'text-red-600 bg-red-50';\n//       default:\n//         return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       <div className=\"mb-6\">\n//         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\n//         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\n//       </div>\n\n//       {/* Notifications */}\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\n//           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n//           <p className=\"text-red-600\">{error}</p>\n//         </div>\n//       )}\n\n//       {success && (\n//         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\n//           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n//           <p className=\"text-green-600\">{success}</p>\n//         </div>\n//       )}\n\n//       {/* Balance Card */}\n//       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\n//         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n//           <div>\n//             <p className=\"text-blue-100 text-sm\">Available Balance</p>\n//             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\n//             <p className=\"text-blue-100 text-sm mt-2\">\n//               {wallet.balance >= 1000 ? (\n//                 'Eligible for withdrawal'\n//               ) : (\n//                 <>\n//                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\n//                 </>\n//               )}\n//             </p>\n//           </div>\n//           <div className=\"flex gap-3 w-full md:w-auto\">\n//             <button\n//               onClick={() => setShowWithdrawForm(true)}\n//               disabled={wallet.balance < 1000}\n//               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\n//                 wallet.balance >= 1000\n//                   ? 'bg-white text-blue-600 hover:bg-blue-50'\n//                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n//               }`}\n//             >\n//               <ArrowUp className=\"h-5 w-5\" />\n//               <span>Withdraw</span>\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex border-b border-gray-200 mb-6\">\n//         <button\n//           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n//             activeTab === 'transactions'\n//               ? 'border-blue-500 text-blue-600'\n//               : 'border-transparent text-gray-500 hover:text-gray-700'\n//           }`}\n//           onClick={() => setActiveTab('transactions')}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n//             activeTab === 'withdrawals'\n//               ? 'border-blue-500 text-blue-600'\n//               : 'border-transparent text-gray-500 hover:text-gray-700'\n//           }`}\n//           onClick={() => setActiveTab('withdrawals')}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {/* Content based on active tab */}\n//       {activeTab === 'transactions' ? (\n//         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n//           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\n//             <div className=\"text-sm text-gray-500\">\n//               {wallet.transactions.length} records\n//             </div>\n//           </div>\n//           <div className=\"max-h-[500px] overflow-y-auto\">\n//             {loading.wallet ? (\n//               <div className=\"p-8 text-center\">\n//                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n//                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\n//               </div>\n//             ) : wallet.transactions.length === 0 ? (\n//               <div className=\"p-8 text-center text-gray-500\">\n//                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n//                 <p>No transactions yet</p>\n//               </div>\n//             ) : (\n//               <div className=\"divide-y divide-gray-200\">\n//                 {wallet.transactions.map((txn) => (\n//                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n//                     <div className=\"flex justify-between items-center\">\n//                       <div className=\"flex items-center gap-4\">\n//                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n//                           {txn.amount > 0 ? (\n//                             <Plus className=\"h-5 w-5 text-green-600\" />\n//                           ) : (\n//                             <Minus className=\"h-5 w-5 text-red-600\" />\n//                           )}\n//                         </div>\n//                         <div>\n//                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\n//                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\n//                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\n//                         </div>\n//                       </div>\n//                       <div className=\"text-right\">\n//                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n//                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\n//                         </p>\n//                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\n//                           {txn.status}\n//                         </span>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       ) : (\n//         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n//           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\n//             <div className=\"text-sm text-gray-500\">\n//               {withdrawalRequests.length} requests\n//             </div>\n//           </div>\n//           <div className=\"max-h-[500px] overflow-y-auto\">\n//             {loading.withdrawals ? (\n//               <div className=\"p-8 text-center\">\n//                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n//                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\n//               </div>\n//             ) : withdrawalRequests.length === 0 ? (\n//               <div className=\"p-8 text-center text-gray-500\">\n//                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n//                 <p>No withdrawal requests yet</p>\n//                 <button\n//                   onClick={() => setShowWithdrawForm(true)}\n//                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n//                 >\n//                   Make your first withdrawal\n//                 </button>\n//               </div>\n//             ) : (\n//               <div className=\"divide-y divide-gray-200\">\n//                 {withdrawalRequests.map((request) => (\n//                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n//                     <div className=\"flex justify-between items-start\">\n//                       <div className=\"flex items-start gap-3\">\n//                         {getStatusIcon(request.status)}\n//                         <div>\n//                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\n//                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\n//                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\n//                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\n//                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\n//                         </div>\n//                       </div>\n//                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\n//                         {request.status}\n//                       </span>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Withdrawal Form Modal */}\n//       {showWithdrawForm && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"p-6\">\n//               <div className=\"flex justify-between items-center mb-4\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\n//                 <button\n//                   onClick={() => setShowWithdrawForm(false)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                   disabled={loading.submit}\n//                 >\n//                   <X className=\"h-6 w-6\" />\n//                 </button>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Bank Name <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"bankName\"\n//                     value={withdrawalForm.bankName}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter bank name\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.bankName && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Account Number <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"accountNumber\"\n//                     value={withdrawalForm.accountNumber}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter account number\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.accountNumber && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     IFSC Code <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"ifscCode\"\n//                     value={withdrawalForm.ifscCode}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter IFSC code\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.ifscCode && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Mobile Number <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"tel\"\n//                     name=\"mobileNumber\"\n//                     value={withdrawalForm.mobileNumber}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter mobile number\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.mobileNumber && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"number\"\n//                     name=\"amount\"\n//                     value={withdrawalForm.amount}\n//                     onChange={handleInputChange}\n//                     required\n//                     min=\"1000\"\n//                     max={wallet.balance}\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Minimum â‚¹1000\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.amount && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\n//                   )}\n//                   <p className=\"text-xs text-gray-500 mt-1\">\n//                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\n//                   </p>\n//                 </div>\n\n//                 <div className=\"flex gap-3 pt-4\">\n//                   <button\n//                     type=\"button\"\n//                     onClick={() => setShowWithdrawForm(false)}\n//                     disabled={loading.submit}\n//                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\n//                   >\n//                     Cancel\n//                   </button>\n//                   <button\n//                     type=\"button\"\n//                     onClick={handleWithdrawalSubmit}\n//                     disabled={loading.submit}\n//                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n//                   >\n//                     {loading.submit ? (\n//                       <>\n//                         <Loader className=\"h-4 w-4 animate-spin\" />\n//                         Processing...\n//                       </>\n//                     ) : (\n//                       'Submit Request'\n//                     )}\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnhancedWallet = ({\n  userId: propUserId,\n  userToken: propUserToken\n}) => {\n  _s();\n  var _JSON$parse, _JSON$parse2;\n  const [wallet, setWallet] = useState({\n    balance: 0,\n    transactions: []\n  });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({\n    wallet: false,\n    withdrawals: false,\n    submit: false\n  });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [activeTab, setActiveTab] = useState('transactions');\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: '',\n    accountNumber: '',\n    ifscCode: '',\n    mobileNumber: '',\n    amount: ''\n  });\n  const [formErrors, setFormErrors] = useState({\n    bankName: '',\n    accountNumber: '',\n    ifscCode: '',\n    mobileNumber: '',\n    amount: ''\n  });\n  const parseJwt = token => {\n    if (!token) return null;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.userId || payload.sub || null;\n    } catch {\n      return null;\n    }\n  };\n  const resolvedToken = propUserToken || localStorage.getItem('token') || ((_JSON$parse = JSON.parse(localStorage.getItem('authData') || '{}')) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.token) || '';\n  const resolvedUserId = propUserId || ((_JSON$parse2 = JSON.parse(localStorage.getItem('authData') || '{}')) === null || _JSON$parse2 === void 0 ? void 0 : _JSON$parse2.userId) || parseJwt(resolvedToken) || null;\n  const userAuthHeaders = () => {\n    const token = resolvedToken;\n    return {\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : ''\n    };\n  };\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n  const fetchWalletData = useCallback(async () => {\n    if (!resolvedUserId) return;\n    try {\n      var _data$wallet, _data$wallet2;\n      const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, {\n        headers: userAuthHeaders()\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.message) || 'Failed to load wallet');\n      setWallet({\n        balance: ((_data$wallet = data.wallet) === null || _data$wallet === void 0 ? void 0 : _data$wallet.balance) || 0,\n        transactions: ((_data$wallet2 = data.wallet) === null || _data$wallet2 === void 0 ? void 0 : _data$wallet2.transactions) || []\n      });\n    } catch {\n      setError('Failed to fetch wallet data');\n    }\n  }, [resolvedUserId, resolvedToken]);\n  const fetchWithdrawalHistory = useCallback(async () => {\n    if (!resolvedUserId) return;\n    try {\n      const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, {\n        headers: userAuthHeaders()\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error((data === null || data === void 0 ? void 0 : data.message) || 'Failed to load withdrawal history');\n      setWithdrawalRequests(data.withdrawalRequests || []);\n    } catch {\n      setError('Failed to fetch withdrawal history');\n    }\n  }, [resolvedUserId, resolvedToken]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!resolvedUserId) {\n        setError('User not authenticated. Please login.');\n        setLoading(prev => ({\n          ...prev,\n          wallet: false,\n          withdrawals: false\n        }));\n        return;\n      }\n      if (!resolvedToken) {\n        setError('Missing auth token. Please login again.');\n        setLoading(prev => ({\n          ...prev,\n          wallet: false,\n          withdrawals: false\n        }));\n        return;\n      }\n      try {\n        setLoading(prev => ({\n          ...prev,\n          wallet: true,\n          withdrawals: true\n        }));\n        await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n      } catch {\n        setError('Failed to load wallet data. Please try again.');\n      } finally {\n        setLoading(prev => ({\n          ...prev,\n          wallet: false,\n          withdrawals: false\n        }));\n      }\n    };\n    fetchData();\n  }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = 'Bank name is required';\n      isValid = false;\n    }\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = 'Valid account number is required (9-18 digits)';\n      isValid = false;\n    }\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = 'Valid IFSC code is required';\n      isValid = false;\n    }\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = 'Valid Indian mobile number is required';\n      isValid = false;\n    }\n    if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n      errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n      isValid = false;\n    } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n      errors.amount = 'Insufficient balance';\n      isValid = false;\n    }\n    setFormErrors(errors);\n    return isValid;\n  };\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n    setLoading(prev => ({\n      ...prev,\n      submit: true\n    }));\n    setError('');\n    setSuccess('');\n    try {\n      const body = {\n        userId: resolvedUserId,\n        // âœ… fixed here\n        amount: parseFloat(withdrawalForm.amount),\n        bankName: withdrawalForm.bankName,\n        accountNumber: withdrawalForm.accountNumber,\n        ifscCode: withdrawalForm.ifscCode,\n        mobileNumber: withdrawalForm.mobileNumber\n      };\n      const res = await fetch(`${API_URL}/wallet/withdraw`, {\n        method: 'POST',\n        headers: userAuthHeaders(),\n        body: JSON.stringify(body)\n      });\n      const data = await res.json();\n      if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n      await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n      setSuccess('Withdrawal request submitted successfully!');\n      setShowWithdrawForm(false);\n    } catch {\n      setError('Failed to submit withdrawal request. Please try again.');\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        submit: false\n      }));\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setWithdrawalForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n  const getStatusIcon = status => {\n    switch (status) {\n      case 'Pending':\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-5 w-5 text-yellow-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 30\n        }, this);\n      case 'Completed':\n        return /*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"h-5 w-5 text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 32\n        }, this);\n      case 'Rejected':\n        return /*#__PURE__*/_jsxDEV(X, {\n          className: \"h-5 w-5 text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 31\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(Clock, {\n          className: \"h-5 w-5 text-gray-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 783,\n          columnNumber: 23\n        }, this);\n    }\n  };\n  const getStatusColor = status => {\n    switch (status) {\n      case 'Pending':\n        return 'text-yellow-600 bg-yellow-50';\n      case 'Completed':\n        return 'text-green-600 bg-green-50';\n      case 'Rejected':\n        return 'text-red-600 bg-red-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n  const formatDate = dateString => {\n    const options = {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString('en-IN', options);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 md:p-6 max-w-6xl mx-auto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 802,\n    columnNumber: 5\n  }, this);\n};\n_s(EnhancedWallet, \"vB3+0H7V33xKH2VoeAPJRYlEjak=\");\n_c = EnhancedWallet;\nexport default EnhancedWallet;\nvar _c;\n$RefreshReg$(_c, \"EnhancedWallet\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ArrowUp","Clock","CheckCircle","X","Loader","Banknote","Plus","Minus","jsxDEV","_jsxDEV","EnhancedWallet","userId","propUserId","userToken","propUserToken","_s","_JSON$parse","_JSON$parse2","wallet","setWallet","balance","transactions","withdrawalRequests","setWithdrawalRequests","showWithdrawForm","setShowWithdrawForm","loading","setLoading","withdrawals","submit","error","setError","success","setSuccess","activeTab","setActiveTab","withdrawalForm","setWithdrawalForm","bankName","accountNumber","ifscCode","mobileNumber","amount","formErrors","setFormErrors","parseJwt","token","payload","JSON","parse","atob","split","sub","resolvedToken","localStorage","getItem","resolvedUserId","userAuthHeaders","Authorization","API_URL","process","env","REACT_APP_API_URL","fetchWalletData","_data$wallet","_data$wallet2","res","fetch","headers","data","json","ok","Error","message","fetchWithdrawalHistory","fetchData","prev","Promise","all","validateForm","errors","isValid","trim","test","parseFloat","handleWithdrawalSubmit","body","method","stringify","handleInputChange","e","name","value","target","getStatusIcon","status","className","fileName","_jsxFileName","lineNumber","columnNumber","getStatusColor","formatDate","dateString","options","day","month","year","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/moazz/Downloads/Ecommerce-MLM-Chain-main/Ecommerce-MLM-Chain-main/frontend/frontend/src/components/dashboard/Wallet.jsx"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from 'react';\n// import { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\n// const EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n//   const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n//   const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n//   const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n//   const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n//   const [activeTab, setActiveTab] = useState('transactions'); // 'transactions' or 'withdrawals'\n\n//   // Withdrawal form state\n//   const [withdrawalForm, setWithdrawalForm] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   // Form validation state\n//   const [formErrors, setFormErrors] = useState({\n//     bankName: '',\n//     accountNumber: '',\n//     ifscCode: '',\n//     mobileNumber: '',\n//     amount: ''\n//   });\n\n//   // helper: parse JWT to extract userId if token contains it\n//   const parseJwt = (token) => {\n//     if (!token) return null;\n//     try {\n//       const payload = JSON.parse(atob(token.split('.')[1]));\n//       return payload.userId || payload.sub || null;\n//     } catch (e) {\n//       return null;\n//     }\n//   };\n\n//   // Resolve token and userId (prop -> localStorage.authData -> token)\n//   const resolvedToken = propUserToken\n//     || localStorage.getItem('token')\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n//     || '';\n\n//   const resolvedUserId = propUserId\n//     || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n//     || parseJwt(resolvedToken)\n//     || null;\n\n//   const userAuthHeaders = () => {\n//     const token = resolvedToken;\n//     return {\n//       'Content-Type': 'application/json',\n//       Authorization: token ? `Bearer ${token}` : '',\n//     };\n//   };\n\n//   const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n//   // fetch functions wrapped with useCallback so they can be safely used in useEffect deps\n//   const fetchWalletData = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n//       setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n//     } catch (err) {\n//       setError('Failed to fetch wallet data');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   const fetchWithdrawalHistory = useCallback(async () => {\n//     if (!resolvedUserId) return;\n//     try {\n//       const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n//       const data = await res.json();\n//       if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n//       setWithdrawalRequests(data.withdrawalRequests || []);\n//     } catch (err) {\n//       setError('Failed to fetch withdrawal history');\n//     }\n//   }, [resolvedUserId, resolvedToken]);\n\n//   // Fetch data with error handling: skip requests if no userId/token\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       if (!resolvedUserId) {\n//         setError('User not authenticated. Please login.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n//       if (!resolvedToken) {\n//         setError('Missing auth token. Please login again.');\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//         return;\n//       }\n\n//       try {\n//         setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n//         await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       } catch (err) {\n//         setError('Failed to load wallet data. Please try again.');\n//       } finally {\n//         setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n//       }\n//     };\n\n//     fetchData();\n//   }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]); // <-- use resolved values\n\n//   const validateForm = () => {\n//     const errors = {};\n//     let isValid = true;\n\n//     if (!withdrawalForm.bankName.trim()) {\n//       errors.bankName = 'Bank name is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n//       errors.accountNumber = 'Valid account number is required (9-18 digits)';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n//       errors.ifscCode = 'Valid IFSC code is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n//       errors.mobileNumber = 'Valid Indian mobile number is required';\n//       isValid = false;\n//     }\n\n//     if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n//       errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n//       isValid = false;\n//     } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n//       errors.amount = 'Insufficient balance';\n//       isValid = false;\n//     }\n\n//     setFormErrors(errors);\n//     return isValid;\n//   };\n\n//   const handleWithdrawalSubmit = async () => {\n//     if (!validateForm()) return;\n\n//     setLoading(prev => ({ ...prev, submit: true }));\n//     setError('');\n//     setSuccess('');\n\n//     try {\n//       const body = {\n//         userId: userId,\n//         amount: parseFloat(withdrawalForm.amount),\n//         bankName: withdrawalForm.bankName,\n//         accountNumber: withdrawalForm.accountNumber,\n//         ifscCode: withdrawalForm.ifscCode,\n//         mobileNumber: withdrawalForm.mobileNumber,\n//       };\n\n//       const res = await fetch(`${API_URL}/wallet/withdraw`, {\n//         method: 'POST',\n//         headers: userAuthHeaders(),\n//         body: JSON.stringify(body),\n//       });\n//       const data = await res.json();\n//       if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n//       // refresh UI\n//       await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n//       setSuccess('Withdrawal request submitted successfully!');\n//       setShowWithdrawForm(false);\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     } catch (err) {\n//       setError('Failed to submit withdrawal request. Please try again.');\n//     } finally {\n//       setLoading(prev => ({ ...prev, submit: false }));\n//     }\n//   };\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setWithdrawalForm(prev => ({\n//       ...prev,\n//       [name]: value\n//     }));\n    \n//     // Clear error when user starts typing\n//     if (formErrors[name]) {\n//       setFormErrors(prev => ({\n//         ...prev,\n//         [name]: ''\n//       }));\n//     }\n//   };\n\n//   const getStatusIcon = (status) => {\n//     switch (status) {\n//       case 'Pending':\n//         return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n//       case 'Completed':\n//         return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n//       case 'Rejected':\n//         return <X className=\"h-5 w-5 text-red-500\" />;\n//       default:\n//         return <Clock className=\"h-5 w-5 text-gray-500\" />;\n//     }\n//   };\n\n//   const getStatusColor = (status) => {\n//     switch (status) {\n//       case 'Pending':\n//         return 'text-yellow-600 bg-yellow-50';\n//       case 'Completed':\n//         return 'text-green-600 bg-green-50';\n//       case 'Rejected':\n//         return 'text-red-600 bg-red-50';\n//       default:\n//         return 'text-gray-600 bg-gray-50';\n//     }\n//   };\n\n//   const formatDate = (dateString) => {\n//     const options = { day: 'numeric', month: 'short', year: 'numeric' };\n//     return new Date(dateString).toLocaleDateString('en-IN', options);\n//   };\n\n//   return (\n//     <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n//       <div className=\"mb-6\">\n//         <h2 className=\"text-2xl md:text-3xl font-bold text-gray-900\">Wallet Dashboard</h2>\n//         <p className=\"text-gray-600\">Manage your earnings and withdrawals</p>\n//       </div>\n\n//       {/* Notifications */}\n//       {error && (\n//         <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3\">\n//           <X className=\"h-5 w-5 text-red-500 mt-0.5 flex-shrink-0\" />\n//           <p className=\"text-red-600\">{error}</p>\n//         </div>\n//       )}\n\n//       {success && (\n//         <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg flex items-start gap-3\">\n//           <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5 flex-shrink-0\" />\n//           <p className=\"text-green-600\">{success}</p>\n//         </div>\n//       )}\n\n//       {/* Balance Card */}\n//       <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 mb-6 text-white\">\n//         <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n//           <div>\n//             <p className=\"text-blue-100 text-sm\">Available Balance</p>\n//             <p className=\"text-3xl md:text-4xl font-bold\">â‚¹{wallet.balance.toLocaleString('en-IN')}</p>\n//             <p className=\"text-blue-100 text-sm mt-2\">\n//               {wallet.balance >= 1000 ? (\n//                 'Eligible for withdrawal'\n//               ) : (\n//                 <>\n//                   <span className=\"font-medium\">â‚¹{(1000 - wallet.balance).toLocaleString('en-IN')}</span> more needed for withdrawal\n//                 </>\n//               )}\n//             </p>\n//           </div>\n//           <div className=\"flex gap-3 w-full md:w-auto\">\n//             <button\n//               onClick={() => setShowWithdrawForm(true)}\n//               disabled={wallet.balance < 1000}\n//               className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors w-full md:w-auto justify-center ${\n//                 wallet.balance >= 1000\n//                   ? 'bg-white text-blue-600 hover:bg-blue-50'\n//                   : 'bg-gray-400 text-gray-200 cursor-not-allowed'\n//               }`}\n//             >\n//               <ArrowUp className=\"h-5 w-5\" />\n//               <span>Withdraw</span>\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Tabs */}\n//       <div className=\"flex border-b border-gray-200 mb-6\">\n//         <button\n//           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n//             activeTab === 'transactions'\n//               ? 'border-blue-500 text-blue-600'\n//               : 'border-transparent text-gray-500 hover:text-gray-700'\n//           }`}\n//           onClick={() => setActiveTab('transactions')}\n//         >\n//           Transactions\n//         </button>\n//         <button\n//           className={`py-3 px-6 font-medium text-sm border-b-2 transition-colors ${\n//             activeTab === 'withdrawals'\n//               ? 'border-blue-500 text-blue-600'\n//               : 'border-transparent text-gray-500 hover:text-gray-700'\n//           }`}\n//           onClick={() => setActiveTab('withdrawals')}\n//         >\n//           Withdrawals\n//         </button>\n//       </div>\n\n//       {/* Content based on active tab */}\n//       {activeTab === 'transactions' ? (\n//         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n//           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Transaction History</h3>\n//             <div className=\"text-sm text-gray-500\">\n//               {wallet.transactions.length} records\n//             </div>\n//           </div>\n//           <div className=\"max-h-[500px] overflow-y-auto\">\n//             {loading.wallet ? (\n//               <div className=\"p-8 text-center\">\n//                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n//                 <p className=\"mt-2 text-gray-500\">Loading transactions...</p>\n//               </div>\n//             ) : wallet.transactions.length === 0 ? (\n//               <div className=\"p-8 text-center text-gray-500\">\n//                 <Banknote className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n//                 <p>No transactions yet</p>\n//               </div>\n//             ) : (\n//               <div className=\"divide-y divide-gray-200\">\n//                 {wallet.transactions.map((txn) => (\n//                   <div key={txn.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n//                     <div className=\"flex justify-between items-center\">\n//                       <div className=\"flex items-center gap-4\">\n//                         <div className={`p-3 rounded-full ${txn.amount > 0 ? 'bg-green-100' : 'bg-red-100'}`}>\n//                           {txn.amount > 0 ? (\n//                             <Plus className=\"h-5 w-5 text-green-600\" />\n//                           ) : (\n//                             <Minus className=\"h-5 w-5 text-red-600\" />\n//                           )}\n//                         </div>\n//                         <div>\n//                           <p className=\"font-medium text-gray-900\">{txn.type}</p>\n//                           <p className=\"text-sm text-gray-500\">{txn.description}</p>\n//                           <p className=\"text-xs text-gray-400\">{formatDate(txn.date)}</p>\n//                         </div>\n//                       </div>\n//                       <div className=\"text-right\">\n//                         <p className={`font-semibold ${txn.amount > 0 ? 'text-green-600' : 'text-red-600'}`}>\n//                           {txn.amount > 0 ? '+' : ''}â‚¹{Math.abs(txn.amount).toLocaleString('en-IN')}\n//                         </p>\n//                         <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(txn.status)}`}>\n//                           {txn.status}\n//                         </span>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       ) : (\n//         <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n//           <div className=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n//             <h3 className=\"text-lg font-semibold text-gray-900\">Withdrawal History</h3>\n//             <div className=\"text-sm text-gray-500\">\n//               {withdrawalRequests.length} requests\n//             </div>\n//           </div>\n//           <div className=\"max-h-[500px] overflow-y-auto\">\n//             {loading.withdrawals ? (\n//               <div className=\"p-8 text-center\">\n//                 <Loader className=\"h-8 w-8 mx-auto animate-spin text-blue-500\" />\n//                 <p className=\"mt-2 text-gray-500\">Loading withdrawals...</p>\n//               </div>\n//             ) : withdrawalRequests.length === 0 ? (\n//               <div className=\"p-8 text-center text-gray-500\">\n//                 <ArrowUp className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n//                 <p>No withdrawal requests yet</p>\n//                 <button\n//                   onClick={() => setShowWithdrawForm(true)}\n//                   className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n//                 >\n//                   Make your first withdrawal\n//                 </button>\n//               </div>\n//             ) : (\n//               <div className=\"divide-y divide-gray-200\">\n//                 {withdrawalRequests.map((request) => (\n//                   <div key={request.id} className=\"p-4 hover:bg-gray-50 transition-colors\">\n//                     <div className=\"flex justify-between items-start\">\n//                       <div className=\"flex items-start gap-3\">\n//                         {getStatusIcon(request.status)}\n//                         <div>\n//                           <p className=\"font-medium text-gray-900\">â‚¹{request.amount.toLocaleString('en-IN')}</p>\n//                           <p className=\"text-sm text-gray-600\">{request.bankName}</p>\n//                           <p className=\"text-xs text-gray-500\">Account: {request.accountNumber}</p>\n//                           <p className=\"text-xs text-gray-500\">IFSC: {request.ifscCode}</p>\n//                           <p className=\"text-xs text-gray-400\">{formatDate(request.date)}</p>\n//                         </div>\n//                       </div>\n//                       <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(request.status)}`}>\n//                         {request.status}\n//                       </span>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Withdrawal Form Modal */}\n//       {showWithdrawForm && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n//           <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto\">\n//             <div className=\"p-6\">\n//               <div className=\"flex justify-between items-center mb-4\">\n//                 <h3 className=\"text-lg font-semibold text-gray-900\">Withdraw Money</h3>\n//                 <button\n//                   onClick={() => setShowWithdrawForm(false)}\n//                   className=\"text-gray-400 hover:text-gray-600\"\n//                   disabled={loading.submit}\n//                 >\n//                   <X className=\"h-6 w-6\" />\n//                 </button>\n//               </div>\n\n//               <div className=\"space-y-4\">\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Bank Name <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"bankName\"\n//                     value={withdrawalForm.bankName}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.bankName ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter bank name\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.bankName && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.bankName}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Account Number <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"accountNumber\"\n//                     value={withdrawalForm.accountNumber}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.accountNumber ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter account number\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.accountNumber && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.accountNumber}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     IFSC Code <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"text\"\n//                     name=\"ifscCode\"\n//                     value={withdrawalForm.ifscCode}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.ifscCode ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter IFSC code\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.ifscCode && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.ifscCode}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Mobile Number <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"tel\"\n//                     name=\"mobileNumber\"\n//                     value={withdrawalForm.mobileNumber}\n//                     onChange={handleInputChange}\n//                     required\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.mobileNumber ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Enter mobile number\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.mobileNumber && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.mobileNumber}</p>\n//                   )}\n//                 </div>\n\n//                 <div>\n//                   <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n//                     Amount (â‚¹) <span className=\"text-red-500\">*</span>\n//                   </label>\n//                   <input\n//                     type=\"number\"\n//                     name=\"amount\"\n//                     value={withdrawalForm.amount}\n//                     onChange={handleInputChange}\n//                     required\n//                     min=\"1000\"\n//                     max={wallet.balance}\n//                     className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${\n//                       formErrors.amount ? 'border-red-500' : 'border-gray-300'\n//                     }`}\n//                     placeholder=\"Minimum â‚¹1000\"\n//                     disabled={loading.submit}\n//                   />\n//                   {formErrors.amount && (\n//                     <p className=\"mt-1 text-sm text-red-600\">{formErrors.amount}</p>\n//                   )}\n//                   <p className=\"text-xs text-gray-500 mt-1\">\n//                     Available: â‚¹{wallet.balance.toLocaleString('en-IN')} | Minimum: â‚¹1,000\n//                   </p>\n//                 </div>\n\n//                 <div className=\"flex gap-3 pt-4\">\n//                   <button\n//                     type=\"button\"\n//                     onClick={() => setShowWithdrawForm(false)}\n//                     disabled={loading.submit}\n//                     className=\"flex-1 py-3 px-4 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 disabled:opacity-50\"\n//                   >\n//                     Cancel\n//                   </button>\n//                   <button\n//                     type=\"button\"\n//                     onClick={handleWithdrawalSubmit}\n//                     disabled={loading.submit}\n//                     className=\"flex-1 py-3 px-4 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n//                   >\n//                     {loading.submit ? (\n//                       <>\n//                         <Loader className=\"h-4 w-4 animate-spin\" />\n//                         Processing...\n//                       </>\n//                     ) : (\n//                       'Submit Request'\n//                     )}\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default EnhancedWallet;\n\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ArrowUp, Clock, CheckCircle, X, Loader, Banknote, Plus, Minus } from 'lucide-react';\n\nconst EnhancedWallet = ({ userId: propUserId, userToken: propUserToken }) => {\n  const [wallet, setWallet] = useState({ balance: 0, transactions: [] });\n  const [withdrawalRequests, setWithdrawalRequests] = useState([]);\n  const [showWithdrawForm, setShowWithdrawForm] = useState(false);\n  const [loading, setLoading] = useState({ wallet: false, withdrawals: false, submit: false });\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [activeTab, setActiveTab] = useState('transactions');\n\n  const [withdrawalForm, setWithdrawalForm] = useState({\n    bankName: '',\n    accountNumber: '',\n    ifscCode: '',\n    mobileNumber: '',\n    amount: ''\n  });\n\n  const [formErrors, setFormErrors] = useState({\n    bankName: '',\n    accountNumber: '',\n    ifscCode: '',\n    mobileNumber: '',\n    amount: ''\n  });\n\n  const parseJwt = (token) => {\n    if (!token) return null;\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.userId || payload.sub || null;\n    } catch {\n      return null;\n    }\n  };\n\n  const resolvedToken = propUserToken\n    || localStorage.getItem('token')\n    || JSON.parse(localStorage.getItem('authData') || '{}')?.token\n    || '';\n\n  const resolvedUserId = propUserId\n    || JSON.parse(localStorage.getItem('authData') || '{}')?.userId\n    || parseJwt(resolvedToken)\n    || null;\n\n  const userAuthHeaders = () => {\n    const token = resolvedToken;\n    return {\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : '',\n    };\n  };\n\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n  const fetchWalletData = useCallback(async () => {\n    if (!resolvedUserId) return;\n    try {\n      const res = await fetch(`${API_URL}/wallet/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.message || 'Failed to load wallet');\n      setWallet({ balance: data.wallet?.balance || 0, transactions: data.wallet?.transactions || [] });\n    } catch {\n      setError('Failed to fetch wallet data');\n    }\n  }, [resolvedUserId, resolvedToken]);\n\n  const fetchWithdrawalHistory = useCallback(async () => {\n    if (!resolvedUserId) return;\n    try {\n      const res = await fetch(`${API_URL}/wallet/withdrawal-requests/user/${resolvedUserId}`, { headers: userAuthHeaders() });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data?.message || 'Failed to load withdrawal history');\n      setWithdrawalRequests(data.withdrawalRequests || []);\n    } catch {\n      setError('Failed to fetch withdrawal history');\n    }\n  }, [resolvedUserId, resolvedToken]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!resolvedUserId) {\n        setError('User not authenticated. Please login.');\n        setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n        return;\n      }\n      if (!resolvedToken) {\n        setError('Missing auth token. Please login again.');\n        setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n        return;\n      }\n\n      try {\n        setLoading(prev => ({ ...prev, wallet: true, withdrawals: true }));\n        await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n      } catch {\n        setError('Failed to load wallet data. Please try again.');\n      } finally {\n        setLoading(prev => ({ ...prev, wallet: false, withdrawals: false }));\n      }\n    };\n\n    fetchData();\n  }, [resolvedUserId, resolvedToken, fetchWalletData, fetchWithdrawalHistory]);\n\n  const validateForm = () => {\n    const errors = {};\n    let isValid = true;\n\n    if (!withdrawalForm.bankName.trim()) {\n      errors.bankName = 'Bank name is required';\n      isValid = false;\n    }\n\n    if (!withdrawalForm.accountNumber.trim() || !/^\\d{9,18}$/.test(withdrawalForm.accountNumber)) {\n      errors.accountNumber = 'Valid account number is required (9-18 digits)';\n      isValid = false;\n    }\n\n    if (!withdrawalForm.ifscCode.trim() || !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(withdrawalForm.ifscCode)) {\n      errors.ifscCode = 'Valid IFSC code is required';\n      isValid = false;\n    }\n\n    if (!withdrawalForm.mobileNumber.trim() || !/^[6-9]\\d{9}$/.test(withdrawalForm.mobileNumber)) {\n      errors.mobileNumber = 'Valid Indian mobile number is required';\n      isValid = false;\n    }\n\n    if (!withdrawalForm.amount || parseFloat(withdrawalForm.amount) < 1000) {\n      errors.amount = 'Minimum withdrawal amount is â‚¹1000';\n      isValid = false;\n    } else if (parseFloat(withdrawalForm.amount) > wallet.balance) {\n      errors.amount = 'Insufficient balance';\n      isValid = false;\n    }\n\n    setFormErrors(errors);\n    return isValid;\n  };\n\n  const handleWithdrawalSubmit = async () => {\n    if (!validateForm()) return;\n\n    setLoading(prev => ({ ...prev, submit: true }));\n    setError('');\n    setSuccess('');\n\n    try {\n      const body = {\n        userId: resolvedUserId, // âœ… fixed here\n        amount: parseFloat(withdrawalForm.amount),\n        bankName: withdrawalForm.bankName,\n        accountNumber: withdrawalForm.accountNumber,\n        ifscCode: withdrawalForm.ifscCode,\n        mobileNumber: withdrawalForm.mobileNumber,\n      };\n\n      const res = await fetch(`${API_URL}/wallet/withdraw`, {\n        method: 'POST',\n        headers: userAuthHeaders(),\n        body: JSON.stringify(body),\n      });\n      const data = await res.json();\n      if (!data.success) throw new Error(data.message || 'Withdrawal failed');\n\n      await Promise.all([fetchWalletData(), fetchWithdrawalHistory()]);\n      setSuccess('Withdrawal request submitted successfully!');\n      setShowWithdrawForm(false);\n    } catch {\n      setError('Failed to submit withdrawal request. Please try again.');\n    } finally {\n      setLoading(prev => ({ ...prev, submit: false }));\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setWithdrawalForm(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    if (formErrors[name]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'Pending': return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      case 'Completed': return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'Rejected': return <X className=\"h-5 w-5 text-red-500\" />;\n      default: return <Clock className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Pending': return 'text-yellow-600 bg-yellow-50';\n      case 'Completed': return 'text-green-600 bg-green-50';\n      case 'Rejected': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const formatDate = (dateString) => {\n    const options = { day: 'numeric', month: 'short', year: 'numeric' };\n    return new Date(dateString).toLocaleDateString('en-IN', options);\n  };\n\n  return (\n    <div className=\"p-4 md:p-6 max-w-6xl mx-auto\">\n      {/* UI code remains same â€” I kept all your JSX untouched */}\n      {/* ... */}\n    </div>\n  );\n};\n\nexport default EnhancedWallet;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}